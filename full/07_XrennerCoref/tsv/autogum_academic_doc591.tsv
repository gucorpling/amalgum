#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Referent|entity|infstat
#T_RL=webanno.custom.Coref|type|BT_webanno.custom.Referent


#Text=2 .
1-1	0-1	2	quantity	new	coref	12-5
1-2	2-3	.	_	_	_	_

#Text=Related Work
2-1	4-11	Related	abstract[2]	new[2]	_	_
2-2	12-16	Work	abstract[2]	new[2]	_	_

#Text=Two important techniques are used in our proposed method : absolute moment block truncation coding ( AMBTC ) compression and matrix coding .
3-1	17-20	Two	abstract[3]	new[3]	coref	4-1[13_3]
3-2	21-30	important	abstract[3]	new[3]	_	_
3-3	31-41	techniques	abstract[3]	new[3]	_	_
3-4	42-45	are	_	_	_	_
3-5	46-50	used	_	_	_	_
3-6	51-53	in	_	_	_	_
3-7	54-57	our	person|abstract[5]	acc|new[5]	appos|appos	3-11[9_5]|3-11[9_5]
3-8	58-66	proposed	abstract[5]	new[5]	_	_
3-9	67-73	method	abstract[5]	new[5]	_	_
3-10	74-75	:	_	_	_	_
3-11	76-84	absolute	abstract[9]	giv[9]	appos	3-19[11_9]
3-12	85-91	moment	event|abstract[9]	new|giv[9]	coref	6-1[17_0]
3-13	92-97	block	object|abstract[9]	new|giv[9]	coref	7-12
3-14	98-108	truncation	place|abstract[9]	new|giv[9]	coref	6-4
3-15	109-115	coding	abstract[9]	giv[9]	_	_
3-16	116-117	(	_	_	_	_
3-17	118-123	AMBTC	object	new	coref	6-7
3-18	124-125	)	_	_	_	_
3-19	126-137	compression	abstract[11]	giv[11]	coref	6-1[20_11]
3-20	138-141	and	abstract[11]	giv[11]	_	_
3-21	142-148	matrix	abstract[11]|abstract	giv[11]|new	coref	18-1
3-22	149-155	coding	abstract[11]	giv[11]	_	_
3-23	156-157	.	_	_	_	_

#Text=These techniques are briefly introduced in Section 2.1 and Section 2.2 , respectively .
4-1	158-163	These	abstract[13]	giv[13]	_	_
4-2	164-174	techniques	abstract[13]	giv[13]	_	_
4-3	175-178	are	_	_	_	_
4-4	179-186	briefly	_	_	_	_
4-5	187-197	introduced	_	_	_	_
4-6	198-200	in	_	_	_	_
4-7	201-208	Section	abstract[14]	new[14]	coref	4-10[15_14]
4-8	209-212	2.1	abstract[14]	new[14]	_	_
4-9	213-216	and	_	_	_	_
4-10	217-224	Section	abstract[15]	giv[15]	_	_
4-11	225-228	2.2	abstract[15]	giv[15]	_	_
4-12	229-230	,	_	_	_	_
4-13	231-243	respectively	_	_	_	_
4-14	244-245	.	_	_	_	_

#Text=2.1 .
5-1	246-249	2.1	abstract	new	_	_
5-2	250-251	.	_	_	_	_

#Text=Absolute Moment Block Truncation Coding ( AMBTC )
6-1	252-260	Absolute	event[17]|abstract[20]	giv[17]|giv[20]	coref|coref|coref|coref	7-9[0_20]|9-23[0_17]|7-9[0_20]|9-23[0_17]
6-2	261-267	Moment	event[17]|abstract[20]	giv[17]|giv[20]	_	_
6-3	268-273	Block	person|abstract[20]	new|giv[20]	_	_
6-4	274-284	Truncation	abstract|abstract[20]	giv|giv[20]	coref	7-13
6-5	285-291	Coding	abstract[20]	giv[20]	_	_
6-6	292-293	(	abstract[20]	giv[20]	_	_
6-7	294-299	AMBTC	abstract[20]|object	giv[20]|giv	coref	9-28
6-8	300-301	)	abstract[20]	giv[20]	_	_

#Text=In 1979 , an efficient block-based lossy image compression technique named block truncation coding ( BTC ) was proposed by Delp and Mitchell .
7-1	302-304	In	_	_	_	_
7-2	305-309	1979	time	new	_	_
7-3	310-311	,	_	_	_	_
7-4	312-314	an	object[24]|abstract[26]	new[24]|new[26]	coref|coref|coref|coref	8-7[34_24]|9-6[44_26]|8-7[34_24]|9-6[44_26]
7-5	315-324	efficient	object[24]|abstract[26]	new[24]|new[26]	_	_
7-6	325-336	block-based	object[24]|abstract[26]	new[24]|new[26]	_	_
7-7	337-342	lossy	place|object[24]|abstract[26]	new|new[24]|new[26]	_	_
7-8	343-348	image	object[24]|abstract[26]	new[24]|new[26]	_	_
7-9	349-360	compression	event|abstract[26]	giv|new[26]	coref	7-12[29_0]
7-10	361-370	technique	abstract[26]	new[26]	_	_
7-11	371-376	named	_	_	_	_
7-12	377-382	block	object|abstract[29]	giv|giv[29]	coref|coref|coref|coref	8-5[0_29]|8-26[41_0]|8-5[0_29]|8-26[41_0]
7-13	383-393	truncation	place|abstract[29]	giv|giv[29]	coref	9-25
7-14	394-400	coding	abstract[29]	giv[29]	_	_
7-15	401-402	(	_	_	_	_
7-16	403-406	BTC	object	new	coref	9-7
7-17	407-408	)	_	_	_	_
7-18	409-412	was	_	_	_	_
7-19	413-421	proposed	_	_	_	_
7-20	422-424	by	_	_	_	_
7-21	425-429	Delp	person	new	_	_
7-22	430-433	and	_	_	_	_
7-23	434-442	Mitchell	person	new	coref	9-16
7-24	443-444	.	_	_	_	_

#Text=In order to achieve compression , an image is divided into several non-overlapping blocks and stores only one bitmap and two corresponding quantization values of each block .
8-1	445-447	In	_	_	_	_
8-2	448-453	order	_	_	_	_
8-3	454-456	to	_	_	_	_
8-4	457-464	achieve	_	_	_	_
8-5	465-476	compression	abstract	giv	coref	9-22[52_0]
8-6	477-478	,	_	_	_	_
8-7	479-481	an	object[34]	giv[34]	coref	10-4[55_34]
8-8	482-487	image	object[34]	giv[34]	_	_
8-9	488-490	is	_	_	_	_
8-10	491-498	divided	_	_	_	_
8-11	499-503	into	_	_	_	_
8-12	504-511	several	object[35]	new[35]	coref	10-10[56_35]
8-13	512-527	non-overlapping	object[35]	new[35]	_	_
8-14	528-534	blocks	object[35]	new[35]	_	_
8-15	535-538	and	_	_	_	_
8-16	539-545	stores	place	new	_	_
8-17	546-550	only	abstract[37]	new[37]	coref	11-1[68_37]
8-18	551-554	one	abstract[37]	new[37]	_	_
8-19	555-561	bitmap	abstract[37]	new[37]	_	_
8-20	562-565	and	_	_	_	_
8-21	566-569	two	abstract	new	_	_
8-22	570-583	corresponding	_	_	_	_
8-23	584-596	quantization	abstract|abstract[40]	new|new[40]	coref|coref|coref|coref	12-17|12-16[83_40]|12-17|12-16[83_40]
8-24	597-603	values	abstract[40]	new[40]	_	_
8-25	604-606	of	abstract[40]	new[40]	_	_
8-26	607-611	each	abstract[40]|object[41]	new[40]|giv[41]	coref	9-24[0_41]
8-27	612-617	block	abstract[40]|object[41]	new[40]|giv[41]	_	_
8-28	618-619	.	_	_	_	_

#Text=Because the algorithm utilized in the BTC technique has significant computational complexity , Lema and Mitchell proposed an improved version named absolute moment block truncation coding ( AMBTC ) .
9-1	620-627	Because	_	_	_	_
9-2	628-631	the	abstract[42]	new[42]	_	_
9-3	632-641	algorithm	abstract[42]	new[42]	_	_
9-4	642-650	utilized	_	_	_	_
9-5	651-653	in	_	_	_	_
9-6	654-657	the	abstract[44]	giv[44]	_	_
9-7	658-661	BTC	abstract|abstract[44]	giv|giv[44]	_	_
9-8	662-671	technique	abstract[44]	giv[44]	_	_
9-9	672-675	has	_	_	_	_
9-10	676-687	significant	abstract[45]	new[45]	_	_
9-11	688-701	computational	abstract[45]	new[45]	_	_
9-12	702-712	complexity	abstract[45]	new[45]	_	_
9-13	713-714	,	_	_	_	_
9-14	715-719	Lema	person	new	_	_
9-15	720-723	and	_	_	_	_
9-16	724-732	Mitchell	person	giv	_	_
9-17	733-741	proposed	_	_	_	_
9-18	742-744	an	abstract[48]	new[48]	_	_
9-19	745-753	improved	abstract[48]	new[48]	_	_
9-20	754-761	version	abstract[48]	new[48]	_	_
9-21	762-767	named	_	_	_	_
9-22	768-776	absolute	abstract[52]	giv[52]	coref	15-5[0_52]
9-23	777-783	moment	event|abstract[52]	giv|giv[52]	_	_
9-24	784-789	block	object|abstract[52]	giv|giv[52]	coref	10-23[61_0]
9-25	790-800	truncation	place|abstract[52]	giv|giv[52]	_	_
9-26	801-807	coding	abstract[52]	giv[52]	_	_
9-27	808-809	(	_	_	_	_
9-28	810-815	AMBTC	object	giv	coref	10-2
9-29	816-817	)	_	_	_	_
9-30	818-819	.	_	_	_	_

#Text=In AMBTC , the image is also divided into several non-overlapping blocks with a size of k × k pixels , for each block , the mean value AVG can be calculated by Equation ( 1 ) . ( 1 ) where denotes the j -th pixel value in the block .
10-1	820-822	In	_	_	_	_
10-2	823-828	AMBTC	abstract	giv	_	_
10-3	829-830	,	_	_	_	_
10-4	831-834	the	object[55]	giv[55]	_	_
10-5	835-840	image	object[55]	giv[55]	_	_
10-6	841-843	is	_	_	_	_
10-7	844-848	also	_	_	_	_
10-8	849-856	divided	_	_	_	_
10-9	857-861	into	_	_	_	_
10-10	862-869	several	object[56]	giv[56]	_	_
10-11	870-885	non-overlapping	object[56]	giv[56]	_	_
10-12	886-892	blocks	object[56]	giv[56]	_	_
10-13	893-897	with	object[56]	giv[56]	_	_
10-14	898-899	a	object[56]|quantity[57]	giv[56]|new[57]	_	_
10-15	900-904	size	object[56]|quantity[57]	giv[56]|new[57]	_	_
10-16	905-907	of	object[56]|quantity[57]	giv[56]|new[57]	_	_
10-17	908-909	k	object[56]|quantity[57]|quantity	giv[56]|new[57]|new	coref	10-19
10-18	910-911	×	object[56]|quantity[57]	giv[56]|new[57]	_	_
10-19	912-913	k	object[56]|quantity[57]|abstract|abstract[60]	giv[56]|new[57]|giv|new[60]	_	_
10-20	914-920	pixels	object[56]|quantity[57]|abstract[60]	giv[56]|new[57]|new[60]	_	_
10-21	921-922	,	_	_	_	_
10-22	923-926	for	_	_	_	_
10-23	927-931	each	object[61]	giv[61]	coref	10-50[67_61]
10-24	932-937	block	object[61]	giv[61]	_	_
10-25	938-939	,	_	_	_	_
10-26	940-943	the	abstract[62]	new[62]	coref	10-44[66_62]
10-27	944-948	mean	abstract[62]	new[62]	_	_
10-28	949-954	value	abstract[62]	new[62]	_	_
10-29	955-958	AVG	_	_	_	_
10-30	959-962	can	_	_	_	_
10-31	963-965	be	_	_	_	_
10-32	966-976	calculated	_	_	_	_
10-33	977-979	by	_	_	_	_
10-34	980-988	Equation	abstract[63]	new[63]	coref	24-2[142_63]
10-35	989-990	(	abstract[63]	new[63]	_	_
10-36	991-992	1	abstract[63]	new[63]	_	_
10-37	993-994	)	abstract[63]	new[63]	_	_
10-38	995-996	.	_	_	_	_
10-39	997-998	(	_	_	_	_
10-40	999-1000	1	_	_	_	_
10-41	1001-1002	)	_	_	_	_
10-42	1003-1008	where	_	_	_	_
10-43	1009-1016	denotes	_	_	_	_
10-44	1017-1020	the	abstract[66]	giv[66]	coref	11-9[70_66]
10-45	1021-1022	j	abstract|abstract[66]	new|giv[66]	_	_
10-46	1023-1026	-th	abstract[66]	giv[66]	_	_
10-47	1027-1032	pixel	object|abstract[66]	new|giv[66]	coref	11-10
10-48	1033-1038	value	abstract[66]	giv[66]	_	_
10-49	1039-1041	in	_	_	_	_
10-50	1042-1045	the	object[67]	giv[67]	coref	15-8[101_67]
10-51	1046-1051	block	object[67]	giv[67]	_	_
10-52	1052-1053	.	_	_	_	_

#Text=The bitmap can then be constructed by comparing each pixel value with AVG : Set the bit value of bitmap to ‘ 0 ’ if the pixel value is less than AVG and set to ‘ 1 ’ for others .
11-1	1054-1057	The	abstract[68]	giv[68]	coref	11-20[0_68]
11-2	1058-1064	bitmap	abstract[68]	giv[68]	_	_
11-3	1065-1068	can	_	_	_	_
11-4	1069-1073	then	_	_	_	_
11-5	1074-1076	be	_	_	_	_
11-6	1077-1088	constructed	_	_	_	_
11-7	1089-1091	by	_	_	_	_
11-8	1092-1101	comparing	_	_	_	_
11-9	1102-1106	each	abstract[70]	giv[70]	coref	11-16[73_70]
11-10	1107-1112	pixel	object|abstract[70]	giv|giv[70]	coref	11-27
11-11	1113-1118	value	abstract[70]	giv[70]	_	_
11-12	1119-1123	with	_	_	_	_
11-13	1124-1127	AVG	abstract	new	coref	11-32
11-14	1128-1129	:	_	_	_	_
11-15	1130-1133	Set	_	_	_	_
11-16	1134-1137	the	abstract[73]	giv[73]	coref	11-22[76_73]
11-17	1138-1141	bit	abstract|abstract[73]	new|giv[73]	coref	20-18[129_0]
11-18	1142-1147	value	abstract[73]	giv[73]	_	_
11-19	1148-1150	of	abstract[73]	giv[73]	_	_
11-20	1151-1157	bitmap	abstract[73]|abstract	giv[73]|giv	coref	13-20
11-21	1158-1160	to	_	_	_	_
11-22	1161-1162	‘	abstract[76]	giv[76]	coref	12-26[0_76]
11-23	1163-1164	0	abstract[76]	giv[76]	_	_
11-24	1165-1166	’	abstract[76]	giv[76]	_	_
11-25	1167-1169	if	abstract[76]	giv[76]	_	_
11-26	1170-1173	the	abstract[76]	giv[76]	_	_
11-27	1174-1179	pixel	object|abstract[76]	giv|giv[76]	coref	14-7
11-28	1180-1185	value	abstract[76]	giv[76]	_	_
11-29	1186-1188	is	_	_	_	_
11-30	1189-1193	less	_	_	_	_
11-31	1194-1198	than	_	_	_	_
11-32	1199-1202	AVG	abstract	giv	_	_
11-33	1203-1206	and	_	_	_	_
11-34	1207-1210	set	_	_	_	_
11-35	1211-1213	to	_	_	_	_
11-36	1214-1215	‘	_	_	_	_
11-37	1216-1217	1	time	new	coref	13-13[90_0]
11-38	1218-1219	’	_	_	_	_
11-39	1220-1223	for	_	_	_	_
11-40	1224-1230	others	person	new	_	_
11-41	1231-1232	.	_	_	_	_

#Text=Next , Equations ( 2 ) and ( 3 ) can be applied to derive two quantization values , i. e. , the low mean value L and the high mean value H , respectively .
12-1	1233-1237	Next	_	_	_	_
12-2	1238-1239	,	_	_	_	_
12-3	1240-1249	Equations	abstract	new	_	_
12-4	1250-1251	(	_	_	_	_
12-5	1252-1253	2	quantity	giv	_	_
12-6	1254-1255	)	_	_	_	_
12-7	1256-1259	and	_	_	_	_
12-8	1260-1261	(	_	_	_	_
12-9	1262-1263	3	_	_	_	_
12-10	1264-1265	)	_	_	_	_
12-11	1266-1269	can	_	_	_	_
12-12	1270-1272	be	_	_	_	_
12-13	1273-1280	applied	_	_	_	_
12-14	1281-1283	to	_	_	_	_
12-15	1284-1290	derive	_	_	_	_
12-16	1291-1294	two	abstract[83]	giv[83]	_	_
12-17	1295-1307	quantization	abstract|abstract[83]	giv|giv[83]	_	_
12-18	1308-1314	values	abstract[83]	giv[83]	_	_
12-19	1315-1316	,	_	_	_	_
12-20	1317-1319	i.	_	_	_	_
12-21	1320-1322	e.	_	_	_	_
12-22	1323-1324	,	_	_	_	_
12-23	1325-1328	the	abstract[85]	new[85]	_	_
12-24	1329-1332	low	abstract[85]	new[85]	_	_
12-25	1333-1337	mean	abstract[85]	new[85]	_	_
12-26	1338-1343	value	abstract|abstract[85]	giv|new[85]	coref	12-32
12-27	1344-1345	L	abstract[85]	new[85]	_	_
12-28	1346-1349	and	_	_	_	_
12-29	1350-1353	the	abstract[87]	new[87]	coref	15-17[0_87]
12-30	1354-1358	high	abstract[87]	new[87]	_	_
12-31	1359-1363	mean	abstract[87]	new[87]	_	_
12-32	1364-1369	value	abstract|abstract[87]	giv|new[87]	coref	16-22[111_0]
12-33	1370-1371	H	abstract[87]	new[87]	_	_
12-34	1372-1373	,	_	_	_	_
12-35	1374-1386	respectively	_	_	_	_
12-36	1387-1388	.	_	_	_	_

#Text=( 2 ) ( 3 ) where q represents the number of ‘ 1 ’ that exist in the bitmap BM .
13-1	1389-1390	(	_	_	_	_
13-2	1391-1392	2	_	_	_	_
13-3	1393-1394	)	_	_	_	_
13-4	1395-1396	(	_	_	_	_
13-5	1397-1398	3	_	_	_	_
13-6	1399-1400	)	_	_	_	_
13-7	1401-1406	where	_	_	_	_
13-8	1407-1408	q	abstract	new	_	_
13-9	1409-1419	represents	_	_	_	_
13-10	1420-1423	the	abstract[89]	new[89]	_	_
13-11	1424-1430	number	abstract[89]	new[89]	_	_
13-12	1431-1433	of	_	_	_	_
13-13	1434-1435	‘	time[90]	giv[90]	coref	16-10[108_90]
13-14	1436-1437	1	time[90]	giv[90]	_	_
13-15	1438-1439	’	time[90]	giv[90]	_	_
13-16	1440-1444	that	_	_	_	_
13-17	1445-1450	exist	_	_	_	_
13-18	1451-1453	in	_	_	_	_
13-19	1454-1457	the	object[92]	new[92]	coref	14-24[98_92]
13-20	1458-1464	bitmap	abstract|object[92]	giv|new[92]	coref	14-24
13-21	1465-1467	BM	object[92]	new[92]	_	_
13-22	1468-1469	.	_	_	_	_

#Text=Meanwhile , and denote two original pixel sets which the corresponding bits are ‘ 0 ’ and ‘ 1 ’ , respectively in bitmap BM .
14-1	1470-1479	Meanwhile	_	_	_	_
14-2	1480-1481	,	_	_	_	_
14-3	1482-1485	and	_	_	_	_
14-4	1486-1492	denote	_	_	_	_
14-5	1493-1496	two	abstract[94]	new[94]	_	_
14-6	1497-1505	original	abstract[94]	new[94]	_	_
14-7	1506-1511	pixel	object|abstract[94]	giv|new[94]	_	_
14-8	1512-1516	sets	abstract[94]	new[94]	_	_
14-9	1517-1522	which	quantity[96]	new[96]	coref	16-11[107_96]
14-10	1523-1526	the	object[95]|quantity[96]	new[95]|new[96]	coref	20-26[130_95]
14-11	1527-1540	corresponding	object[95]|quantity[96]	new[95]|new[96]	_	_
14-12	1541-1545	bits	object[95]|quantity[96]	new[95]|new[96]	_	_
14-13	1546-1549	are	quantity[96]	new[96]	_	_
14-14	1550-1551	‘	quantity[96]	new[96]	_	_
14-15	1552-1553	0	quantity[96]	new[96]	_	_
14-16	1554-1555	’	quantity[96]	new[96]	_	_
14-17	1556-1559	and	quantity[96]	new[96]	_	_
14-18	1560-1561	‘	quantity[96]	new[96]	_	_
14-19	1562-1563	1	quantity[96]	new[96]	_	_
14-20	1564-1565	’	quantity[96]	new[96]	_	_
14-21	1566-1567	,	quantity[96]	new[96]	_	_
14-22	1568-1580	respectively	quantity[96]	new[96]	_	_
14-23	1581-1583	in	quantity[96]	new[96]	_	_
14-24	1584-1590	bitmap	quantity[96]|abstract|object[98]	new[96]|giv|giv[98]	coref|coref|coref|coref	15-20[0_98]|16-19[109_0]|15-20[0_98]|16-19[109_0]
14-25	1591-1593	BM	quantity[96]|object[98]	new[96]|giv[98]	_	_
14-26	1594-1595	.	_	_	_	_

#Text=Therefore , the final compression code of the block can be obtained by concatenating L , H , and BM , i. e. , ( L , H , BM ) .
15-1	1596-1605	Therefore	_	_	_	_
15-2	1606-1607	,	_	_	_	_
15-3	1608-1611	the	abstract[100]	new[100]	coref	19-9[121_100]
15-4	1612-1617	final	abstract[100]	new[100]	_	_
15-5	1618-1629	compression	event|abstract[100]	giv|new[100]	coref	18-1[115_0]
15-6	1630-1634	code	abstract[100]	new[100]	_	_
15-7	1635-1637	of	abstract[100]	new[100]	_	_
15-8	1638-1641	the	abstract[100]|object[101]	new[100]|giv[101]	coref	16-1[106_101]
15-9	1642-1647	block	abstract[100]|object[101]	new[100]|giv[101]	_	_
15-10	1648-1651	can	_	_	_	_
15-11	1652-1654	be	_	_	_	_
15-12	1655-1663	obtained	_	_	_	_
15-13	1664-1666	by	_	_	_	_
15-14	1667-1680	concatenating	_	_	_	_
15-15	1681-1682	L	abstract	new	_	_
15-16	1683-1684	,	_	_	_	_
15-17	1685-1686	H	abstract	giv	coref	16-27[112_0]
15-18	1687-1688	,	_	_	_	_
15-19	1689-1692	and	_	_	_	_
15-20	1693-1695	BM	object	giv	_	_
15-21	1696-1697	,	_	_	_	_
15-22	1698-1700	i.	abstract[105]	new[105]	_	_
15-23	1701-1703	e.	abstract[105]	new[105]	_	_
15-24	1704-1705	,	_	_	_	_
15-25	1706-1707	(	_	_	_	_
15-26	1708-1709	L	_	_	_	_
15-27	1710-1711	,	_	_	_	_
15-28	1712-1713	H	_	_	_	_
15-29	1714-1715	,	_	_	_	_
15-30	1716-1718	BM	_	_	_	_
15-31	1719-1720	)	_	_	_	_
15-32	1721-1722	.	_	_	_	_

#Text=The corresponding restored block can be constructed by replacing each ‘ 0 ’ and ‘ 1 ’ of the bitmap with low mean value L and high mean value H , respectively .
16-1	1723-1726	The	abstract[106]	giv[106]	coref	25-1[145_106]
16-2	1727-1740	corresponding	abstract[106]	giv[106]	_	_
16-3	1741-1749	restored	abstract[106]	giv[106]	_	_
16-4	1750-1755	block	abstract[106]	giv[106]	_	_
16-5	1756-1759	can	_	_	_	_
16-6	1760-1762	be	_	_	_	_
16-7	1763-1774	constructed	_	_	_	_
16-8	1775-1777	by	_	_	_	_
16-9	1778-1787	replacing	_	_	_	_
16-10	1788-1792	each	time[108]	giv[108]	coref	25-9[0_108]
16-11	1793-1794	‘	quantity[107]|time[108]	giv[107]|giv[108]	_	_
16-12	1795-1796	0	quantity[107]|time[108]	giv[107]|giv[108]	_	_
16-13	1797-1798	’	quantity[107]|time[108]	giv[107]|giv[108]	_	_
16-14	1799-1802	and	time[108]	giv[108]	_	_
16-15	1803-1804	‘	time[108]	giv[108]	_	_
16-16	1805-1806	1	time[108]	giv[108]	_	_
16-17	1807-1808	’	time[108]	giv[108]	_	_
16-18	1809-1811	of	_	_	_	_
16-19	1812-1815	the	abstract[109]	giv[109]	_	_
16-20	1816-1822	bitmap	abstract[109]	giv[109]	_	_
16-21	1823-1827	with	abstract[109]	giv[109]	_	_
16-22	1828-1831	low	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-23	1832-1836	mean	abstract[109]|abstract|abstract[111]	giv[109]|new|giv[111]	_	_
16-24	1837-1842	value	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-25	1843-1844	L	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-26	1845-1848	and	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-27	1849-1853	high	abstract[109]|abstract[111]|abstract[112]	giv[109]|giv[111]|giv[112]	coref	21-7[0_112]
16-28	1854-1858	mean	abstract[109]|abstract[111]|abstract[112]	giv[109]|giv[111]|giv[112]	_	_
16-29	1859-1864	value	abstract[109]|abstract[111]|abstract[112]	giv[109]|giv[111]|giv[112]	_	_
16-30	1865-1866	H	abstract[109]|abstract[111]|abstract[112]	giv[109]|giv[111]|giv[112]	_	_
16-31	1867-1868	,	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-32	1869-1881	respectively	abstract[109]|abstract[111]	giv[109]|giv[111]	_	_
16-33	1882-1883	.	_	_	_	_

#Text=2.2 .
17-1	1884-1887	2.2	abstract	new	_	_
17-2	1888-1889	.	_	_	_	_

#Text=Matrix Coding
18-1	1890-1896	Matrix	abstract|abstract[115]	giv|giv[115]	coref|coref|coref|coref	19-1|19-2[0_115]|19-1|19-2[0_115]
18-2	1897-1903	Coding	abstract[115]	giv[115]	_	_

#Text=Matrix coding method is a modified version of the ( 7 , 4 ) Hamming code , and is widely used in LSB-based data hiding methods .
19-1	1904-1910	Matrix	abstract|abstract[118]	giv|new[118]	coref|coref|coref|coref	19-5[119_118]|20-4|19-5[119_118]|20-4
19-2	1911-1917	coding	abstract|abstract[118]	giv|new[118]	coref	21-4
19-3	1918-1924	method	abstract[118]	new[118]	_	_
19-4	1925-1927	is	_	_	_	_
19-5	1928-1929	a	abstract[119]	giv[119]	coref	21-2[133_119]
19-6	1930-1938	modified	abstract[119]	giv[119]	_	_
19-7	1939-1946	version	abstract[119]	giv[119]	_	_
19-8	1947-1949	of	abstract[119]	giv[119]	_	_
19-9	1950-1953	the	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-10	1954-1955	(	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-11	1956-1957	7	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-12	1958-1959	,	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-13	1960-1961	4	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-14	1962-1963	)	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-15	1964-1971	Hamming	abstract[119]|person|abstract[121]	giv[119]|new|giv[121]	_	_
19-16	1972-1976	code	abstract[119]|abstract[121]	giv[119]|giv[121]	_	_
19-17	1977-1978	,	_	_	_	_
19-18	1979-1982	and	_	_	_	_
19-19	1983-1985	is	_	_	_	_
19-20	1986-1992	widely	_	_	_	_
19-21	1993-1997	used	_	_	_	_
19-22	1998-2000	in	_	_	_	_
19-23	2001-2010	LSB-based	abstract|abstract[123]	new|new[123]	coref|coref	26-19[154_123]|26-19[154_123]
19-24	2011-2015	data	abstract[123]	new[123]	_	_
19-25	2016-2022	hiding	_	_	_	_
19-26	2023-2030	methods	abstract	new	_	_
19-27	2031-2032	.	_	_	_	_

#Text=By utilizing the matrix operation , for a seven-bit sequence ( also called a code-word ) , at most one bit is changed when embedding three secret bits .
20-1	2033-2035	By	_	_	_	_
20-2	2036-2045	utilizing	_	_	_	_
20-3	2046-2049	the	abstract[126]	new[126]	coref	24-10[144_126]
20-4	2050-2056	matrix	abstract|abstract[126]	giv|new[126]	coref	21-3
20-5	2057-2066	operation	abstract[126]	new[126]	_	_
20-6	2067-2068	,	_	_	_	_
20-7	2069-2072	for	_	_	_	_
20-8	2073-2074	a	abstract[127]	new[127]	coref	23-7[140_127]
20-9	2075-2084	seven-bit	abstract[127]	new[127]	_	_
20-10	2085-2093	sequence	abstract[127]	new[127]	_	_
20-11	2094-2095	(	_	_	_	_
20-12	2096-2100	also	_	_	_	_
20-13	2101-2107	called	_	_	_	_
20-14	2108-2109	a	abstract[128]	new[128]	_	_
20-15	2110-2119	code-word	abstract[128]	new[128]	_	_
20-16	2120-2121	)	_	_	_	_
20-17	2122-2123	,	_	_	_	_
20-18	2124-2126	at	abstract[129]	giv[129]	coref	22-9[138_129]
20-19	2127-2131	most	abstract[129]	giv[129]	_	_
20-20	2132-2135	one	abstract[129]	giv[129]	_	_
20-21	2136-2139	bit	abstract[129]	giv[129]	_	_
20-22	2140-2142	is	_	_	_	_
20-23	2143-2150	changed	_	_	_	_
20-24	2151-2155	when	_	_	_	_
20-25	2156-2165	embedding	_	_	_	_
20-26	2166-2171	three	object[130]	giv[130]	coref	26-16[153_130]
20-27	2172-2178	secret	object[130]	giv[130]	_	_
20-28	2179-2183	bits	object[130]	giv[130]	_	_
20-29	2184-2185	.	_	_	_	_

#Text=In the matrix coding method , H is the check matrix and is defined as .
21-1	2186-2188	In	_	_	_	_
21-2	2189-2192	the	abstract[133]	giv[133]	_	_
21-3	2193-2199	matrix	abstract|abstract[133]	giv|giv[133]	_	_
21-4	2200-2206	coding	abstract|abstract[133]	giv|giv[133]	_	_
21-5	2207-2213	method	abstract[133]	giv[133]	_	_
21-6	2214-2215	,	_	_	_	_
21-7	2216-2217	H	object	giv	coref	21-9[136_0]
21-8	2218-2220	is	_	_	_	_
21-9	2221-2224	the	object[136]	giv[136]	_	_
21-10	2225-2230	check	event|object[136]	new|giv[136]	_	_
21-11	2231-2237	matrix	object[136]	giv[136]	_	_
21-12	2238-2241	and	_	_	_	_
21-13	2242-2244	is	_	_	_	_
21-14	2245-2252	defined	_	_	_	_
21-15	2253-2255	as	_	_	_	_
21-16	2256-2257	.	_	_	_	_

#Text=Equation ( 4 ) is used to obtain which bit needs to be changed .
22-1	2258-2266	Equation	abstract[137]	new[137]	_	_
22-2	2267-2268	(	abstract[137]	new[137]	_	_
22-3	2269-2270	4	abstract[137]	new[137]	_	_
22-4	2271-2272	)	abstract[137]	new[137]	_	_
22-5	2273-2275	is	_	_	_	_
22-6	2276-2280	used	_	_	_	_
22-7	2281-2283	to	_	_	_	_
22-8	2284-2290	obtain	_	_	_	_
22-9	2291-2296	which	abstract[138]	giv[138]	_	_
22-10	2297-2300	bit	abstract[138]	giv[138]	_	_
22-11	2301-2306	needs	_	_	_	_
22-12	2307-2309	to	_	_	_	_
22-13	2310-2312	be	_	_	_	_
22-14	2313-2320	changed	_	_	_	_
22-15	2321-2322	.	_	_	_	_

#Text=( 4 ) where CW denotes the seven-bit sequence , and S represents the three-bit vector to be hidden .
23-1	2323-2324	(	_	_	_	_
23-2	2325-2326	4	_	_	_	_
23-3	2327-2328	)	_	_	_	_
23-4	2329-2334	where	_	_	_	_
23-5	2335-2337	CW	abstract	new	_	_
23-6	2338-2345	denotes	_	_	_	_
23-7	2346-2349	the	abstract[140]	giv[140]	coref	26-22[155_140]
23-8	2350-2359	seven-bit	abstract[140]	giv[140]	_	_
23-9	2360-2368	sequence	abstract[140]	giv[140]	_	_
23-10	2369-2370	,	_	_	_	_
23-11	2371-2374	and	_	_	_	_
23-12	2375-2376	S	_	_	_	_
23-13	2377-2387	represents	_	_	_	_
23-14	2388-2391	the	abstract[141]	new[141]	_	_
23-15	2392-2401	three-bit	abstract[141]	new[141]	_	_
23-16	2402-2408	vector	abstract[141]	new[141]	_	_
23-17	2409-2411	to	_	_	_	_
23-18	2412-2414	be	_	_	_	_
23-19	2415-2421	hidden	_	_	_	_
23-20	2422-2423	.	_	_	_	_

#Text=Notice that Equation ( 4 ) is calculated under the modulo-2 operation .
24-1	2424-2430	Notice	_	_	_	_
24-2	2431-2435	that	abstract[142]	giv[142]	appos	24-5[0_142]
24-3	2436-2444	Equation	abstract[142]	giv[142]	_	_
24-4	2445-2446	(	_	_	_	_
24-5	2447-2448	4	abstract	giv	_	_
24-6	2449-2450	)	_	_	_	_
24-7	2451-2453	is	_	_	_	_
24-8	2454-2464	calculated	_	_	_	_
24-9	2465-2470	under	_	_	_	_
24-10	2471-2474	the	abstract[144]	giv[144]	coref	27-9[159_144]
24-11	2475-2483	modulo-2	abstract[144]	giv[144]	_	_
24-12	2484-2493	operation	abstract[144]	giv[144]	_	_
24-13	2494-2495	.	_	_	_	_

#Text=The location of z is listed in Table 1 .
25-1	2496-2499	The	abstract[145]	giv[145]	_	_
25-2	2500-2508	location	abstract[145]	giv[145]	_	_
25-3	2509-2511	of	abstract[145]	giv[145]	_	_
25-4	2512-2513	z	abstract[145]|abstract	giv[145]|new	_	_
25-5	2514-2516	is	_	_	_	_
25-6	2517-2523	listed	_	_	_	_
25-7	2524-2526	in	_	_	_	_
25-8	2527-2532	Table	abstract	new	_	_
25-9	2533-2534	1	time	giv	_	_
25-10	2535-2536	.	_	_	_	_

#Text=In the data extraction phase , Equation ( 5 ) can be used to extract three bits of secret data from each seven-bit sequence . ( 5 ) where RCW denotes the seven-bit sequence that has been embedded .
26-1	2537-2539	In	_	_	_	_
26-2	2540-2543	the	abstract[151]	new[151]	_	_
26-3	2544-2548	data	abstract|abstract[151]	new|new[151]	_	_
26-4	2549-2559	extraction	abstract|abstract[151]	new|new[151]	_	_
26-5	2560-2565	phase	abstract[151]	new[151]	_	_
26-6	2566-2567	,	_	_	_	_
26-7	2568-2576	Equation	abstract[152]	new[152]	coref	27-1[158_152]
26-8	2577-2578	(	abstract[152]	new[152]	_	_
26-9	2579-2580	5	abstract[152]	new[152]	_	_
26-10	2581-2582	)	abstract[152]	new[152]	_	_
26-11	2583-2586	can	_	_	_	_
26-12	2587-2589	be	_	_	_	_
26-13	2590-2594	used	_	_	_	_
26-14	2595-2597	to	_	_	_	_
26-15	2598-2605	extract	_	_	_	_
26-16	2606-2611	three	object[153]	giv[153]	_	_
26-17	2612-2616	bits	object[153]	giv[153]	_	_
26-18	2617-2619	of	object[153]	giv[153]	_	_
26-19	2620-2626	secret	object[153]|abstract[154]	giv[153]|giv[154]	_	_
26-20	2627-2631	data	object[153]|abstract[154]	giv[153]|giv[154]	_	_
26-21	2632-2636	from	object[153]|abstract[154]	giv[153]|giv[154]	_	_
26-22	2637-2641	each	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	coref	26-32[157_155]
26-23	2642-2651	seven-bit	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-24	2652-2660	sequence	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-25	2661-2662	.	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-26	2663-2664	(	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-27	2665-2666	5	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-28	2667-2668	)	object[153]|abstract[154]|abstract[155]	giv[153]|giv[154]|giv[155]	_	_
26-29	2669-2674	where	_	_	_	_
26-30	2675-2678	RCW	abstract	new	_	_
26-31	2679-2686	denotes	_	_	_	_
26-32	2687-2690	the	abstract[157]	giv[157]	_	_
26-33	2691-2700	seven-bit	abstract[157]	giv[157]	_	_
26-34	2701-2709	sequence	abstract[157]	giv[157]	_	_
26-35	2710-2714	that	_	_	_	_
26-36	2715-2718	has	_	_	_	_
26-37	2719-2723	been	_	_	_	_
26-38	2724-2732	embedded	_	_	_	_
26-39	2733-2734	.	_	_	_	_

#Text=Equation ( 5 ) is also calculated under the modulo-2 operation .
27-1	2735-2743	Equation	abstract[158]	giv[158]	_	_
27-2	2744-2745	(	abstract[158]	giv[158]	_	_
27-3	2746-2747	5	abstract[158]	giv[158]	_	_
27-4	2748-2749	)	abstract[158]	giv[158]	_	_
27-5	2750-2752	is	_	_	_	_
27-6	2753-2757	also	_	_	_	_
27-7	2758-2768	calculated	_	_	_	_
27-8	2769-2774	under	_	_	_	_
27-9	2775-2778	the	abstract[159]	giv[159]	_	_
27-10	2779-2787	modulo-2	abstract[159]	giv[159]	_	_
27-11	2788-2797	operation	abstract[159]	giv[159]	_	_
27-12	2798-2799	.	_	_	_	_
