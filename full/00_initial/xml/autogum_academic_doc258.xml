<text id="autogum_academic_doc258" title="Hardware Optimized and Error Reduced Approximate Adder" shortTile="hardware-optimized" author="Padmanabhan Balasubramanian, Douglas  L. Maskell" type="academic" dateCollected="2019-11-03" sourceURL="https://www.mdpi.com/2079-9292/8/11/1212/htm" speakerList="none" speakerCount="0">
<head> 3. Accurate and Approximate Adders</head>
<p>
The architecture of an N-bit accurate adder and the generic architectures of N-bit approximate adders are shown in <figure>Figure 1</figure>. For the approximate adders, we define the size of the least significant inaccurate sub-adder to be K-bits, and hence the size of the more significant accurate sub-adder will be (N–K)-bits. A and B represent the adder inputs in <figure>Figure 1</figure>, while SUM denotes the sum output, which includes a carry overflow bit. The subscripts associated with the adder inputs and outputs denote the corresponding bit positions. The (N–K) sum bits of the accurate sub-adder are combined with the K sum bits of the inaccurate sub-adder to produce the N sum bits of approximate adders, which includes the carry overflow.  </p>

<p>We shall use some legends for the approximate adders for the ease of referencing; some of the legends are defined by the authors in their respective works while the remaining are defined by us in this work for referencing.  </p>

<p>The accurate adder is shown in <figure>Figure 1</figure>a. The approximate adder of Reference, called the lower-part OR adder (LOA), is shown in <figure>Figure 1</figure>b. In the LOA, the K input bit-pairs of the inaccurate sub-adder are respectively OR-ed to produce the K sum bits. The most significant bit-pair of the inaccurate sub-adder viz. AK–1 and BK–1 is alone AND-ed and given as the carry input for the accurate sub-adder. </p>

<p>The approximate adder of Reference shall be referred to as LOAWA (i.e., LOA without the 2-input AND function). LOAWA is shown in <figure>Figure 1</figure>c, which is nearly identical to LOA of Reference; the only exception being that the carry input of the accurate sub-adder is set to a constant 0. </p>

<p>The approximate adder of, which uses the type 5 approximate full adder for realizing the inaccurate sub-adder is shown in <figure>Figure 1</figure>d. This approximate adder shall be referred to as APPROX5. The sum bits of the inaccurate sub-adder are the same as one set of the corresponding input bits, i.e., SUM<hi rend="italic">i</hi> = B<hi rend="italic">i</hi>, where <hi rend="italic">i</hi> denotes a bit position. The carry input for the accurate sub-adder is a most significant input bit belonging to the inaccurate sub-adder viz. AK–1. </p>

<p>The hardware-efficient approximate adder presented in Reference shall be called HEAA, which is shown in <figure>Figure 1</figure>e. We observe that HEAA consumes less FPGA resources compared to the accurate FPGA adder and consumes either the same FPGA resources as that of some approximate adders or more FPGA resources in comparison with other approximate adders. HEAA is almost structurally similar to LOA; however, there exists a difference. A 2-to-1 multiplexer (MUX21) is used in the inaccurate sub-adder in addition to the 2-input OR functions. The OR-ed output of the most significant input bit-pair in the inaccurate sub-adder is given to the 0-input of MUX21, and a constant 0 is given to the 1-input of MUX21. The AND of the most significant input bit-pair corresponding to the inaccurate sub-adder serves as the select input of MUX21, besides serving as the carry input for the accurate sub-adder. </p>

<p>An optimized version of LOA presented in Reference, called OLOCA, is shown in <figure>Figure 1</figure>f. OLOCA is in fact a slight modification of LOA. The accurate sub-adder and the sum output bits corresponding to the two most significant bit positions in the inaccurate sub-adder of OLOCA are the same as that of LOA. However, the remaining (K–2) less significant sum output bits in the inaccurate sub-adder of OLOCA are tied to a constant 1. In the LOA, however, all the K sum output bits are produced by OR-ing the respective input bit-pairs. A constant 1 for the (K–2) sum bits in OLOCA implies the elimination of look-up tables (LUTs) and flip-flops (FFs) for realizing those bits of the inaccurate sub-adder for a FPGA-based implementation. Hence, OLOCA is likely to consume less FPGA resources compared to the accurate FPGA adder, LOA, LOAWA, APPROX5, and HEAA, which is substantiated by the simulation results given in the next section. </p>
</text>
