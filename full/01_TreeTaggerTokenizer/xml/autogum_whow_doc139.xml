<?xml version="1.0" ?><text dateCollected="2019-11-06" dateCreated="2019-05-22" dateModified="2019-06-05" id="autogum_whow_doc139" shortTile="improve-communication" sourceURL="https://www.wikihow.com/Improve-Communication-Within-a-Globally-Distributed-Team" speakerCount="0" speakerList="none" title="Improve Communication Within a Globally Distributed Team" type="whow">
<head>
Improve
Communication
Within
a
Globally
Distributed
Team
</head>
<p>
Communication
plays
an
essential
role
in
software
development
.
In
the
first
month
of
a
project
,
developers
spent
over
50
%
of
their
time
on
group
work.
.
When
working
in
a
globally
distributed
team
,
communication
becomes
more
of
a
challenge
due
to
the
lack
of
face-to-face
meetings
.
Communication
in
globally
distributed
teams
has
“
a
critical
role
in
the
success
of
a
team
”
and
can
be
“
the
largest
source
of
problems
.
”
This
wikiHow
will
provide
an
overview
of
the
best
practices
for
communication
in
a
globally
distributed
software
team
to
help
you
avoid
common
mistakes
.
</p>
<head>
Steps
</head>
<head>
Improving
General
Communication
</head>
<list type="ordered">
<item>
<figure rend="Measure the Effectiveness of Communication Step 9.jpg">
</figure>
Have
teams
meet
in
person
at
an
early
stage
of
the
project
.
When
starting
a
project
,
it
is
highly
recommended
to
define
standardized
processes
and
establish
shared
knowledge
.
You
can
do
this
by
doing
a
physical
kick-off
meeting
with
all
teams
involved
at
the
start
of
a
project
.
Studies
show
that
this
increases
inter-team
performance
dramatically.
.
If
you
are
only
using
online
tools
,
it
may
not
be
enough
.
<list type="unordered">
<item>
Another
advantage
meeting
in
person
provides
is
that
it
gives
you
a
common
understanding
of
requirements
which
in
the
long
run
will
cut
down
project
costs
and
enables
your
teams
to
better
react
to
changes
within
them
.
</item>
</list>
</item>
<item>
Proactively
check
the
status
of
teams
.
Since
your
teams
are
operating
independently
,
there
is
a
risk
that
some
of
them
might
deviate
from
the
initially
agreed
upon
plan
.
These
deviations
can
have
a
major
impact
on
the
other
teams
and
therefore
on
your
whole
project
.
If
you
pro-actively
check
the
status
of
all
teams
on
the
overall
project
,
you
can
ensure
all
teams
are
always
aligned
.
</item>
<item>
<figure rend="Measure the Effectiveness of Communication Step 1 Version 2.jpg">
</figure>
Assign
a
‘
communication
manager
’
responsible
for
the
communication
between
the
teams
.
In
order
to
prevent
miscommunication
between
the
teams
,
you
can
appoint
one
person
to
coordinate
the
communication
.
This
‘
human
facilitator
’
has
the
goal
of
providing
smooth
communication
and
reducing
conflicts
.
It
is
important
that
this
facilitator
is
not
biased
and
both
teams
feel
comfortable
communicating
with
this
person
.
<list type="unordered">
<item>
It
can
even
be
helpful
to
have
a
key
member
of
one
team
physically
located
with
the
other
team
.
</item>
</list>
</item>
<item>
<figure rend="Measure the Effectiveness of Communication Step 10.jpg">
</figure>
Introduce
avenues
for
informal
communication
between
the
teams
.
In
addition
the
formal
communication
,
there
is
generally
also
a
lot
of
informal
communication
between
colleagues
.
Think
of
conversations
at
the
coffee
machine
.
It
turns
out
that
developers
spent
an
average
of
75
minutes
per
day
on
unplanned
interpersonal
communication
.
In
these
small
conversations
,
team
members
become
aware
of
what
is
happening
and
what
issues
are
being
encountered
within
the
project
.
<list type="unordered">
<item>
The
challenge
is
to
simulate
these
casual
encounters
in
a
digital
environment
.
One
solution
is
to
get
all
of
your
teams
members
on
a
video
call
and
just
let
them
chat
away
.
</item>
</list>
</item>
<item>
<figure rend="Measure the Effectiveness of Communication Step 3 Version 2.jpg">
</figure>
Choose
the
right
communication
tool
.
Communication
tools
can
be
divided
into
two
groups
:
Synchronous
and
asynchronous
.
<list type="unordered">
<item>
Synchronous
communication
requires
both
parties
to
be
available
at
the
same
time
,
this
includes
video
calling
and
live
chats
.
</item>
<item>
Asynchronous
communication
does
not
have
this
requirement
and
includes
tools
like
e-mail
.
</item>
<item>
Choosing
which
type
of
communication
is
needed
depends
on
the
goal
of
the
communication
.
Synchronous
communication
is
preferred
when
reaching
an
agreement
is
the
goal
,
since
it
is
highly
interactive
.
Asynchronous
communication
is
fit
for
highly
technical
discussions
that
include
detailed
content
such
as
source
code
.
The
asynchronous
communication
allows
the
parties
to
take
their
time
to
understand
the
content
before
responding
.
</item>
<item>
Despite
the
points
mentioned
above
,
it
is
important
to
allow
your
teams
to
choose
their
own
tools
without
forcing
anything
on
them
.
They
know
what
is
best
for
them
.
</item>
</list>
</item>
</list>
<head>
Enhancing
Communication
Via
Automation
</head>
<list type="ordered">
<item>
<figure rend="Measure Process Improvement Step 13.jpg">
</figure>
Use
automation
to
communicate
effectively
.
Automation
not
only
makes
the
process
run
faster
,
but
it
is
also
a
very
effective
way
to
communicate
precisely
with
others
to
understand
how
the
task
or
process
should
be
executed
.
This
is
useful
when
working
in
distributed
environments
;
you
can
make
use
of
automation
to
bridge
the
gaps
.
<list type="unordered">
<item>
Process
automation
like
building
software
,
testing
,
etc.
eliminates
human
errors
,
configuration
drifts
,
and
communication
misunderstandings
,
which
helps
people
focus
more
on
feature
development
.
</item>
</list>
</item>
<item>
Do
not
create
a
separate
,
siloed
automation
team
.
When
working
in
a
distributed
environment
,
it
is
easy
to
offshore
all
the
automation
work
,
like
test
automation
and
infrastructure
automation
,
to
other
teams
or
countries
.
<list type="unordered">
<item>
Most
companies
follow
a
pattern
of
building
features
and
software
onsite
and
then
moving
the
automation
work
to
an
offshore
team
.
However
,
this
does
not
work
in
practice
,
as
only
specific
teams
will
have
to
knowledge
of
how
the
automation
works
.
This
causes
a
more
bureaucratic
silo
and
is
eventually
is
followed
by
a
blame-game
of
teams
when
an
error
is
caused
.
</item>
</list>
</item>
<item>
<figure rend="Prepare for a Coding Interview Step 2.jpg">
</figure>
Follow
the
same
coding
guidelines
and
testing
guidelines
for
automation
.
You
should
follow
specific
coding
guidelines
and
testing
guidelines
,
because
it
makes
sure
that
the
right
message
is
passed
from
the
development
team
to
the
business
.
<list type="unordered">
<item>
Since
automation
code
is
also
production
code
,
you
need
to
maintain
the
same
quality
checks
and
standards
that
you
use
to
maintain
the
production
code
,
or
else
the
testing
code
becomes
harder
to
maintain
in
the
long
run
;
the
team
will
eventually
lose
focus
and
interest
as
it
is
difficult
to
maintain
automation
.
</item>
</list>
</item>
<item>
Create
a
framework
or
set
up
tools
to
promote
people
to
talk
to
each
other
frequently
.
Every
team
member
should
be
able
to
track
and
review
any
new
technical
decisions
or
requirements
changes
such
as
build
failures
or
refactoring
.
You
can
use
tools
like
TFS
,
Github
,
JIRA
,
Slack
,
or
Trello
,
which
show
who
’s
accountable
for
each
task
and
help
developers
to
have
a
reference
to
add
in
data
where
it
was
last
completed
.
This
ensures
teams
at
different
locations
know
what
is
going
on
.
</item>
<item>
Practice
continuous
integration
and
continuous
delivery
.
Practicing
an
automated
deployment
pipeline
ensures
that
teams
at
different
locations
are
working
towards
a
common
goal
and
can
work
more
integrated
which
results
in
better
communication
between
distributed
teams
.
<list type="unordered">
<item>
This
also
reduces
the
time
required
to
manually
review
and
wait
for
decisions
.
Sharing
information
helps
all
the
teams
understand
the
objectives
and
aids
communication
and
productivity
.
</item>
</list>
</item>
</list>
</text>