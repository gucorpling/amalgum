<text id="autogum_interview_doc1438" title="part4_OpenSync Interview - syncing on the free desktop" shortTile="partopensync-interview" type="interview" dateCollected="2019-11-05" dateCreated="2006-05-19" dateModified="2014-01-06" sourceURL="https://en.wikinews.org/wiki/OpenSync_Interview_-_syncing_on_the_free_desktop" speakerList="none" speakerCount="0">
<p>Cornelius:</p>
<p>At this time, OpenSync supports Palms, SyncML and IrMC capable devices.</p>
<p><hi rend="bold">Which programs already implement OpenSync and where can we check back to find new additions?</hi></p>
<p>Cornelius:</p>
<p>On the application side there is support for Evolution [GNOME] and Kontact with KitchenSync [KDE] on the frontend side and the backend side and some more. I expect that further applications will adopt OpenSync once the 1.0 version is released.</p>
<p>Armin:</p>
<p>Besides kitchensync there already are a command line tool and a port of the multisync GUI. Aside from the GUIs, I would really like to see OpenSync being used in other applications as well. One possibility for example would to be integrate OpenSync into Evolution to give users the possibility to synchronize their devices directly from this application. News can generally be found on the OpenSync web site <ref target="http://www.opensync.org">www.opensync.org</ref>.</p>
<head id="Technical_Dive">Technical Dive</head>
<p>It is time to give the developers something to devour, too. I'll keep this as a short twice-fold technical dive before coming to the takeoff question, even though I'm sure there's information for a double-volume book on technical subleties.</p>
<p><hi rend="bold">As first dive: How did you integrate OpenSync in KitchenSync, viewed from the coding side?</hi></p>
<p>Cornelius:</p>
<p>OpenSync provides a C interface. We wrapped this with a small C++ library and put KitchenSync on top. Due to the object oriented nature of the OpenSync interfaces this was quite easy.</p>
<p>Recently I also started to write a D-Bus frontend for OpenSync. This also is a nice way to integrate OpenSync which provides a wide variety of options regarding programming languages and system configurations.</p>
<p>And for the second, deeper dive:</p>
<p><hi rend="bold">Can you give us a quick outline of those inner workings of OpenSync, from the developers view, which make OpenSync especially viable for application in several different desktop environments?</hi></p>
<p>Cornelius:</p>
<p>That's really a question for Armin. For those who are interested I would recommend to have a look at the OpenSync website. There is a nice <ref target="http://www.opensync.org/file/trunk/docs/OpenSync-WhitePaper.pdf?format=raw">white paper</ref> about the internal structure and functionality of OpenSync.</p>
<p>Armin:</p>
<p>OpenSync consists of several parts:</p>
<p>First there is the plugin API which defines what functions a plugin has to implement so that OpenSync can dlopen() it. There are 2 types of plugins:</p>
<p>A sync plugin which can synchronize a certain device or application and which provides functions for the initialization, handling the connection to a device and reading and writing items. Then there is a format plugin which defines a format and how to convert, compare and detect it.</p>
<p>The next part is a set of helper functions which are provided to ease to programming of synchronization plugins. These helper functions include things like handling plugin config files, HashTables which can be used to detect changes in sets of items, functions to detect when a resync of devices is necessary etc.</p>
</text>
