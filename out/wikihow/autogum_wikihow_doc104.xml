<text id="autogum_wikihow_doc104" title="Run Powershell" shortTile="run-powershell" type="wikihow" dateCollected="2019-11-03" dateCreated="2016-10-11" dateModified="2019-03-31" sourceURL="https://www.wikihow.com/Run_Powershell" speakerList="none" speakerCount="0">
<head>Run Powershell</head><p>Powershell is a command-line shell used for task automation via a scripting language based on Microsoft’s .NET framework. Powershell uses commands called cmdlets to integrate with scripts or applications. Powershell is included natively with Windows and can be opened from the Run command, while Mac and Linux users will need to install it and run it through the Terminal. Once running, there are some basic cmdlets that you can use to familiarize yourself with Powershell.</p>
<head>Steps</head>
<head>Running Powershell (Windows)</head>
<list type="ordered"><item>Hit . This will open a Run command window. <figure rend="Run Powershell Step 1.jpg"></figure>
<list type="unordered"><item>If you don't want to use the Run command, you can also search the Start menu for “Powershell”.</item>
<item>Powershell is included with versions of Windows 7 or later.</item></list></item>
<item>Enter “Powershell” into the text field. <figure rend="Run Powershell Step 2.jpg"></figure></item>
<item>Click “OK”. A new Powershell window will open. <figure rend="Run Powershell Step 3.jpg"></figure></item></list>
<head>Running Powershell (Mac)</head>
<list type="ordered"><item>Go to <ref target="https://github.com/PowerShell/PowerShell">https://github.com/PowerShell/PowerShell</ref> in your web browser. This is the official github page for Powershell. <figure rend="Run Powershell Step 4.jpg"></figure></item>
<item>Download and install the .pkg file for Mac. You must be running OSX 10.11 or newer. <figure rend="Run Powershell Step 5.jpg"></figure></item>
<item>Open the Launchpad. This is the rocket icon in the bottom dock. <figure rend="Run Powershell Step 6.jpg"></figure></item>
<item>Enter "Terminal" into the search field. You can also find the Terminal in "Applications &gt; Utilities". <figure rend="Run Powershell Step 7.jpg"></figure></item>
<item>Launch Terminal. A blank terminal window will appear. <figure rend="Run Powershell Step 8.jpg"></figure></item>
<item>Enter “powershell” and hit . A powershell prompt will appear with “PS” displayed. This means that powershell is running and you can use the Terminal to enter cmdlets. <figure rend="Run Powershell Step 9.jpg"></figure></item></list>
<head>Running Powershell (Ubuntu)</head>
<list type="ordered"><item>Go to <ref target="https://github.com/PowerShell/PowerShell">https://github.com/PowerShell/PowerShell</ref> in your web browser. This is the official github page for Powershell. <figure rend="Run Powershell Step 10.jpg"></figure></item>
<item>Download the .deb file for your corresponding version of Linux. Powershell is available for Ubuntu 14.04 or 16.04. They have separate installers listed on the page. <figure rend="Run Powershell Step 11.jpg"></figure></item>
<item>Open a Terminal window. You can hit  or click “Home” and search for “Terminal”. <figure rend="Run Powershell Step 12.jpg"></figure></item>
<item>Enter “sudo dpkg -i [installer filename]” and hit . You will be prompted to enter your computer password when using  the “sudo” command. You may see a failure with unmet dependencies, but this will be resolved soon. <figure rend="Run Powershell Step 13.jpg"></figure>
<list type="unordered"><item>The installer filename will look like “powershell_6.0.0-alpha.10-1ubuntu1.16.04.1_amd64.deb” or “powershell_6.0.0-alpha.10-1ubuntu1.14.04.1_amd64.deb” depending on which version of Ubuntu you are running.</item></list></item>
<item>Enter “sudo apt-get install -f” and hit . This Powershell configuration will complete. <figure rend="Run Powershell Step 14.jpg"></figure></item>
<item>Enter “powershell” and hit . A powershell prompt will appear and you can run cmdlets in the Terminal.  <figure rend="Run Powershell Step 15.jpg"></figure></item></list>
<head>Using Basic Powershell Commands</head>
<list type="ordered"><item>Use “Get-Command” to find cmdlets. On its own, this cmdlet will display all other cmdlets. You can narrow your search using modifiers. <figure rend="Run Powershell Step 16.jpg"></figure>
<list type="unordered"><item>For example: “Get-Command Name *Disable*” will display only cmdlets with ‘disable’ in the name.</item>
<item>All cmdlets are entered by typing them into the Powershell window and hitting .</item></list></item>
<item>Use “Get-Help” to get info on a certain cmdlet. This cmdlet will give you all the information regarding another cmdlet, most importantly syntax for how the target cmdlet is used. <figure rend="Run Powershell Step 17.jpg"></figure>
<list type="unordered"><item>For example: “Get-Help Get-Process” will display all the usable information for the ‘Get-Process’ cmdlet.</item></list></item>
<item>Use “Get-Process” to use a process running on a computer. Alone this will display a full list of processes running on your computer. With a modifier, you can single out processes coming from a specific application. <figure rend="Run Powershell Step 18.jpg"></figure>
<list type="unordered"><item>For example: “Get-Process winword” will display all processes being run by Microsoft Word.</item>
<item>Similarly, “Start-Process” can be used to launch an instance of an application/process.</item></list></item>
<item>Use “Get-Member” to see properties or methods of an object. This cmdlet needs an object ‘piped’ to it in order to be useful. This is done by adding a “|” between an object and the “Get-Member” cmdlet. <figure rend="Run Powershell Step 19.jpg"></figure>
<list type="unordered"><item>For example: “Get-Process | Get-Member” will pipe the Get-Process cmdlet to Get-Member, and Get-Member will list all of the properties and methods you can utilize when scripting with Get-Process.</item></list></item>
<item>Use “Where-Object” to select objects based on criteria. The criteria in Where-Object is set by using the following formatting: “{$_[object] [operator] [parameter]  }”. Where-Object also needs an object piped to it. <figure rend="Run Powershell Step 20.jpg"></figure>
<list type="unordered"><item>For example: “Get-Process | Where-Object { $_.name -eq “notepad” }” will run Get-Process with the limitation where the object’s name is equal to “notepad”.</item>
<item>Other operators include: “-lt” (less than), “-gt” (greater than), “-le” (less than or equal to), “-ge” (greater than or equal to), “-ne” (not equal to), or “-like” (pattern matching).</item>
<item>Parameters using strings (words) must be enclosed in quotations marks. This is not necessary for integers (numbers).</item></list></item></list>
<head>Tips</head>
<list type="unordered"><item>There are many more cmdlets that can be used with Powershell to create automation scripts. Microsoft has a <ref target="https://msdn.microsoft.com/en-us/library/microsoft.powershell.commands(v=vs.85).aspx">reference library</ref> containing detailed information for each cmdlet.</item></list>
</text>
