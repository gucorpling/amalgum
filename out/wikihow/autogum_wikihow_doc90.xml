<text id="autogum_wikihow_doc90" title="Install Kubernetes on Ubuntu" shortTile="install-kubernetes" type="wikihow" dateCollected="2019-11-03" dateCreated="2018-05-08" dateModified="2018-05-30" sourceURL="https://www.wikihow.com/Install_Kubernetes_on_Ubuntu" speakerList="none" speakerCount="0">
<head>Install Kubernetes on Ubuntu</head><p>Kubernetes is an open source platform designed for automating deployment, management, and scaling of containerized applications. Kubernetes buckets an application’s containers into logical units, making them easy for management as well as discovery.  Kubernetes has tons of features such as automatic bin-packing, self-healing, horizontal scaling, load balancing, auto rollouts and rollbacks, configuration management, and storage orchestration. Kubernetes also has the ability to manage batch and CI workloads, replacing containers that fail, if and when needed.  </p>
<p>In this wikiHow, you will learn how to install Kubernetes on an <ref target="https://www.wikihow.com/wiki/Get_Familiar_With_Ubuntu_Commands">Ubuntu machine</ref>.</p>
<head>Steps</head>
<list type="ordered">
<item> Install the dependencies. Install all the necessary dependencies on your machine. This needs to be done across machines that you plan to join to the Kubernetes cluster.
<list type="unordered">
<item> Install apt-transport-https. It’s a package that lets you use both http and https in apt packages. This can be done via the following command
</item>
<item> Install Docker. Docker is a popular container service that lets you create containers and deploy them into anywhere in the cloud. Install Docker using the following prompt
</item>
</list></item>
<item> Start the Docker services. Once you’ve installed Docker, you will need to start the docker services and enable it. We’ll be using systemctl to start the docker.
<p>Your system should now be ready to install Kubernetes.</p>
</item>
<item> Install Kubernetes. The actual installation of the required Kubernetes components is relatively easy. You need to import the GPG key first. Using the terminal, you can use the following command to add the keys:
<list type="unordered">
<item>Create a repository. Now you can add a repository by creating the file  /etc/apt/sources.list.d/kubernetes.list. Add the following lines:
</item>
<item> After you save and close the file, you can install Kubernetes using the commands below:
</item> </list> </item>
<item> Initialize the master. To successfully set up Kubernetes across a cluster, you need to initialize one machine as the master/admin.
<p>Once this is completed, you’ll be given the specific command needed in order to join nodes to the master. </p>
</item>
<item> Set the right permission. However, before you join a node, you would need to run the following commands as a regular user. This is to avoid permission issues later on.
</item>
<item>Deploy a Pod network. Now that you’ve initialized the master, you would need to deploy a pod network to enable proper functioning. To achieve this, you would need to run two commands, this time using the Kubernetes machine.
<list type="unordered">
<item>Verify that the Pod network has been successfully deployed.  </item>
</list></item>
<item> Join a node. Once everything is in place and functioning as expected, you can join a node to the master. To accomplish this, run the following command:
</item>
<item> Create a new service and deploy. Once all aspects are installed and ready, the next step is to deploy it. Practically, there are many ways that you can get started with <ref target="https://www.aquasec.com/wiki/display/containers/Kubernetes+Deployment+101">deploying kubernetes</ref>. For instance, you can deploy a NGINX service onto your Kubernetes cluster, and export the service on port 80.
<p>You should be able to see the service listed if you go to your node and run the command </p>
<p>Your Kubernetes cluster is now ready. You have a working basic Kubernetes cluster which consists of a master and a single node. The cluster can be scaled at any time by installing and adding additional nodes.</p>
</item>
</list>
<head>Tips</head>
<list type="unordered"><item>Add default memory and CPU limits to namespaces. This can help prevent crashes in case a user opens a connection to the database but forgets to close it. This leads to a memory leak in one of the applications on a cluster. If the application is deployed to a cluster without a limit, it can lead to a node crashing.</item>
<item>Try Minikube to start a Kubernet cluster running locally. It’s the easiest and quickest way to do so.</item>
<item>Restrict access to Kubectl. The best way to restrict access and prevent multiple teams deploying to a single cluster is by separating teams by namespace and using RBAC policies to allow access only to a particular namespace.</item>
<item>Enable pod disruption budgets. This guarantees almost no downtime for an application with a Kubernetes cluster. Using PDBs (Pod Disruption Budgets) clusters will be automatically updated, nodes drained and apps moved as needed.</item>
<item>Implement Labels. Labels are one of the main foundations of Kubernetes. It allows objects to be loosely joined with other objects and then queried based on labels.</item></list>
</text>
