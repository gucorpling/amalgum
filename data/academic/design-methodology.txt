 1. IntroductionFuzzy Inference Systems (FIS) have wide applicability in control systems due to their flexibility for control strategy implementation when ambiguity or imprecisions occur in a plant model [1,2,3]. On the other hand, Boolean algebra is a useful tool to design automation rules in Boolean Automation Systems (BAS) [4,5,6]. The design based on Boolean algebra allows to represent the knowledge of a system by means of specific cases established with Boolean-type variables; this way, an advantage of the control systems based on Boolean logic consists of a design methodology based on truth tables (widely known). Nevertheless, the performance of these systems is limited due to some abrupt transitions associated to different control actions. These abrupt transitions may be surpassed by using fuzzy sets instead of Booleans. However, more cases to considerer appear in the system operation when using fuzzy sets; additionally, to design process several properties of Boolean algebra are not met for fuzzy sets; these issues can be addressed using Kleene algebra, which is an aspect to consider in this work. In this regard, it should be kept in mind that Boolean algebra (named
B
)-based tools have been developed using sets whose values are

{
0
,
1
}

, while Kleene algebra (denoted
K
) includes a third element u, having a structure of

{
0
,
u
,
1
}

 [7].In this line, some previous approaches (related works) have been developed, for example, Dougherty et al. [4] present a proposal to leverage the characteristics in automatism design based on Boolean algebra. This proposal is based on solving a minimization problem in FIS using BAS; meanwhile, in [8,9,10,11] a practical approach is developed where a BAS based methodology is offered to implement the associated defuzzification process. Particularly, in [8] is designed a fuzzy controller for a DC motor based on Boolean relations where a truth table and Karnaugh maps are used to find the simplified equations that implement the controller. Moreover, in [9], an active and reactive power flow fuzzy controller is proposed for a voltage source converter. This paper explores the possibility to employ fuzzy type-2 to implement fuzzy controllers using a simplified process for defuzzification, meanwhile, Espitia et al. [10] show the design of a buck-boost voltage converter being important to show that the simplified and non-simplified equations when using fuzzy sets do not generate the same control surface; likewise, Espitia et al. [11] present a fuzzy temperature controller based on Boolean relationships where possible conditions on membership functions are proposed, so that the simplified and non-simplified equations display the same control surface, it is noteworthy that this approach is impractical because it turns out to be very restrictive, indicating that another approach should be addressed to convert a Boolean design to a fuzzy one. Meanwhile in [12,13] is exposed that the approach associated to design of fuzzy system using BAS methodology may be generating a fuzzy system called Fuzzy Inference System Based on Boolean Relations (FIS-BBR), where the concept of virtual actuator is a key aspect for obtaining the output of the fuzzy system. On the way to formalize the concepts involved in the FIS-BBR, it is important to note that none of these previous works explore the inclusion of Kleene algebra for the design process; in this respect, Salazar et al. [14] show an advance where Kleene algebra is used to convert binary logic functions into fuzzy logic. In this way, it is possible to address the situations which have been identified in previous works that exist when converting a Boolean design to fuzzy, so that the equations are equivalent. In this regard, this paper seeks to present a methodology that allows the extension of a Boolean controller into a fuzzy one for which Kleene algebra and regularity conditions are used so that the design equations with Boole and Kleene algebras are equivalent.After this work, where the design principles are presented, the development of more complex applications would be expected, however, in a heuristic way, making an analogy with the operation of a discrete time dynamic system, a structure of an FIS-BBR could be obtained such as those shown in [15,16]; particularly, in [15] there is a neuro-fuzzy control system where plant identification and system control is performed using an equivalent FIS-BBR scheme, in [16], further progress is made by identifying the plant and optimizing the controller in an iterative way to have an adaptive control system. In these works, the similar FIS-BBR scheme is determined in a heuristic way; however, it could be formulated through the methodology proposed in this document, this aspect is expected to be addressed in future works. The above shows that the FIS-BBR can be used in more complex applications.The fuzzy inference systems based on Boolean relations suggest an implementation method for fuzzy logic systems regarding automatism designs as those are widely and easily implemented in automatic process control [4,6,17]. This design technique considers both sensors and actuators and the Boolean relations involved in control strategies used in an industrial process [9,12,13]. Consequently, the FIS-BBR is proposed as an alternative for the implementation of fuzzy systems that present a direct interpretability for control systems with a compact inference mechanism.Besides, Espitia et al. [10,11,13] present a basic proposal for an FIS-BBR, which considers the conversion from Boolean to fuzzy membership. Nevertheless, some issues need review and deeper analysis, which is the goal of this work, in particular, calculations with a three element algebra for propositional fuzzy logic [7]. The Kleene algebra permits to consider different cases that arise when a design is extended using Boolean sets to fuzzy sets; additionally, to achieve this extension, criteria are also required to obtain monotonic transitions between the actions defined in the Boolean design. Thus, an equivalence of Boolean and fuzzy design can be achieved, which consists of obtaining similar equations using Boolean and Kleene algebra, and under the criteria considered achieve the monotonic transitions between Boolean actions. Then, the Kleene algebra is used in the methodology design for an FIS-BBR, in this way, a table of two elements can be extended to one of three, taking into account some regularity conditions and also several design principles proposed in this paper. Using a three element table and Kleene algebra it is possible to establish relations in the inference process together with a simplification process. Another important aspect in this paper (to implement FIS-BBR systems) consists of the criteria to convert a Boolean membership into a fuzzy membership.Considering that the main objective of this paper is to show the proposed design process, then a basic application case is used as a conceptual example showing that when using the proposed procedure, it is possible to have an equivalence between the equations obtained with Boole and Klenne algebras. Other complex cases are considered for future developments for neuro-fuzzy systems and adaptive control.Seeking to have an adequate order in the document, the theoretical concepts necessary to apply the design methodology are presented in the first part. Later, the operation process in an FIS-BBR is presented. Based on the above, the proposed methodology design is presented to finally develop a demonstrative example to observe the methodology in detail. The sections are organized as follows: it starts by giving a brief introduction to the Boolean design and previous works about fuzzy inference systems based on Boolean relations. Section 2 contains the framework, where SubSection 2.1 reviews Boolean and Kleene algebras, these concepts are used in the design process mainly for algebraic operations. Fuzzy sets are shown in SubSection 2.2, then SubSection 2.3 presents the well-known Mamdani and Takagi–Sugeno models, which are taken as a reference to show the inference process in an FIS-BBR system. Section 3 describes the inference system based on Boolean relations. Virtual actuator concept is here emphasized, which is the main aspect of FIS-BBR as this allows inclusions of feasible control actions; thus, it is directly applied on control systems. SubSection 3.2 shows the inference process for FIS-BBR considering the different steps. Taking in account the properties of Boole and Kleene algebras, and the conditions of regularity, the design methodology is described in Section 4. To show the methodology, in Section 5 the design for a tank fill system using Boolean and FIS-BBR controllers is presented, comparing the performance in each case. Finally, in Section 6, the discussion about characteristics of BBR systems is made. Conclusions are given in Section 7. 2. FrameworkIn the first part, the main aspects of the Boole and Kleene algebras are reviewed, which allow the manipulation of mathematical expressions; this aspect is relevant to achieve the transition between a Boolean design to a fuzzy one. The membership function definitions that are important in the proposed methodology to convert a Boolean set into a fuzzy one are also reviewed. Subsequently, the operation schemes for Mamdani and Takagi–Sugeno fuzzy systems are presented, so that they can be taken as a reference to observe the inference process in an FIS-BBR. 2.1. Boolean and Kleene AlgebrasThe design methodology for FIS-BBR considers the requirements to use Boolean and Kleene algebra; the design process starts in a Boolean domain and is then extended to Kleene; therefore, the concepts of Boolean and Kleene algebra are reviewed below.Although algebra and logic can be considered as independent mathematical structures according to references [7,18,19], for Boolean and Kleene algebra, an equivalence with logic structures can be stated.Definition 1 ([19]). A De Morgan algebra is a bounded distributive lattice

M
=
(
A
,
∨
,
∧

,
′

,
0
,
1
)

, consisting of a set A together with two internal binary operations ∧ (called “meet” or “intersection” or “conjunction”), ∨ (called “join” or “union” or “disjunction”), a unary operation


′

 (called “complement” or “not”) and two constants 0 and 1 or nullary operations. The operations ∧ and ∨ are associative, commutative and distributive (∨ with regard to ∧ and vice-versa). Considering

∀

x
,
y
∈
A

 the De Morgan algebra satisfies:







(

x
′

)

′



=


x






(1)









(
x
∨
y
)

′



=




x
′

∧

y
′








(2)









(
x
∧
y
)

′



=




x
′

∨

y
′








(3)

Definition 2 ([19]). A Kleene algebra

K
=
(
K
,
∨
,
∧

,
′

,
0
,
1
)

 is a De Morgan algebra that meets (4).



x
∧

x
′

≤
y
∨

y
′





(4)

Definition 3 ([19]). A Boolean algebra

B
=
(
B
,
∨
,
∧

,
′

,
0
,
1
)

 is a Kleene algebra that meets (5) and (6).






x
∨

x
′




=


1






(5)








x
∧

x
′




=


0






(6)

In the proposed design methodology for FIS-BBR is used the Boolean algebra of two elements, where

B
=
{
0
,
1
}

, and also the three element Kleene algebra with K =

{
0
,
u
,
1
}

, where the additional element u belongs to the interval

(
0
,
1
)

. Boolean algebra has only two elements and it is used in logic applications where 0 means false, 1 true, ∧and, ∨or, and


′

 not.In comparison with the Boolean algebra in Kleen algebra is observable that:






x
∨

x
′




≤


1






(7)








x
∧

x
′




≥


0






(8)

For the FIS-BBR design process proposed, the distributive and absorption properties are especially used, Equations (9) and (10), respectively.







(
x
∨
y
)
∧
z



=



(
x
∧
z
)
∨
(
y
∧
z
)







(9)








x
∧
(
x
∨
y
)



=


x






(10)

The main aspect to using Kleene algebra is that according to references [7,19], “different truth value algebras can give the same propositional logic”. In particular, using the standard operators of fuzzy propositional calculus “the propositional calculus for three-valued logic and the calculus for fuzzy logic are the same” (the formulas are equivalent) [19]. It is noticeable that Kleene trivalent logic has a finite number of truth values, while fuzzy logic has an infinite number of truth values (multivalent). It is also worth highlighting that the expression can be handled using normal forms and truth tables. Then a fuzzy propositional logic system can be represented using truth tables [7].Between
K
 and
B
 algebras there exists a relation which can be observed when rows having the variable u are suppressed in Table 1. In this way, Table 1 becomes one of
B
 [7].Arithmetic operations for disjunction, conjunction and complement could be used for propositional calculus. Maximum, minimum and complement as


x
′

=
1
−
x

 operations are called Kleene and Boolean standard algebra operations and are used for propositional calculus [7]. 2.2. Fuzzy Sets and OperatorsIn this section the basic concepts about fuzzy sets and fuzzy operators used in FIS-BBR are reviewed. The first definition is that of a fuzzy set [20,21].Definition 4 ([20]). Let X be a set, a fuzzy set A in X is given by the membership function:



A
:
X
→
[
0
,
1
]





A fuzzy set can be denoted by

A
=
{
(
x
,
A
(
x
)
)
x
∈
X
}

.Another common notation used for membership function of the fuzzy set A of X is


μ
A


(
x
)

:
X
→

[
0
,
1
]


, then,

A
(
x
)

 and


μ
A


(
x
)


 are equivalents. In this article both definitions are used, mainly

A
(
x
)

 when algebraic manipulations are performed, and


μ
A


(
x
)


 when it is considered the shape of the membership function.In the case of a Boolean set, the value of the membership


μ
A


(
x
)


, is 1 when the element fully belongs to set A and 0 when it does not [22]. According to [23,24,25], Zadeh suggested that element membership may not necessarily have a 0 value or 1 uniquely but could have a value of the interval

[
0
,
1
]

 to consequently obtain a fuzzy set defined as a set of tuples

{

μ
A


(
x
)

,
x
}

, where


μ
A


(
x
)


 represents the membership of set A of x.For practical implementations of FIS-BBR, it is possible the use of general connectors via triangular norms, conorms (t-norms and t-conorms respectively), and complements. These definitions are presented below:Definition 5 ([26]). A triangular norm t-norm is a binary operation

⊙
:
[
0
,
1
]
×
[
0
,
1
]
→
[
0
,
1
]

 used in multi-valued logic (fuzzy logic). The t-norm is a general form of conjunction operation in logic, it is commutative, associative, and with 1 as neutral element. The t-norm for any

a
,
b
,
c
∈
[
0
,
1
]

 satisfies:Commutative:

a
⊙
b
=
b
⊙
a

.Associative:

a
⊙
(
b
⊙
c
)
=
(
a
⊙
b
)
⊙
c

.Identity:

1
⊙
a
=
a

.Increasing in each variable:

a
⊙
b
≤
a
⊙
c

 if

b
≤
c

.Some t-norms are minimum, product, drastic, Lukasiewicz, Frank, Yager, Schweizer-Sklar, Hamacher and Sugeno-Weber [27].Definition 6 ([26]). A dual function called t-conorm

⊕
:
[
0
,
1
]
×
[
0
,
1
]
→
[
0
,
1
]

, is commutative, associative and neutral with 0 element. The t-conorm for

a
,
b
,
c
∈
[
0
,
1
]

 satisfies:Commutative:

a
⊕
b
=
b
⊕
a

.Associative:

a
⊕
(
b
⊕
c
)
=
(
a
⊕
b
)
⊕
c

.Identity:

0
⊕
a
=
a

.Increasing in each variable:

a
⊕
b
≤
a
⊕
c

 if

b
≤
c

.Taking in account [27] some t-conorms are maximun, probabilistic (algebraic sum), Lukasiewicz, Drastic, Frank, Yager, Schweizer-Sklar, Hamacher and Sugeno-Web.Definition 7 ([28]). A fuzzy complement is defined by a function

γ
:
[
0
,
1
]
→
[
0
,
1
]

. This function for

a
,
b
∈
[
0
,
1
]

 satisfies:Boundary conditions:

γ
(
1
)
=
0

 and

γ
(
0
)
=
1

.Monotonicity: if

a
≤
b

, then

γ
(
a
)
≥
γ
(
b
)

.Continuity:

γ
(
a
)

 is a continuous function.Involution:

γ
(
γ
(
a
)
)
=
a

.Some complements are standard, Sugeno and Yager.An important aspect in FIS-BBR consists of the relations between Boolean and Fuzzy sets, in this way the
α
-cut concept is used. The
α
-cut can be expressed as follows.Definition 8 ([29]). Considering a value

α
∈
[
0
,
1
]

, the α-cut in a fuzzy set A has the elements of X with a membership value

μ
A

 equal to or greater than α when having:




A
α

=

{
x
∈
X

μ
A


(
x
)

≥
α
}





(11)

 2.3. Fuzzy SystemsTaking in account [30,31] fuzzy logic allows the modeling of a system using fuzzy sets and rules that describe the system behavior. Fuzzy systems permit to model and control non-linear processes; after designing a fuzzy system (based on knowledge), optimization algorithms can be used to achieve better performance [32,33]. Moreover, relations among variables in fuzzy systems are presented using rules as:


Ifantecedentislinguistic labelthenconsequentislinguistic label.



The linguistic labels are represented using fuzzy sets and allow described characteristics of the antecedent and consequent [34,35]. For the design of fuzzy control systems, there are two major methods: Mamdani and Takagi–Sugeno models, which are differentiated by their capability to present the collected information [36]. 2.3.1. Mamdani ModelIn Mamdani fuzzy systems both antecedent and consequent are linguistic terms and the output corresponds to the superposition of individual outputs given by each rule [37]. Figure 1 shows the basic structure of a Mamdani-type system.In a Mamdani fuzzy system, the fuzzification, the inference fuzzy engine, and the defuzzification process are distinguished. In the fuzzification process a specific value enters the system and is converted in a membership level to each rule.The base of the rules consists of the methodology in which the fuzzy system stores linguistic knowledge (If-Then type rules). A rule as rules-base or knowledge base has two parts: an antecedent and a consequent. In a Mamdani-type system both rules are given by linguistic expressions which are represented by membership functions.The output obtained by the inference mechanism corresponds to a fuzzy set, then in order to be interpreted as numerical data, it is necessary to convert the fuzzy output inference mechanism into a specific value; this process is carried out by the defuzzification process through multiple options, such as centroid and centers average, among others [38,39].Figure 2 shows a Mamdani-type fuzzy system operation, the following steps must be taken into account. In the first instance in the fuzzification process a concrete value is converted into a membership one for each rule, then the fuzzy operators are applied for each rule, next the implication method is performed; the results of such implication are aggregated to finally obtain the output by applying the defuzzification method. 2.3.2. Takagi–Sugeno ModelThis model consists of logic rules (regression rules) containing fuzzy antecedents associated to the input and functional consequents in the output. Takagi–Sugeno (TSK) model permits both represent qualitative knowledge and the use of quantitative data for the training process [40,41]. In a TSK model a fuzzy rule is shown as:

If x1 is A1 and x2 is A2 and ... and xn is An then y1 = f1(x1, x2, ..., xn)



In the antecedents


A
1

,

A
2

,
…
,

A
n


 are fuzzy sets, and


y
1

=

f
1


(

x
1

,

x
2

,
…
,

x
n

)


 corresponds to a function in the consequent. In many applications

f
1

 may be a polynomial, in this way some alternatives to

f
1

 are:TSK zero order, when f is a constant value, then


f
1

=
c

.TSK first order, when f is a polynomial as


f
1

=

a
1


x
1

+

a
2


x
2

+
…
+

a
n


x
n

+
c

.In Takagi–Sugeno systems, values given by activated rules are already numeric data, in this way, it is considered that the processes of aggregation and defuzzification occur in one operation [30]. Figure 3 shows the elements that define a TSK fuzzy system.Depending on the input variables (n), each rule (m) has a function associated:






y
1



=




f
1


(

x
1

,

x
2

,
…
,

x
n

)







y
2



=




f
2


(

x
1

,

x
2

,
…
,

x
n

)







⋮






y
m



=




f
m


(

x
1

,

x
2

,
…
,

x
n

)









For calculating the output in a TSK system the different functions are weighted considering the value by which the antecedent associated to each rule was activated; the output of the system may be calculated as:



y
=



w
1


y
1

+

w
2


y
2

+
⋯
+

w
m


y
m




w
1

+

w
2

+
⋯
+

w
m







(12)

A TSK order zero system may be considered a particular case of the Mamdani type where each consequent rule is modeled using a fuzzy set singleton-type [41].Figure 4 shows the functioning of a Takagi–Sugeno fuzzy system; the following steps are observed: In the first place, an input value is converted into a membership level for each rule using the fuzzification process, then fuzzy operators are applied obtaining truth values for each rule (rule value), finally the output is calculated via weighting average. 3. Fuzzy Inference Systems Based on Boolean RelationsThis is a mechanism designed to implement fuzzy inference systems focused on control systems. The offered methodology with BBR is based on the possible transition from Boolean to fuzzy logic by using mechanisms of Boolean and Kleene logic design.The concept of FIS-BBR allows performing a methodology to fuzzy inference systems design based on truth tables. The basis of BBR corresponds to an extrapolation from Boolean sets to fuzzy sets [13].The control process is achieved via virtual outputs using activation functions established in a truth table. Disjunctive Normal Form (DNF) is used to obtain the inference equations for activation functions, Figure 5 shows how the process is performed, the simplification of inference rules using Kleene algebra is also considered for the design process.FIS-BBR becomes an alternative to implement systems of control based on automation, thus, it is rooted in automation design principles (such as that one applied to model digital circuits) but extended to fuzzy systems. The extension from Boolean to fuzzy systems can be developed by trivalent systems (Kleene algebra), which can be directly extended to fuzzy systems.From the automatism viewpoint there is an action of one or several actuators starting from values determined by sensors; this action is usually ON/OFF (as in classic sets or crisp), generating in the process abrupt transitions. FIS-BBR aims to avoid these abrupt transitions when converting Boolean sets to fuzzy, and at the same time exploits the methodology in automatism development from the Kleene domain. The notion of virtual output is introduced in the following subsection. 3.1. Virtual OutputIn control systems the actuator is the element used for applying the control action [2]; for automatism design it is possible to employ several actuators for the control action (several batteries, valves, switches...). However, when there is only one element of action, this can be considered as the sum of several actuators called “virtual”. Those at the same time have an associated virtual output. From this viewpoint the actuator may be considered as the discourse universe in the consequent. According to the application, the value of virtual actuators may be positive or negative, and also the total output may be higher than partial virtual actions [13].The output corresponds to the sum of the respective virtual outputs:



y
=

y

v
1


+

y

v
2


+
⋯
+

y

v
m


+
⋯
+

y

v
w











y
=

∑

m
=
1

w


y

v
m






(13)


where


y

v
m


=

Y
m


v
m


 being


Y
m

∈

[
0
,
1
]


 the activation function, and


v
m

∈
R

 is the respective value of virtual actuator. The concept of virtual output was conceived under a real physical correspondence in control applications to the total output in the inference system [13]. ExampleLooking at the action of a valve of 6 cm


3

/s filling a tank, this valve may be considered as the contribution present in three different valves, which are given by virtual actuators:Small flow:

v
1

 = 1 cm


3

/s.Medium flow:

v
2

 = 2 cm


3

/s.Large flow:

v
3

 = 3 cm


3

/s.Figure 6 shows the filling scheme of a tank with three virtual valves.Using these virtual valves make possible the actions displayed in Table 2 where ON is the valve activation. In this table “Conf.” means configuration.In this way it is conceivable to define the “Boolean actions” as the possible actions produced using Boolean sets. 3.2. Fuzzy Inference Process for FIS-BBRConsidering that fuzzy inference systems based on Boolean relations use design tools and codification of Boolean systems, the structure of the inference process is given by the truth table associated with the Boolean design. For the implementation of the FIS-BBR the Boolean codification can be extended to Kleene algebra.Table 3 shows a possible codification for inputs and control actions of a system. According to [19], considering the normal forms for Boolean and Kleene algebras in general terms the conjunction

(
∧
)

 is applied to the corresponding rows of inputs in Table 3, which represent the rules that provide an activation output. The disjunction

(
∨
)

 is applied over the columns of the activation outputs in Table 3.In Table 3 variables

a

k
,
j


 and

f

k
,
m


 are used to represent relations between

A
j

 (set associated to input) and

Y
m

 (activation function associated to output) while for a Boolean case it has values

{
0
,
1
}

 and in a Kleene case values

{
0
,
u
,
1
}

. Table 3 can be a truth table Boolean or Kleenean, some examples are in [19]. It is noteworthy that

A
j

 can be a Boolean or fuzzy set associated to input and

Y
m

 is an activation function associated to output.The implementation of FIS-BBR using Kleene algebra is made according to [19], where it is established that fuzzy propositional logic is the same as the three valued Kleene propositional logic.The combination of concepts using a Disjunctive Normal Form (DNF) in general can be expressed as:




⋀

j
=
1

p



A
^


(

a

k
,
j


,

f

k
,
m


)





(14)


where

A
^

 is a function that can be 0, 1,

A
j

,

A
j
′

 or


A
j

∧

A
j
′


 and depends on

a

k
,
j


 and

f

k
,
m


 respectively (for more information about function

A
^

 in Boolean and Kleene case see [2,7,19]). Table 4 shows the values of

A
^

 for a Kleene or Boolean case.The m-th output activation function

Y
m

, using DNF can be expressed as:




Y
m


=

⋁

k
=
1

q



⋀

j
=
1

p



A
^


(

a

k
,
j


,

f

k
,
m


)





(15)

In [19,42] some aspects about fuzzy logic with t-norms and t-conorms are presented, where a logic based on t-norms and t-conorms is considered. Regarding the accomplishment of the algebraical properties used in the design (for example the distributive property [43]), it is posible to use t-norms and t-conorms obtaining:




Y
m


=

⨁

k
=
1

q



⨀

j
=
1

p



μ

A
^






(16)


where ⊕ indicates the fuzzy operation to t-conorm (maximum, algebraic sum, etc); and ⊙ represents the fuzzy operation of t-norm the fuzzy operation (minimum, product, etc). Additionally,

μ

A
^


 is the membership function associated with

A
^

.Considering each combination in the table, the system global output can be calculated as:



y
=

∑

m
=
1

w


Y
m


v
m





(17)


where

v
m

 corresponds to the m-th virtual actuator. Then, the m-th virtual output is:




y

v
m


=

Y
m


v
m





(18)

In addition, it is noticeable that when using Kleene algebra, in some cases it is possible to have a simplified activation

Y
m

 with a smaller number of literals and connectors.Equation 16 may be associated to Table 3 as this scheme identifies two parts: one corresponding to a codification for membership functions to each input of discourse universe; the other corresponds to the activation outputs associated to virtual outputs. Regarding the inputs, each line represents an inference rule. In output sections each column represents one activation function.Considering Table 3 as a first step for output calculation (without simplifying), conjunction is applied (t-norm) among the sets alongside the lines whose activation output is active in the truth table (inference rules). The second step consists of applying disjunction (t-conorm) among all the results obtained in the first step to each column, which corresponds to the activation outputs.Finally, given the fuzzy activation functions, a weighting is made to each one using the value obtained by the virtual actuator, which is called virtual output. A unique specific output action is obtained by summing these products.Figure 7 shows a graphic example for the fuzzy inference process based on Boolean relations. The associated Kleene Table 5 can be an extension from Boolean Table 6, the considerations to take a relation between Boolean and Kleene Table are shown in Section 4. Considering the Kleene Table 5, the respective inference equations are:







Y
1

=





(

A
1

∧

A
2

)

∨

(

A
1

∧

A
1
′

∧

A
2

∧

A
2
′

)










∨

(

A
1

∧

A
1
′

∧

A
2

)

∨

(

A
1

∧

A
2

∧

A
2
′

)








(19)









Y
2

=





(

A
1

∧

A
1
′

∧

A
2

∧

A
2
′

)

∨

(

A
1
′

∧

A
2

∧

A
2
′

)










∨

(

A
1
′

∧

A
2

)

∨

(

A
1

∧

A
1
′

∧

A
2

)

∨

(

A
1

∧

A
2
′

)










∨

(

A
1

∧

A
2

∧

A
2
′

)

∨

(

A
1

∧

A
1
′

∧

A
2
′

)








(20)

Using distributive and absorption properties,





Y
1

=

(

A
1

∧

A
2

)

∧

[
1
∨

(

A
1
′

∧

A
2
′

)

∨

A
1
′

∨

A
2
′

]





(21)









Y
2

=





(

A
1
′

∧

A
2

)

∧

[

(

A
1

∧

A
2
′

)

∨

A
2
′

∨
1
∨

A
1

]










∨

(

A
1

∧

A
2
′

)

∧

[
1
∨

A
2

∨

A
1
′

]








(22)

Then the inference equations for

Y
1

 and

Y
2

 are:






Y
1



=




A
1

∧

A
2








(23)








Y
2



=




(

A
1
′

∧

A
2

)

∨

(

A
1

∧

A
2
′

)








(24)

 4. Design MethodologyThe methodology is developed considering that FIS-BBR consists of a definition of Boolean sets in the antecedent which have a membership function associated that represents concepts that can be described in a Boolean-type truth Table. It is noteworthy that the design methodology considers two main aspects:Establish Boolean actions.Monotonic transitions between Boolean actions.The Boolean actions are defined as the action obtained by the activation function and the virtual actuator in the Boolean design (codification). Using Boolean membership the m-th Boolean action corresponds to virtual output


y
m

=

Y
m


v
m


.The monotonic transitions between Boolean actions correspond to a condition for a continuous transition, from

y
m

 to

y
n

 Boolean actions. The continuous transition is obtained using fuzzy sets instead of Boolean.For the design methodology, the respective Boolean sets and actions are defined, then Boolean sets are converted into fuzzy using a set of criteria (based on the fuzzy sets and the extended Kleene Table). Then the formula for each activation function is determined, if necessary, a simplification process is also applied. Finally, the inference process using fuzzy sets is performed. Figure 8 shows the design methodology.The variable u is used for extending the Boolean Table to Kleene truth Table considering the transitions between Boolean codifications. The Kleene codification is given by the designer using regularity condition (restriction) to obtain a regular Table.A particular case of implementation is represented when the reduced formula obtained in the ternary extended table is the same as in Boolean Table. In this case, the formula can be directly obtained from the binary table when all conditions are accomplished achieving equivalence; then, the Kleene formula is equivalent to Boolean. 4.1. Regularity ConditionsAccording to [44], the regularity condition for regular functions allows to handle the ambiguity the regular functions treat ambiguity from a standpoint of ternary logic. The regularity condition indicates that if the ambiguity in the input increases, then the ambiguity in the output also increases.Definition 9 ([44]). Considering

E
=
{
0
,
u
,
1
}

 a n-variable ternary logic function f is a mapping from

E
n

 to E which to

X
∈

E
n


 assigns

f
(
X
)
∈
E

. Based on Figure 9 an ambiguity relation ⪯ corresponds to:



0
⪯
u
,

1
⪯
u
,

i
⪯
i
,




(25)

That means 0 and 1 are less ambiguous than u, generally if

i
⪯
j

 then i is less ambiguous than j. Moreover, for distinct elements

X
=
(

x
1

,
…
,

x
n

)

 and

Y
=
(

y
1

,
…
,

y
n

)

 of

E
n

, then X is less ambiguous than Y if


x
i

⪯

y
i


 for

i
=
1
,
2
,
…
,
n

, namely

X
⪯
Y

.Considering that 0 and 1 are definite states and u for a state not definable as 0 or 1. Then, the partial ordering ⪯ describes the ambiguity [44].Definition 10 ([44]). A function f is regular if it meets the condition of “ambiguity monotonicity” given by:



f

(
A
)

⪯
f

(
B
)


whenever

A
⪯
B


(
A
,
B
∈

E
n

)

.




(26)

This condition implies that if A is less or equally ambiguous than B then

f
(
A
)

 is less or equally ambiguous than

f
(
B
)

, for example considering

(

x
1

=
1
,

x
2

=
1
)

 and

(

x
1

=
u
,

x
2

=
1
)

 then


(

x
1

=
1
,

x
2

=
1
)

⪯

(

x
1

=
u
,

x
2

=
1
)


 therefore

f

(

x
1

=
1
,

x
2

=
1
)

⪯
f

(

x
1

=
u
,

x
2

=
1
)


, then if

f
(

x
1

=
1
,

x
2

=
1
)
=
1

 this implies that

f
(

x
1

=
u
,

x
2

=
1
)

 can be 1 or u to be a regular function. 4.2. Extension from Boolean to Kleene TableFor the extension from Boolean to Kleene Table, firstly the condition (26) is necessary to handle the ambiguity; secondly, the suitable configuration to achieve monotonic transitions between Boolean actions must be taken into account.The Kleene Table is obtained adding intermediate cases in the Boolean Table using the variable u in antecedent, and

{
0
,
u
,
1
}

 in the consequent according to the above considerations.An example of extension from bivalent to trivalent table achieving conditions of regularity can be seen in Figure 10; for condition (26) several options are possible; however, for achieving monotonic transitions between Boolean partitions the configuration is shown in Figure 11. 4.3. Considerations for Fuzzy Sets SelectionAs the suggested system is based on automatism designs, Boolean sets are determined in consideration of conceivable sensors which divide the input discourse universes in different Boolean actions that have associated control actions. In this way, fuzzy sets are built from Boolean previously categorized by the designer; thus, the established guidelines are explained below. 4.3.1. Kleene Table Correspondence CriteriaMembership functions in fuzzy sets can be defined considering values


δ
L

,

δ
U

∈

[
0
,
1
]


 with


δ
L

≤

δ
U


 (defined by the designer). Thus, the membership function

μ
(
x
)

 admits to establish a set

ν
(
x
)

 with the form (27).




ν

(
x
)

=





1
,




if

μ

(
x
)

≥

δ
U

;






u
,




if


δ
L

<
μ

(
x
)

<

δ
U

;






0
,




if

μ

(
x
)

≤

δ
L

.









(27)

The criterion states that when using

ν
(
x
)

 it is mandatory to maintain the same codification in the Kleene Table. 4.3.2. Convexity CriteriaSince one of the issues in BBR systems consists of the monotonous transition among Boolean actions, then, it is proposed that fuzzy sets obtained from Booleans must be convex. Considering the transition from Boolean to a fuzzy set A then

∀

x
1

,

x
2

∈
X

 with

λ
∈
[
0
,
1
]

, it is necessary to accomplish (28) (see [29]).





μ
A


(
λ

x
1

+

(
1
−
λ
)


x
2

)

≥
min

[

μ
A


(

x
1

)

,

μ
A


(

x
2

)

]





(28)

Figure 12 presents an example of membership function associated to convex and non-convex fuzzy sets. 4.3.3. Boolean Table Correspondence CriteriaThis conversion criteria is based on
α
-cut, where considering a value

α
∈
[
0
,
1
]

, the
α
-cut for a fuzzy set A has the elements of X with a membership value

μ
A

 equal to or greater than
α
 [29], then


A
α

=

{
x
∈
X

μ
A


(
x
)

≥
α
}


.Thus, the criterion proposed is based on a level
α
 (given by the designer) where a Boolean set B is established with the membership function

μ
(
x
)

 using equation (29), where the Boolean set

B
(
x
)

 must match for codification in the Boolean table.




B

(
x
)

=





1
,




if

μ
(
x
)
≥
α
;






0
,




if

μ
(
x
)
<
α
.









(29)

A case of conversion from a Boolean to a fuzzy set using a level
α
 is shown in Figure 13 producing the memberships


μ
1


(
x
)


 and


μ
2


(
x
)


. 5. Conceptual Design Example: Tank Level ControlThe purpose of this section is to show the design methodology using a basic application case in such a way that the steps involved in the design process can be clearly observed, being an important aspect the manipulation done with Boolean and Kleene algebras. Therefore, a SISO (Single Input Single Output) hydraulic system is considered as application case.In hydraulic systems, level control is a classic problem that has been managed using fuzzy logic as observed in the references [45,46,47], specially, the tank model is based on [48].In this example, the start point is a Boolean design in which the segmentation of the discourse universe is achieved. The control scheme considers three possible actions based on automatism for filling the tank. 5.1. System ModelThe considered dynamic model is similar to that presented in reference [48]. The scheme of the hydraulic system is shown in Figure 14.The variables and parameters used are:


q
e


(
t
)


: Input flow.

h
(
t
)

: Height of liquid level in the tank.

A
T

: Cross-sectional area of the tank.

A
0

: Cross-sectional area of the output valve.


C
v

=

A
0



2
g



: Output valve constant.The hydraulic system model is described by equation (30), the left part corresponds to input flow, on the right, the first term corresponds to accumulation, and the second to the output flow.





q
e


(
t
)

=

A
T



d
h
(
t
)


d
t


+

A
0



2
g
h
(
t
)






(30)

Equation (31) presents another form to represent the hydraulic system.





q
e


(
t
)

=

A
T



d
h
(
t
)


d
t


+

C
v



h
(
t
)






(31)

For the considered case the parameters are: Height of the tank:

1
m

; referred height to filling the tank 80 cm; maximum input flow 0.25 L/s or (2.5 × 10



−
4


m


3

/s); transverse tank area 0.126 m


2

, output pipes diameter 1/4 in or (0,635 cm); transversal area of the output valve 0.317 cm


2

 or (3.17 × 10



−
5


m


2

), constant value for the output valve is 1.4 × 10



−
4


m



5
/
2


/s.A delay time


t
0

=
0.1
s

 associate to the valve is also considered; therefore, the relation between control action u and input flow is


q
e


(
t
)

=
u

(
t
−

t
0

)


. In this model the cross-sectional area of the output valve

A
0

 is considered constant. Finally, each valve

V
G

 and

V
P

 has a maximum flow associated, which is:

V
G

 = 1.5 L/s

V
P

 = 1.0 L/s 5.2. Boolean DesignA first step in the design consists of analyzing the system dynamic transitions. In this regard, different levels in the tank are considered, their transitions as well as the actions performed in the valves. The levels considered are:Low level: L.Medium level: M.High level: H.For actions of control there are two valves

V
P

 and

V
G

, which can be real or virtual depending on hardware implementation. Table 7 is obtained considering the valve actions.As Boolean actions are already defined, then some inferences can be made:If level h is low Then input flow is large.If level h is intermediate Then input flow is medium.If level h is high Then input flow is low.For the action valves (

V
G

 large valve and

V
P

 small valve), inferences can be defined as well:If level h is low Then

V
G

 and

V
P

 activatedIf level h is intermediate Then

V
G

 activated and

V
P

 disabled.If level h is high Then

V
G

 disabled and

V
P

 activated.For implementing the actions on the valves two activation functions are defined, allowing the opening and closing of valves in such a way that the total action in the tank is:



u
=

Y

V
G



V
G

+

Y

V
P



V
P





(32)

 5.3. FIS-BBR DesignIn this case Boolean sets are replaced by fuzzy sets under certain considerations. Likewise, with fuzzy sets defined, the implementation of relations found in the Boolean design is possible, using specific operations as complement (standard), conjunction (t-norm: minimum), and disjunction (t-conorm: maximum) to fuzzy sets. 5.4. Boolean SetsFigure 14 considers possible sensors that are activated or diminished when the liquid is lower or higher in a defined level to employ in the control system. Then the Boolean membership functions proposed for implementing the system of control can be seen in Figure 15.The observable regions in the previous Boolean sets are:Low:


μ
B


(
h
)

=
0

 and


μ
A


(
h
)

=
0

.Medium:


μ
B


(
h
)

=
1

 and


μ
A


(
h
)

=
0

.High:


μ
B


(
h
)

=
1

 and


μ
A


(
h
)

=
1

.Table 8 represents the respective Boolean encoding for the states and control actions. Where X represents the “don’t care” cases; the variable X can be 0 or 1, according to convenience for obtaining a simplified expression.Considering DNF for Boolean algebra [19], from Table 8 (taken

X
=
0

) the equations for the activation functions are:






Y

V
G




=




(

B
′

∧

A
′

)

∨

(
B
∧

A
′

)








(33)








Y

V
P




=




(

B
′

∧

A
′

)

∨

(
B
∧
A
)








(34)

When applying synthesis and considering the case “don’t care”

(
B
=
0
,
A
=
1
)

, Table 9 is used to obtain a better simplification. The case “don’t care” is used only to simplify

Y

V
P


.Considering Table 9, the following equations are obtained:






Y

V
G




=



A
′







(35)








Y

V
P




=




B
′

∨
A







(36)

For the extension from a Boolean to a Kleenean Table, a value u is considered corresponding to the transition between values 0 and 1 (see Figure 16). For

Y

V
G


 and

Y

V
P


 from Boolean Table 9 to Kleene table, first is considered the regularity condition obtaining the Table 10. In the second stage, Table 11 is stated considering the monotonic transitions between Boolean actions. Table 12 shows another way to represent Table 11.Applying Kleene algebra properties (see [7]), the following equation results for

Y

V
G


.








Y

V
G


=





(

B
′

∧

A
′

)

∨

A
′

∨

(
B
∧

A
′

)

∨

(
B
∧

A
′

∧
A
)










∨

(

B
′

∧

A
′

∧
A
)

∨

(

B
′

∧
B
∧

A
′

∧
A
)








Y

V
G


=





A
′


∧
[


B
′

∨
1
∨
B
∨

(
B
∧
A
)

∨

(

B
′

∧
A
)










∨
(

B
′

∧
B
∧
A
)
]





=



A
′







(37)

This is obtained due to absorption properties. Likewise, for

Y

V
P


 is obtained:







Y

V
P


=





(

B
′

∧

A
′

)

∨

(

B
′

∧
B
∧

A
′

)

∨

(
B
∧

A
′

∧
A
)










∨

(
B
∧
A
)

∨
A
∨

(

B
′

∧
A
)

∨

B
′










∨
(

B
′

∧
B
∧

A
′

∧
A
)







Y

V
P


=





B
′

∧

[

A
′

∨

(

B
′

∧

A
′

)

∨
A
∨
1
]










∨
A
∧
[

(
B
∧

A
′

)

∨
B
∨
1
∨

(

B
′

∧
B
∧

A
′

)

]







Y

V
P


=





B
′

∨
A







(38)

As observed, this focus brings equal expressions to the Boolean case when simplification is applied. It is remarkable that the proposed design methodology allows to obtain this equivalence between Boole and Kleene cases, which is an important aspect of fuzzy systems based on Boolean relations because the design starts in a Boolean domine.In this paper, it is possible to observe that even though the property used to simplify two elements with the table (third excluded) is different from that used for the three elements table (absorption), it is possible to have the same expressions considering the respective intermediate transitions. The algebraic characteristics that do not meet the fuzzy sets in regard of those defined for Boolean sets are given by Equations (5) and (6), in this way, is important the employment of Kleene algebra to develop the design process when using fuzzy sets.The equivalence between Boolean and fuzzy design is appreciable when similar expressions are obtained using Boolean and Kleene algebras, and under the considered criteria the monotonic transitions between Boolean actions are achieved. 5.5. FIS-BBR ImplementationAccording to considerations for fuzzy set selection (Section 4.3), values


δ
U

=
1

 and


δ
L

=
0

, as well as a level of

0.5

 (
α
-cut) are taken aiming to find an equivalence with the Kleene Table. In the same way, Figure 17 proposes fuzzy sets for sensors that measure the level of liquid present in the tank by considering a linear-saturated behavior.The simplified equations to system implementation are:






Y

V
G





=

μ

A
′








Y

V
P





=

μ

B
′


⊕

μ
A









Finally, taken the Equation (32) and using “min” for t-norm, “max” for t-conorm and standard complement, then the control action corresponds to:



u
=

V
G



(
1
−

μ
A

)

+

V
P


max

[

(
1
−

μ
B

)

,

μ
A

]





(39)

In order to show the processes involved in the operation of the Boolean and BBR controllers, Figure 18 and Figure 19 show the respective block diagrams. In Figure 18 is presented the associated Boolean sets for Boolean controller, meanwhile Figure 19 shows the membership functions used for the BBR controller. 5.6. ResultsThe noteworthy results correspond to the characteristic transfer shape of the control surface (curve in this case) to implementing Boolean and BBR controller. These transfer curves are observable in Figure 20. Another relevant result is related to the control system dynamic response for the controllers; this can be seen in Figure 21.Likewise, Figure 20 shows the characteristic transfer curve of the BBR controller, displaying monotonous behavior among Boolean actions according to design.Figure 21 shows a Boolean controller typical switching behavior, BBR controller shows a softer behavior than the Boolean. A detail of these characteristics is shown in Figure 22, where an oscillatory behavior is observed for the Boolean controller while the BBR controller presents a continuous and smooth behavior. In control systems where the actuator is sensitive to sudden changes this is a factor of importance in the design of the system. According to [49] the oscillatory behavior associated with cycle limit is common in ON-OFF control systems.Figure 23 shows the control actions for Boolean and fuzzy designs. The fuzzy controller exhibits continuous transitions in comparison with Boolean. The implementation of a Boolean controller uses ON-OFF sensors and actuators; however, when carrying out the fuzzy implementation, these sensors and actuators are required to have a continuous behavior according to the design.The system performance indicators are contained in Table 13, being

%

e

s
s



 equal to the steady state error,

T
s

 settling time and finally the oscillation feature. The

T
s

 value is calculated when the signal is within a range with

5
%

 of the reference. The reference considered for simulations is 80 cm, from Table 13 the minor steady-state error is for the BBR system; the lower

T
s

 is achieved using the Boolean controller and not oscillation for BBR system. It should be noted that if the oscillations of the Boolean controller exceed the band of

5
%

, the settling time cannot be calculated. 6. DiscussionConcerning BBR systems, the most relevant characteristic lies in their automatism designs for control systems; under this feature, an extension of a Boolean to a Kleene Table with a further implementation of fuzzy sets is made. Concerning the structure, this is at times similar to non-normalizad Takagi–Sugeno fuzzy system; however, BBR systems include the respective design methodology shown in Section 4. Moreover, including those characteristics in BBR systems offers the following advantages:Design methodology rooted in tables of truth which is obtained taking Table 3 as reference, described in Section 3.2. This also allows to simplify the design by using Kleene algebra.A simplified inference process, which is seen in Figure 1, Figure 3 and Figure 5 where the fuzzy systems of Mamdani, Takagi–Sugeno and BBR appear.Direct application in control systems, which is observed in Section 3, including the concept of virtual actuator shown in Section 3.1. This concept grants a compact inference process oriented toward control.Applicability in neuro-fuzzy supervised systems using the structure in Figure 7, and Equations (16) and (17). Training parameters in a supervised form are achieved when using continuous membership functions, and fuzzy operators as both, the t-norm product and the algebraic sum to t-conorm.This paper is focused on presenting the design methodology. The possibility of deepening and studying other related aspects is open. Some of the topics to study in later developments are:Implementation of BBR using CNF (Conjunctive Normal Form) considering a similar methodology as it is employed for the design of digital circuits.Refinement of criteria to convert Boolean sets to fuzzy.Deepen in the considerations to use general forms of t-norm, t-conorm and complement. In this paper, we considered the standard operators.Taking this work as a reference, the development of more complex cases for systems with multiple poles, zeros, and non-linear behaviors can be performed, considering also the development of supervised neuro-fuzzy systems.This document presents the methodology with a basic application case seeking to show the algebraic operations used in the design process. For more complex applications related to the FIS-BBR, can be considered [15] where a neuro-fuzzy control system for the Control of a Permanent Magnet Synchronous Generator is presented. Additionally, [16] presents an adaptive scheme to the Control Flow Power in Distributed Generation Systems. These works use a compact fuzzy scheme equivalent to an FIS-BBR, which is determined in a heuristic way taking a discrete linear time system which is converted to a compact fuzzy system. This systems could be formulated using the methodology proposed in this document which is expected to be addressed in a further work. 7. ConclusionsThis paper introduces some issues for system implementation of fuzzy inference based on Boolean relations, whose approach aims to transform Boolean sets into fuzzy for the implementation of fuzzy inference systems. In this regard, regularity conditions and the criteria to have continuous (monotonic) transitions between Boolean actions are used to transform a Boolean Table into a Kleene Table, as well as to define the shape of fuzzy sets.Using the set of criteria proposed, together with Boolean and Kleene algebras, we observed the possibility to achieve an equivalence between Boolean and fuzzy designs obtaining continuous transitions between Boolean actions.The proposal considers Boolean algebra tools to design automatic control systems based on truth tables, allowing the possibility of simplifying equations. This methodology allows the design of fuzzy compact systems which are expected to be studied in future work.In an FIS-BBR implementation, to achieve smooth transitions between Boolean actions, sensors and actuators are required to have a continuous behavior according to the design that is carried out. Considering the application case, the sensors and the actuators must present an analog behavior for tank level control.The design example was made for a specific set of parameters (tank model). However, when parameter variations occur, it is convenient to implement an adaptive system. In this way, the application of control systems using Boolean relations in neuro-fuzzy adaptive control is expected in future studies.
