 1. IntroductionOnline data backup services such as BuddyBackup1 and CrashPlan2 allow agents to share their under-utilized storage (disk) space with others as well as backup their data on the storage space shared by other agents. In academic discourse, numerous architectural prototypes of data backup systems (for example, Social Storage Cloud [1], Friendstore [2], F2Box [3], FriendBox [4], BlockParty [5], and so on) have been proposed. In order to mitigate issues like data security, trust, or low quality of services, these systems (services) are leveraging social connections. The social connections are either exogenous (that is, encoded in social graphs, for instance, the Facebook social graph3) or endogenous (constructed by the agents [6]). Such social connections are at the core of these systems.A recently published survey [7] in this field mentions various issues related to social connections, such as small friend sets, social closeness quantification, and so on. These issues are discussed in the context of exogenous social connections.The aspect of endogenous social connections is notably lacking. The agents’ self-interested behaviour, guided by the cost-benefit trade-off, in building storage-sharing connections is still poorly understood. Specifically, what is not well understood in this context is: (1) which network structure is likely to emerge when self-interested agents construct their storage sharing connections; (2) whether the emerged storage-sharing connection structure is stable and efficient, or not; and (3) the impact of link formation between two agents on their storage availability as well as that of other agents. To advance our understanding about these aspects, there is a need for formal modeling of endogenous socially-aware storage-sharing networks, as previous studies have focused exclusively on exogenous networks.This paper studies the aforementioned aspects by focusing on social storage cloud systems (a case of socially-aware resource sharing systems). We model social storage cloud systems as an endogenous social storage cloud by using the tools of network analysis4, game theory5, and network formation6. Specifically, we model social storage cloud systems as a strategic network formation game, where self-interested agents decide with whom they want to form a connection and with whom they do not. For this, we define the utility of agents in a social storage cloud by taking into consideration the parameters data failure rate, value of data, and cost for maintaining social connections.In [23], the authors consider a degree-based utility model, where agents benefit only from direct neighbors, and the benefit decreases with an increase in the number of neighbors of each neighbour [24]). The utility function we define in this study is degree-distance-based, where agents obtain benefits from direct and indirect neighbors, but the benefit decreases with an increase in the number of direct and indirect neighbors [25]. With this utility function, we study the effect of decisions of addition and deletion of links by pairs of agents on their storage availability in the network. We study externalities in the network, that is, the effect of link formation between a pair of agents on the utility of the other agents. We then analyze the network structure that evolves due to these decisions of link addition and link deletion.The focus of this paper is to study network stability, efficiency, and the measures of price of anarchy and price of stability. For the analysis of network stability, we make use of the concept of pairwise stability proposed in [26]. In our model, agents experience both positive and negative externalities, determined by storage availability. We provide necessary and sufficient conditions for an agent to experience positive and negative externalities. Further, we show that if data failure rate is less than the ratio of cost of maintaining the link to data value, then the null network is the unique pairwise stable as well as an efficient network. However, if the data failure rate is higher than the ratio of the cost of maintaining the link to data value then a network where every agent has, at most, a single link is the unique pairwise stable and efficient network.The structure of the paper is as follows. Section 2 discusses the social storage cloud model. Section 3 studies the effect of addition and deletion of a link between a pair of agents on their closeness and storage availability, and that of others. Section 4 discusses the characterization of stable networks, where we study deviation conditions that show when agents have incentives for adding or deleting a link. Further, the section discusses network stability, efficiency, and inefficiency. Section 5 concludes the discussion. 2. Social Storage Cloud ModelIn this section, we describe the social storage cloud model through an interaction structure, a storage-sharing framework and cost-benefit analysis of agents. 2.1. Interaction StructureA social storage cloud

g
=
(
A
,
L
)

 is a storage-sharing and data backup network that consists of a nonempty set
A
 of N agents who are involved in storage (disk)-space sharing and data backup activity; and a set,
L
, of links that connect these agents. The set
L
 acts as a communication infrastructure for agents to share their storage space with others and search for storage space provided by others. A link,

〈
i
j
〉
∈
L

, represents a direct communication channel between agents i and j, which is bidirectional (and hence,

〈
i
j
〉
=
〈
j
i
〉

). If

〈
i
j
〉
∈
L

, we call the agents i and j as neighbours in the network
g
. The number of neighbors of agent i in
g
 is denoted by


η
i


(
g
)


.Given distinct agents


a
1

,

a
2

,
⋯
,

a
n

∈
A

, if


〈

a
1

,

a
2

〉

,

〈

a
2

,

a
3

〉

,
⋯
,

〈

a

n
−
1


,

a
n

〉

∈
L

, then there is a path


P


a
1


a
n




(
g
)


, from

a
1

 to

a
n

, of length

n
−
1

. The distance


d

i
j



(
g
)


(
=

d

j
i



(
g
)

)


 between a pair of agents i and j is the length of the shortest path connecting them in
g
.A network
g
 is connected if there exists at least one path between any pair of agents, otherwise, it is disconnected. A path of length

≥
2

 between a pair of agents is an indirect communication channel between them. The set,

G
(
N
)

, consists of all possible networks on N agents.Data stored on local storage space is prone to loss due to multiple reasons such as virus infection, software or hardware failure, data corruption, and so on. Therefore, each agent wants to backup its data on remote storage (disk) space. For any agent, data loss is costly. We capture this by assuming that the value each agent associates with its data is quantifiable and given. Every agent (as a data owner) strives for obtaining storage space provided by other agents (as storage providers) in

g
∈
G
(
N
)

. Agent i wants to backup


b
¯

i

 amount of data and shares



s
¯

i

=


∑

j
∈
A
∖
{
i
}





b
¯

j


 amount of storage space. This leads to endogenous social storage cloud formation, where each agent builds its communication channel to seek storage space from direct and indirect communication channels. We assume that each agent has global (complete) information about the network structure.A network
g
 evolves when agents perform two actions, namely, link addition (

g
+
〈
i
j
〉

) and link deletion (

g
−
〈
i
j
〉

). Mutual consent of a pair of agents is required for addition of a link between them, but any link can be unilaterally deleted.Table 1 summarizes all notations used in this paper. 2.2. Storage SharingAccording to [1], agents could limit storage-sharing with those who are close to them in the social cloud. In order to capture this, we make use of the harmonic centrality measure (discussed in [10,27,28]), defined as follows:




Φ
i


(
g
)

=


∑

j
∈
g
∖
{
i
}




1


d

i
j



(
g
)



.




(1)

We use harmonic centrality as it deals with disconnected networks as well.In
g
, an agent j (as a storage provider) computes a probability distribution on all agents for the purpose of allocating storage space to agent

i
∈
g

 (as a data owner), as below:




α

i
j



(
g
)

=


1


d

i
j



(
g
)






∑

j
∈
g
∖
{
i
}




1


d

i
j



(
g
)





=

1


d

i
j



(
g
)


Φ
i


(
g
)



,




(2)


where


α

i
j



(
g
)


 is the probability that agent i will obtain storage space from agent j in
g
.Remark 1. If


d

i
j



(
g
)

=
∞

, then


α

i
j



(
g
)

=
0

 (and


α

j
i



(
g
)

=
0

). As agents i and j are disconnected in
g
, their chances of obtaining storage space from each other is zero.The probability that an agent i obtains storage space from at least one agent in
g
 is








γ
i


(
g
)

=
1
−


∏

j
∈
g
∖
{
i
}




(
1
−

α

i
j



(
g
)

)

.








 2.3. Agent’s Utility and SymmetryThe utility of agent i in
g
 is given by a function


u
i

:
G
→

R
+


. Let u be the the vector (profile) of utility functions

u
=
(

u
1

,
.
.
.
,

u
n

)

. Thus, we have

u
:
G
→

R
N


. In other words, each possible social storage cloud structure

g
∈
G

 leads to a utility function profile for agents.We define the utility of agents in a social storage cloud
g
 with the following parameters. An agent, i, loses its data with probability


λ
i

∈

(
0
,
1
)


. Therefore, to minimize this risk of data loss, agent i aims to backup its data on the storage provided by others. For agent i,

β
i

 is the value of the local data that is to be backed up. Agent i obtains storage space provided by others in
g
, with probability


γ
i


(
g
)


. Thus, the value of data

β
i

, the chance of losing the data

λ
i

, and the chance of obtaining storage space


γ
i


(
g
)


 capture the expected benefit of agent i in
g
.An agent searches for storage by staying connected in the network. Direct as well as indirect links help agents to get storage space. The direct link between agents i and j costs

ς
i

. This cost can be interpreted as the cost required for maintaining storage space, infrastructure, bandwidth, time, and so on. The cost to maintain an existing link and that for adding (and maintaining) a new link are the same. There is no additional cost to add a new link. Thus, agent i incurs a total cost of


ς
i


η
i


(
g
)


 in order to obtain an expected benefit of


β
i


λ
i


γ
i


(
g
)


, in case of data loss. But the network is formed upfront, before the data loss happens. The cost to maintain links is, hence, incurred even in the case of no data loss, where the expected benefit to i is


β
i


(
1
−

λ
i

)


.Therefore, given the aforementioned parameters, the expected utility is





u
i


(
g
)

=


β
i


(
1
−

λ
i

)

+


β
i


λ
i


γ
i


(
g
)

−

ς
i


η
i


(
g
)

.




(3)

Free riding (a situation where an agent offers less storage space, but consumes more) is a widely discussed issue in the literature on peer-to-peer storage. In order to deal with free riding, many P2P storage systems (for example, Internet Cooperative Backup System [29], PeerStore [30], Pastiche [31]) follow a symmetric storage-sharing mechanism, where agents share the same amount of storage space.We define a symmetric social storage cloud
g
 as follows.Definition 1. A symmetric social storage cloud (SSSC)
g
 is a network where the benefit (value) associated with backed-up data is the same for all agents in the network, that is,


β
i

=

β
j


 (say β),


ς
i

=

ς
j


 (say ς7), and


λ
i

=

λ
j


 (say λ8) for all

i
,
j
∈
A

, and hence, utility of each agent i in
g
 is





u
i


(
g
)

=

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
)

−
ς

η
i


(
g
)

,





(4)

where

λ
,
β
,
ς
∈
(
0
,
1
)

.For further study, we consider the above utility function (Equation (4)). Henceforth, whenever we refer to a network, or just
g
, we mean an SSSC. 2.4. Pairwise StabilityIn order to characterize endogenously built social storage cloud, we adopt pairwise stability [26] as a solution concept. A network is pairwise stable if (1) no agent benefits by deleting an existing link and (2) no two agents benefit by adding a new link between them.Definition 2. [26] A network
g
 is pairwise stable iffor all

i
,
j
∈
g

 such that

〈
i
j
〉
∈
g

,


u
i


(
g
)

≥

u
i


(
g
−

〈
i
j
〉

)


, and


u
j


(
g
)

≥

u
j


(
g
−

〈
i
j
〉

)


; andfor all

i
,
j
∈
g

 such that

〈
i
j
〉
∉
g

, if


u
i


(
g
+

〈
i
j
〉

)

>

u
i


(
g
)


, then


u
j


(
g
+

〈
i
j
〉

)

<

u
j


(
g
)


. 3. Network Structure and Storage AvailabilityOne of the objectives of this paper is to understand the impact of link addition and deletion on storage availability for those agents who are involved in the link addition/deletion as well as those who are not. The storage availability is determined by the distances between them and their closeness (from Equation (2)). Therefore, first we study how addition and deletion of a link impacts the shortest distances between pairs of agents and, therefore, their closeness. This analysis provides a base for understanding the effect of link-addition/deletion on agents’ storage availability in
g
. 3.1. Effect of Link Alteration on ClosenessLemma 1. Suppose

〈
i
j
〉
∉
g

. Then,


Φ
i


(
g
+

〈
i
j
〉

)

>

Φ
i


(
g
)


.Proof.  Clearly,


d

i
j



(
g
+

〈
i
j
〉

)

<

d

i
j



(
g
)


. As

〈
i
j
〉
∉
g

, we have,


d

i
j



(
g
)

≥
2

. Also,


d

i
j



(
g
+

〈
i
j
〉

)

=
1

. Thus,


Φ
i


(
g
)


 and


Φ
j


(
g
)


 increase by at least



d

i
j



(
g
)

−
1



d

i
j



(
g
)



 in

g
+
〈
i
j
〉

. ☐Lemma 2. Suppose

〈
i
j
〉
∈
g

. Then,


Φ
i


(
g
−

〈
i
j
〉

)

<

Φ
i


(
g
)


.Proof.  Let us assume there is no path between i and j in

g
−
〈
i
j
〉

, then


d

i
j



(
g
−

〈
i
j
〉

)

=
∞

, thus,


Φ
i


(
g
)


 and


Φ
j


(
g
)


 decrease by 1 in

g
−
〈
i
j
〉

.Now, let us assume there exists a path


P

i
j



(
g
−

〈
i
j
〉

)


 between i and j in

g
−
〈
i
j
〉

, the distance between i and j in

g
−
〈
i
j
〉

 being at least 1 more than that in
g
. Thus,


Φ
i


(
g
)


 and


Φ
j


(
g
)


 decrease by at least



d

i
j



(
g
−

〈
i
j
〉

)

−
1



d

i
j



(
g
−

〈
i
j
〉

)



 in

g
−
〈
i
j
〉

. ☐Lemmas 1 and 2 show that, with respect to closeness, every link benefits agents on either side of the link. An action of link addition or deletion between a pair of agents not only impacts their closeness, but also that of other agents. Now, we study the impact of link addition or deletion between a pair of agents (say, i and j) on the closeness of the other agents

k
∈
g
∖
{
i
,
j
}

.Lemma 3. Suppose

〈
i
j
〉
∉
g

 and

k
∈
g
∖
{
i
,
j
}

. Then,


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


 if and only if


d

k
l



(
g
)

=

d

k
l



(
g
+

〈
i
j
〉

)


 for all

l
∈
g

.Proof.  If


d

k
l



(
g
)

=

d

k
l



(
g
+

〈
i
j
〉

)


 for all

l
∈
g

, then by Equation (1),


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


.Conversely, suppose


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


.It is easy to see that, if for some

l
∈
g

, if


d

k
l



(
g
+

〈
i
j
〉

)

≠

d

k
l



(
g
)


, then


d

k
l



(
g
+

〈
i
j
〉

)

<

d

k
l



(
g
)


. (Paths in
g
 exist in

g
+
〈
i
j
〉

 too).We have


d

k
l



(
g
+

〈
i
j
〉

)

≤

d

k
l



(
g
)


 for all

l
∈
g

 and, if there exists x such that


d

k
x



(
g
+

〈
i
j
〉

)

<

d

k
x



(
g
)


, then


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


, a contradiction. ☐Lemma 4. Suppose

〈
i
j
〉
∈
g

 and

k
∈
g
∖
{
i
,
j
}

. Then,


Φ
k


(
g
)

=

Φ
k


(
g
−

〈
i
j
〉

)


 if and only if


d

k
l



(
g
)

=

d

k
l



(
g
−

〈
i
j
〉

)


 for all

l
∈
g

.Proof.  As


d

k
l



(
g
−

〈
i
j
〉

)

≥

d

k
l



(
g
)


 for all l, the proof follows in lines similar to that of Lemma 3. ☐We now show necessary and sufficient conditions for increase in the closeness of agents who are not involved in link addition or deletion.Theorem 1. Suppose

〈
i
j
〉
∉
g

, and let k be an agent distinct from i and j. Then,


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


 if and only if there exists at least one agent

l
∈
g

 such that


d

k
l



(
g
)

≥
3

 and all shortest paths


P

k
l



(
g
+

〈
i
j
〉

)


 from k to l in

g
+
〈
i
j
〉

 contain

〈
i
j
〉

.Proof.  Let


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


. Then, by Lemma 3, there must be at least one agent, say l, such that


d

k
l



(
g
)

>

d

k
l



(
g
+

〈
i
j
〉

)


.Suppose

i
,
k
,

 and l are all distinct. Note that j may be the same as l.If possible, let


d

k
l



(
g
)

<

d

k
i



(
g
)

+

d

i
j



(
g
)

+

d

j
l



(
g
)


 for all

l
∈
g

. Then,


d

k
l



(
g
)

=

d

k
l



(
g
+

〈
i
j
〉

)


 for all

l
∈
g

. From Lemma 1,


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


, a contradiction. Therefore, there exists an

l
∈
g

 such that


d

k
l



(
g
)

=

d

k
i



(
g
)

+

d

i
j



(
g
)

+

d

j
l



(
g
)


.As

〈
i
j
〉
∉
g

,


d

i
j



(
g
)

≥
2

. As

k
≠
i

,


d

i
k



(
g
)

≥
1

 and

j
=
l

. Hence,


d

k
l



(
g
)

≥
3

.Now,





d

k
l



(
g
+

〈
i
j
〉

)



=

d

k
i



(
g
+

〈
i
j
〉

)

+

d

i
j



(
g
+

〈
i
j
〉

)

+

d

j
l



(
g
+

〈
i
j
〉

)







=

d

k
i



(
g
)

+

d

i
j



(
g
+

〈
i
j
〉

)

+

d

j
l



(
g
)








<

d

k
i



(
g
)

+

d

i
j



(
g
)

+

d

j
l



(
g
)








=

d

k
l



(
g
)






It follows that every shortest path between k and l in

g
+
〈
i
j
〉

 contains

〈
i
j
〉

. (Note that if there exists a shortest path from k to l in

g
+
〈
i
j
〉

 that does not contain

〈
i
j
〉

, then this shortest path exists in
g
 too).Conversely, let

l
∈
g

 such that


d

k
l



(
g
)

≥
3

 and all shortest paths


P

k
l



(
g
+

〈
i
j
〉

)


 from k to l in

g
+
〈
i
j
〉

 contain

〈
i
j
〉

.Clearly,


Φ
k


(
g
)

≤

Φ
k


(
g
+

〈
i
j
〉

)


.If possible, let


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


. This means for every l in
g
 there exists a shortest path from k to l in

g
+
〈
i
j
〉

 that does not contain

〈
i
j
〉

, a contradiction. Therefore,


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


. ☐Theorem 2. Suppose

〈
i
j
〉
∈
g

, and let k be an agent distinct from i and j. Then,


Φ
k


(
g
−

〈
i
j
〉

)

<

Φ
k


(
g
)


 if and only if there exists at least one agent

l
∈
g

 such that


d

k
l



(
g
)

≥
2

 and all shortest paths


P

k
l



(
g
)


 from k to l in
g
 contain

〈
i
j
〉

.We skip the proof as it is similar to the proof of Theorem 1.In subsequent sections, we present our results due to link addition. We present our results on link deletion in Appendix B. 3.2. Effect of Closeness on Distances of Agents Not Involved in Link AlterationIn this section, we classify agents whose mutual distances from each other remain the same after link alteration. We use the same to analyze the effect of closeness on distances between agents who are not involved in the link addition or deletion.Given k such that


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


, we use

L
k
+

 to denote the set of all

l
∈
g

 such that all shortest paths from k to l in

g
+
〈
i
j
〉

 contain

〈
i
j
〉

. We use

l

k

+

 to denote an agent in

L
k
+

.Proposition 1. Suppose i, j, and k are distinct agents in
g
. Suppose l is another agent, distinct from i and k, and suppose


Φ
k


(
g
+

〈
i
j
〉

)

>

Φ
k


(
g
)


. If


d

k
i



(
g
+

〈
i
j
〉

)

<

d

k
j



(
g
+

〈
i
j
〉

)

≤

d

k
l



(
g
+

〈
i
j
〉

)


, then


d

i
k



(
g

+


〈
i
j
〉

)


=


d

i
k



(
g
)


.Proof.  We have


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


. Then, from Theorem 1, there exists

l
∈
g

 such that all shortest paths


P

k
l



(
g
+

〈
i
j
〉

)


 from k to l in

g
+
〈
i
j
〉

 contain

〈
i
j
〉

.We consider the two cases

j
=
l

 and

j
≠
l

.
Suppose

j
=
l

. As


d

k
i



(
g
+

〈
i
j
〉

)

<

d

k
j



(
g
+

〈
i
j
〉

)


, k observes i before j on all shortest paths


P

k
l



(
g
+

〈
i
j
〉

)


. This implies


d

i
k



(
g
+

〈
i
j
〉

)

=

d

i
k



(
g
)


.Suppose

j
≠
l

. As


d

k
i



(
g
+

〈
i
j
〉

)

<

d

k
j



(
g
+

〈
i
j
〉

)

≤

d

k
l



(
g
+

〈
i
j
〉

)


, k observes i before j, and j before l, on all shortest paths


P

k
l



(
g
+

〈
i
j
〉

)


. This implies


d

i
k



(
g
+

〈
i
j
〉

)

=

d

i
k



(
g
)


. ☐Definition 3. Suppose

〈
i
j
〉
∉
g

 and k is an agent such that


Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)


. A

(
k
,
+
i
j
)

-shortest-path-network,

g

i
j


k
+


, is a subnetwork of

g
+
〈
i
j
〉

 that consists of all shortest paths from k to

l
k
+

 in

g
+
〈
i
j
〉

, which contain

〈
i
j
〉

, for all


l
k
+

∈

L
k
+


.Definition 4. An (all

k
,
+
i
j
)

-shortest-path-network,

g

i
j

+

, is



⋃



k
∈
g
,



Φ
k


(
g
)

<

Φ
k


(
g
+

〈
i
j
〉

)







g

i
j


k
+



, the smallest network consisting of all

(
k
,
+
i
j
)

-shortest-path-networks.Definition 5. A sub-

(
i
,
+
)

-network,

g
i
+

 of

g

i
j

+

, is the induced subnetwork of

g

i
j

+

 consisting of all agents

k
∈

g

i
j

+


 such that


d

i
k



(
g
)

=

d

i
k



(
g
+

〈
i
j
〉

)


. Similarly, we define the sub-

(
j
,
+
)

-network,

g
j
+

 of

g

i
j

+

, as the induced subnetwork of

g

i
j

+

 consisting of all agents

l
∈

g

i
j

+


 such that


d

j
l



(
g
)

=

d

j
l



(
g
+

〈
i
j
〉

)


.Refer to Appendix A for an illustration of the above definitions.Proposition 2. For all

k
,

k
¯

∈

g

i

+


,


d

k

k
¯




(
g
)

=

d

k

k
¯




(
g
+

〈
i
j
〉

)


.Proof.  If

k
,

k
¯

∈

g

i

+


 then, from Definition 5,


d

i
k



(
g
)

=

d

i
k



(
g
+

〈
i
j
〉

)


 and


d

i

k
¯




(
g
)

=

d

i

k
¯




(
g
+

〈
i
j
〉

)


. As

k
,

k
¯

∈

g

i
j

+


 as well, there exists l and

l
¯

 such that


d

k
l



(
g
)

>

d

k
l



(
g
+

〈
i
j
〉

)


 and


d


k
¯


l
¯




(
g
)

>

d


k
¯


l
¯




(
g
+

〈
i
j
〉

)


.It is sufficient to show that, given

k
¯

,

l
¯

 can never be k.If possible, let


l
¯

=
k

. Then, from Definition 5,


d


k
¯

i



(
g
)

=

d


k
¯

i



(
g
+

〈
i
j
〉

)


 implies

k
¯

 observes i first, and subsequently j to reach k, on all shortest paths


P


k
¯

k



(
g
+

〈
i
j
〉

)


 from

k
¯

 to k in

g
+
〈
i
j
〉

. Then,


d

i
k



(
g
)

≠

d

i
k



(
g
+

〈
i
j
〉

)


. This is because, if

k
=
j

,


d

i
k



(
g
)

<

d

i
k



(
g
+

〈
i
j
〉

=
1


. Therefore,

k
∉

g

i

+


, which is a contradiction. Now, if

k
≠
j

, then k must first visit j, and later i, to reach

k
¯

 on all shortest paths


P

k

k
¯




(
g
+

〈
i
j
〉

)


 from

k
¯

 to k. This implies


d

i
k



(
g
)

≠

d

i
k



(
g
+

〈
i
j
〉

)


 and hence,

k
∉

g

i

+


, again, a contradiction. Thus,

k
≠

l
¯


. ☐We discuss our results on shortest distances due to link deletion in Appendix B.1. 3.3. Effect of Link Alteration on Storage AvailabilityOur aim here is to analyze under what conditions agents’ chance of obtaining storage space in the network increases or decreases by adding a new link. We present our results in the case of link deletion in Appendix B.2.Lemma 5. Suppose agent i and j add a direct link in
g
 and let

k
∉

g

i
j

+


. Then,


α

i
k



(
g
)

=

α

i
k



(
g
+

〈
i
j
〉

)


 and


α

j
k



(
g
)

=

α

j
k



(
g
+

〈
i
j
〉

)


.Proof.  If agent

k
∉

g

i
j

+


 then


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


. Thus,


d

k
i



(
g
)

=

d

k
i



(
g
+

〈
i
j
〉

)


. Therefore, from Equation (2),


α

i
k



(
g
)

=

α

i
k



(
g
+

〈
i
j
〉

)


. A similar proof holds for j too. ☐Lemma 6. Suppose agents i, j, k, and l are such that

i
≠
j

,

j
≠
k

,

i
≠
l

, and

k
≠
l

. (Agents i and k may be the same, and agents j and l may be the same). Suppose

〈
i
j
〉
∉
g

,

k
∈

g

i

+


, and

l
∈

g
j
+


. Then,


α

k
l



(
g
)

<

α

k
l



(
g
+

〈
i
j
〉

)


, and

i
≠
k

 implies that


α

i
k



(
g
)

>

α

i
k



(
g
+

〈
i
j
〉

)


. Similarly, if

j
≠
l

, then


α

j
l



(
g
)

>

α

j
l



(
g
+

〈
i
j
〉

)


.Proof.  Refer Appendix C for the proof. ☐Lemma 7. Let k and

k
¯

 be agents in

g
i
+

. Then,


α

k

k
¯




(
g
)

=

α

k

k
¯




(
g
+

〈
i
j
〉

)


 and


α


k
¯

k



(
g
)

=

α


k
¯

k



(
g
+

〈
i
j
〉

)


.Proof.  The proof follows from Proposition 2. ☐Theorem 3. Suppose agents i and j are such

i
≠
j

, and

〈
i
j
〉
∉
g

. Then,


γ
i


(
g
)

<

γ
i


(
g
+

〈
i
j
〉

)


 if and only if





∏

k
∈

g

i

+





(
1
−

α

i
k



(
g
+

〈
i
j
〉

)

)





∏

l
∈

g

j

+





(
1
−

α

i
l



(
g
)

)



<




∏

k
∈

g

i

+





(
1
−

α

i
k



(
g
)

)





∏

l
∈

g

j

+





(
1
−

α

i
l



(
g
+

〈
i
j
〉

)

)




.Additionally,


γ
i


(
g
)

<

γ
i


(
g
+

〈
i
j
〉

)


 if and only if





∏

k
∈

g

i

+





(

α

i
k



(
g
+

〈
i
j
〉

)

)





∏

l
∈

g

j

+





(

α

i
l



(
g
)

)



>




∏

k
∈

g

i

+





(

α

i
k



(
g
)

)





∏

l
∈

g

j

+





(

α

i
l



(
g
+

〈
i
j
〉

)

)




.Proof.  The proof follows from Lemmas 5, 6, and 7. ☐ 3.4. ExternalitiesIn this section, we study externalities, that is, how a link that is added between a pair of agents affects the utility of others. (Refer to Definition 6). The particular form of externalities (positive, negative, or none) is crucial in determining which network is likely to evolve and the conditions under which it will lead to a stable and efficient network.Definition 6. [32] Consider a network,
g
, with agents

i
,
j
∈
g

 such that

i
≠
j

 and

〈
i
j
〉
∉
g

. Suppose agents i and j form a direct link

〈
i
j
〉

. Then, agent

k
∈
g
∖
{
i
,
j
}

 experiencesPositive externalities if


u
k


(
g
+

〈
i
j
〉

)

>

u
k


(
g
)


;Negative externalities if


u
k


(
g
+

〈
i
j
〉

)

<

u
k


(
g
)


;No externalities if


u
k


(
g
+

〈
i
j
〉

)

=

u
k


(
g
)


.We now show that the type of externalities an agent

k
∈
g

 experiences, can be determined using conditions on the storage availability, independent of the data loss rate and the value that agents associate with their data.Proposition 3. In an SSSC
g
, an agent

k
∈
g

 experiencesPositive externalities if


γ
k


(
g
+

〈
i
j
〉

)

>

γ
k


(
g
)


;Negative externalities if


γ
k


(
g
+

〈
i
j
〉

)

<

γ
k


(
g
)


;No externalities if


γ
k


(
g
+

〈
i
j
〉

)

=

γ
k


(
g
)


.Proof.  By Definition 6,


u
k


(
g
+

〈
i
j
〉

)

>

u
k


(
g
)




⇒

β
(
1
−
λ
)
+

β
λ

γ
k


(
g
+

〈
i
j
〉

)

−
ς

η
k


(
g
+

〈
i
j
〉

)

>

β
(
1
−
λ
)
+

β
λ

γ
k


(
g
)

−
ς

η
k


(
g
)


.As agent k does not pay the cost for link

〈
i
j
〉

, we have

ς

η
k


(
g
+

〈
i
j
〉

)

=
ς

η
k


(
g
)


.Thus,

β
λ

γ
k


(
g
+

〈
i
j
〉

)

>
β
λ

γ
k


(
g
)

⇒

γ
k


(
g
+

〈
i
j
〉

)

>

γ
k


(
g
)


.For Cases 2 and 3, the proof is similar to that of Case 1. ☐The following results provide a necessary and sufficient condition under which an agent

k
∈
g

 experiences positive or negative externalities.Lemma 8. Let i, j, and k be distinct agents in
g
. Suppose

k
∉

g

i
j

+


. Then, k experiences only negative externalities.Proof.  If agents i and j add a direct link in
g
, then, from Lemma 1,


Φ
i


(
g
)

<

Φ
i


(
g
+

〈
i
j
〉

)


. If

k
∉

g

i
j

+


, then, from Theorem 1,


Φ
k


(
g
)

=

Φ
k


(
g
+

〈
i
j
〉

)


, thus,


d

k
l



(
g
)

=

d

k
l



(
g
+

〈
i
j
〉

)


 for all

l
∈
g

. Therefore,


α

k
i



(
g
+

〈
i
j
〉

)

<

α

k
i



(
g
)


, by Equation (2). Now, for all

l
∈
g

,


Φ
l


(
g
)

≤

Φ
l


(
g
+

〈
i
j
〉

)


. If


Φ
l


(
g
)

=

Φ
l


(
g
+

〈
i
j
〉

)


, then


α

k
l



(
g
+

〈
i
j
〉

)

=

α

k
l



(
g
)


 and, if


Φ
l


(
g
)

<

Φ
l


(
g
+

〈
i
j
〉

)


, then


α

k
l



(
g
+

〈
i
j
〉

)

<

α

k
l



(
g
)


. Thus,


γ
k


(
g
+

〈
i
j
〉

)

<

γ
k


(
g
)


. ☐Theorem 4. Suppose agents i, j, k,

k
¯

, and l are such that

i
≠
j

,

i
≠
k

,

i
≠
l

,

j
≠
k

,

k
≠

k
¯


, and

k
≠
l

. (Agents i and

k
¯

 may be the same, and agents j and l may be the same). Suppose

〈
i
j
〉
∉
g

,


k
¯

∈

g

i

+


 and

l
∈

g
j
+


. Then, agent k experiences positive externalities if and only if

k
∈

g

i
j

+


 and





∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
+

〈
i
j
〉

)

)





∏

l
∈

g

l

+





(
1
−

α

k
l



(
g
)

)



<




∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
)

)





∏

l
∈

g

j

+





(
1
−

α

k
l



(
g
+

〈
i
j
〉

)

)




, otherwise k experiences negative externalities.Proof.  From Lemma 8, it is required to increment in agent k’s closeness. It is straightforward to observe that





∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
+

〈
i
j
〉

)

)





∏

l
∈

g

l

+





(
1
−

α

k
l



(
g
)

)



<




∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
)

)





∏

l
∈

g

j

+





(
1
−

α

k
l



(
g
+

〈
i
j
〉

)

)




, then


γ
k


(
g
+

〈
i
j
〉

)

>

γ
k


(
g
)


. Thus, k experiences positive externalities.Conversely, let


γ
k


(
g
+

〈
i
j
〉

)

<

γ
k


(
g
)


, then either from Proposition 8,


d

k
i



(
g
)

=

d

k
i



(
g
+

〈
i
j
〉

)


, for all

i
∈
g

 or





∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
+

〈
i
j
〉

)

)





∏

l
∈

g

l

+





(
1
−

α

k
l



(
g
)

)



<




∏


k
¯

∈

g

i

+





(
1
−

α

k

k
¯




(
g
)

)





∏

l
∈

g

j

+





(
1
−

α

k
l



(
g
+

〈
i
j
〉

)

)




. ☐Lemma 8 and Theorem 4 show that an increase in the closeness of an agent (who is not involved in the link formation) is necessary in order for that agent to experience positive externalities. Although we have provided a necessary and sufficient condition for positive and negative externalities by performing a microscopic analysis of externalities, it is hard to obtain a general characterization of networks where agents experience only positive externalities. This leads us to the following question. At least for specific network structures, can we show positive (or negative) externalities? For instance, we can argue that in a two diameter network, agents never experience positive externalities. 4. Characterization of Stable and Efficient NetworksOne of the central focuses of this study is to analyze what network is likely to emerge when each agent (or pair of agents) decides selfishly which link they want to delete (respectively, whether to add a link or not), when agents build their social connections (links) based on the benefit associated with their data, the cost for link formation, and the prevailing data loss rate.In the following subsections, we discuss pairwise stable networks, efficient networks, and the measures of efficiency, namely, price of anarchy (PoA) and price of stability (PoS). In our analysis of stable and efficient networks, we assume that network formation takes place starting with the null network (where there are no links between any pair of agents). 4.1. Stable Networks: Characterization, Existence, and UniquenessWe now discuss the conditions under which an agent prefers to add a new link or delete an existing link, and use the same to characterize stable networks.Lemma 9. Let

〈
i
j
〉
∉
g

. An agent

i
∈
g

 is benefited by adding a direct link with agent

j
∈
g

 if and only if

β
λ
[

γ
i


(
g
+

〈
i
j
〉

)

−

γ
i


(
g
)

]
>
ς

.Proof.  Agent i has incentive to form a link with agent j if and only if


u
i


(
g
+

〈
i
j
〉

)

>

u
i


(
g
)





⇒

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
+

〈
i
j
〉

)

−
ς

(

η
i


(
g
)

+
1
)

>

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
)

−
ς

η
i


(
g
)





⇒
β
λ
[

γ
i


(
g
+

〈
i
j
〉

)

−

γ
i


(
g
)

]
>
ς

. ☐Corollary 1. An agent

i
∈
g

 has no incentive to add a link with agent

j
∈
g

 if and only if

λ

[

γ
i


(
g
+

〈
i
j
〉

)

−

γ
i


(
g
)

]

≤

ς
β


.Lemma 10. Let

〈
i
j
〉
∈
g

. An agent

i
∈
g

 benefits by deleting a link with agent j if and only if

β
λ
[

γ
i


(
g
)

−

γ
i


(
g
−

〈
i
j
〉

)

]
<
ς

.Proof.  An agent i has incentive to delete a link with agent j if and only if


u
i


(
g
−

〈
i
j
〉

)

>

u
i


(
g
)


.


⇒

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
−

〈
i
j
〉

)

−
ς

(

η
i


(
g
)

−
1
)

>

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
)

−
ς

η
i


(
g
)





⇒
ς
>
β
λ
[

γ
i


(
g
)

−

γ
i


(
g
−

〈
i
j
〉

)

]

. ☐Corollary 2. An agent i has no incentive to delete an existing link with agent j if and only if

λ

[

γ
i


(
g
)

−

γ
i


(
g
−

〈
i
j
〉

)

]

≥

ς
β


.Theorem 4, stated below, provides an easy characterization of a stable network
g
.Proposition 4. A network
g
 is pairwise stable if and only iffor all

i
,
j
∈
g
,
λ

[

γ
i


(
g
)

−

γ
i


(
g
−

〈
i
j
〉

)

]

≥

ς
β


, and

λ

[

γ
j


(
g
)

−

γ
j


(
g
−

〈
i
j
〉

)

]

≥

ς
β


; andfor all

i
,
j
∈
g
,

 if

λ

[

γ
i


(
g
+

〈
i
j
〉

)

−

γ
i


(
g
)

]

>

ς
β


, then

λ

[

γ
j


(
g
+

〈
i
j
〉

)

−

γ
j


(
g
)

]

<

ς
β


.Proof.  The proof follows from Definition 2, Corollary 2, and Lemma 9. ☐In the following theorem, we prove existence and uniqueness of pairwise stable networks, given the values of the parameters.Theorem 5. There always exists a pairwise stable network. Given N, there exists exactly two pairwise stable networks. For each

β
,
ς

, and λ,thepairwise stable network
g
 is unique.1.If

λ
≤

ς
β


, then
g
 is the null network.2.If

λ
>

ς
β


, then
g
 consists of(a)a set of

N
2

 connected pairs of agents, if N is even; or(b)a set of


N
−
1

2

 connected pairs of agents and one isolated agent, if N is odd.Proof.  Initially, all agents are isolated in
g
, hence, for all i∈
g
,


γ
i


(
g
)

=
0

.If agents i and j form a direct link

〈
i
j
〉

, then


Φ
i


(
g
+

〈
i
j
〉

)

=

Φ
j


(
g
+

〈
i
j
〉

)

=
1
.

Thus,


γ
i


(
g
+

〈
i
j
〉

)

=

γ
j


(
g
+

〈
i
j
〉

)

=
1

.However, from Lemma 9, agents i and j benefit by forming a direct link if and only if

λ
β
[

γ
i


(
g
+

〈
i
j
〉

)

−

γ
i


(
g
)

]
>
ς

 and

λ
β
[

γ
j


(
g
+

〈
i
j
〉

)

−

γ
j


(
g
)

]
>
ς

, respectively.This implies that a pair of agents have no incentive to add a direct link if and only if

λ
≤

ς
β


.Therefore,
g
 is the null network. This completes the proof of 1.Now, if

λ
>

ς
β


, then every pair of agents has an incentive to add a direct link. Suppose agents i and j add a direct link, and suppose link

〈
i
j
〉

 is the only link in the network, say

g
′

. Let k be another agent, different from i and j, in

g
′

. Then,


γ
i


(

g
′

+

〈
i
k
〉

)

=
1
−


(
1
−

1

1.5


)

2


.By Lemma 9, agent i benefits by adding the link

〈
i
k
〉

 if and only if

λ

[

γ
i


(

g
′

+

〈
i
k
〉

)

−

γ
i


(

g
′

)

]

>

ς
β


. Here,

λ

[

γ
i


(

g
′

+

〈
i
k
〉

)

−

γ
i


(

g
′

)

]

<
0
≯

ς
β


.This implies that no agent benefits by adding more than one link, proving 2. ☐ 4.2. Efficient Network, Price of Anarchy, and Price of StabilityWe analyze whether the network formed by self-interested agents is also efficient, that is, socially optimal or in other words, “good" for all the agents put together.Definition 7. A social storage network
g
 is efficient with respect to utility profile

(

u
1

,
.
.
.
,

u
N

)

 if



∑

i
∈
N




[

β
(
1
−
λ
)
+

β
λ

γ
i


(
g
)

−
ς

η
i


(
g
)

]

≥


∑

i
∈
N




[

β
(
1
−
λ
)
+

β
λ

γ
i


(

g
¯

)

−
ς

η
i


(

g
¯

)

]

,
∀

g
¯

∈
G

(
N
)


.It might be possible that when self-interested agents build their social connections for their own benefit, the resulting network formation will lead to a “bad” outcome from a societal viewpoint. That is, the resulting network may be advantageous for a set of agents, while other agents may not be benefited by the outcome. This results in an inefficient network. In this state of affairs, we would like to measure how far a pairwise stable network is from an efficient network. For this, we make use of the widely discussed measures, namely, price of anarchy (PoA) and price of stability (PoS). We define these measures as follows.Definition 8. The price of anarchy (PoA) is the ratio of the worst sum of the utility value of an equilibrium network and the optimal sum of the utility value in any network.Definition 9. The price of stability (PoS) is the ratio of the best sum of the utility value of an equilibrium network and the optimal sum of the utility value in any network.Theorem 6. Every pairwise stable network is efficient. Therefore, PoA = 1. In addition, every efficient network is pairwise stable. Hence, PoS = 1.Proof.  The proof follows from Theorem 5 and Definition 7, the fact that network formation starts with the null network, and the fact ([32]) that PoS = 1 if and only if every efficient network is pairwise stable, and PoA = 1 if and only if all pairwise stable networks are efficient.In Appendix D, we discuss our experimental results on random stable networks where, for 150 random scenarios, no agent loses its data. That is, even if the disk of an agent fails, in our random experiments, the disk of the agent’s neighbor (from whom it can retrieve its data) is intact. 5. ConclusionsIn this paper, we present the model of social storage cloud network formation, where agents (involved in storage sharing and data backup) wish to form a network strategically. The agents in this network strive for increasing the probability of obtaining storage space by minimizing the distances with others. We propose a degree-distance-based utility function and use the same to study network formation. We also study the impact of the decision of link addition (deletion) between a pair of agents on shortest distances, closeness, and storage availability.We study the deviation conditions under which agents have an incentive to add or delete a link in a given network structure. With these conditions, we analyze pairwise stability and efficiency of social storage cloud. We show that there always exist a unique pairwise stable network, which is also efficient. Hence, the price of anarchy and the price of stability are, both, one. 5.1. Research ImplicationsIn the social cloud literature, the issues of low service availability (for example, data and storage availability) and imbalanced workload (that lead to low storage utilization) are strongly correlated with the number of social contacts. The studies [33,34] show that the small friend set is a cause of low service availability as well as poor storage utilization. However, it is worth noting that these findings are drawn in the context of exogenous social contacts. We show that, for the given utility function in symmetric social storage, if agents are allowed to select their storage partners, then each agent wants to form a social connection with only one other agent, or in other words, each agent has only one neighbor. We infer that if agents select their partners by looking at their cost-benefit trade-offs, then the issues discussed above are more significant than in the context of exogenous social contacts.We believe that the analysis of storage availability and network formation performed by us have several advantages from the point of view of storage providers (for example, BuddyBackup, CrashPlan, Friendstore). The analysis of network stability may help design efficient strategies related to data redundancy that suggest how many data pieces are needed on the storage space provided by partners in order to achieve the required level of data availability. It also helps design efficient workload strategies to maximize storage utilization. One of the advantages of endogenous network formation is that it provides more control to agents on their data and in selecting their storage partners. Further, our approach of analysis of network stability is useful for the agents who are part of the Friendstore storage system—it is easy for them to calculate their maintainable capacity [2] so as to maximize their storage utilization and data reliability. 5.2. LimitationsDespite the above advantages and implications, our study has several limitations. Firstly, our social storage model stands on the assumption (similar to various network formation models [35,36,37,38]) that agents have complete information about the network structure. Though we do not require this assumption during network formation as, owing to Theorem 5, links form (at most) pairwise, this assumption is crucial for our analysis in Section 3 on closeness and distances. Secondly, although the proposed utility model captures various parameters essential for understanding social storage cloud formation, we cannot rule out that parameters like online availability of agents, trust between them, and the bandwidth they have may influence the network formation. 5.3. Future ScopeIn this paper, though the utility function we propose is for heterogeneous agents, our analysis is limited to homogeneous agents (or symmetric social storage cloud systems). In the case of heterogeneous agents, it would be interesting to see how externalities will influence social storage cloud formation. Our analysis of storage availability will also be more relevant in this setting.Further, we can enrich the utility model proposed in this paper by taking the above mentioned parameters (that is, online availability, bandwidth, and trust) into account. One can then study social storage cloud formation with both complete and incomplete information. For example, in the incomplete information setting, agents know neither the network structure nor the online availability and bandwidth of others. Analysis in this context will give more insight into social storage cloud formation.
