<rst>
<header>
	<relations>
			<rel name="elaboration" type="rst"/>
			<rel name="means" type="rst"/>
			<rel name="attribution" type="rst"/>
			<rel name="circumstance" type="rst"/>
			<rel name="purpose" type="rst"/>
			<rel name="restatement" type="rst"/>
			<rel name="preparation" type="rst"/>
			<rel name="sequence" type="multinuc"/>
			<rel name="same_unit" type="multinuc"/>
			<rel name="contrast" type="multinuc"/>
			<rel name="joint" type="multinuc"/>
		</relations>
</header>
<body>
<segment id="1" parent="1001" relname="preparation">2. Preliminaries</segment>
<segment id="2" parent="1001" relname="joint">2.1 .</segment>
<segment id="3" parent="1003" relname="preparation">Threat Model</segment>
<segment id="4" parent="1003" relname="joint">The current work places no limitations on the attacker .</segment>
<segment id="5" parent="1005" relname="contrast">Eavesdropping , injecting data into the communication stream</segment>
<segment id="6" parent="1005" relname="contrast">or stopping the stream itself are feasible .</segment>
<segment id="7" parent="1007" relname="span">Thus , for every route under her control ,</segment>
<segment id="8" parent="1009" relname="span">she can drop packets</segment>
<segment id="9" parent="8" relname="restatement">( dos )</segment>
<segment id="10" parent="1010" relname="span">or taint the data</segment>
<segment id="11" parent="10" relname="purpose">to initiate a mitm attack .</segment>
<segment id="12" parent="1013" relname="span">We allow attackers to collude ,</segment>
<segment id="13" parent="12" relname="elaboration">bringing under their joint control multiple routes .</segment>
<segment id="14" parent="1014" relname="joint">For simplicity ’s sake , we will refer to all of the colluding parties as one entity .</segment>
<segment id="15" parent="1014" relname="joint">2.2 .</segment>
<segment id="16" parent="1017" relname="span">Assumptions and Definitions</segment>
<segment id="17" parent="1019" relname="attribution">To allow for communication ,</segment>
<segment id="18" parent="1020" relname="span">the only prior knowledge</segment>
<segment id="19" parent="18" relname="elaboration">assumed</segment>
<segment id="20" parent="1019" relname="same_unit">is the address of both parties .</segment>
<segment id="21" parent="1023" relname="preparation">This address can be in any form :</segment>
<segment id="22" parent="1023" relname="span">ip address , unique imei</segment>
<segment id="23" parent="1024" relname="span">embedded in the device , or phone number</segment>
<segment id="24" parent="23" relname="elaboration">allocated to the smart node .</segment>
<segment id="25" parent="1027" relname="attribution">To avoid collisions , we assume</segment>
<segment id="26" parent="1027" relname="joint">that this address is unique</segment>
<segment id="27" parent="1027" relname="joint">and cannot be spoofed .</segment>
<segment id="28" parent="1029" relname="purpose">To justify this assumption ,</segment>
<segment id="29" parent="1030" relname="attribution">we note</segment>
<segment id="30" parent="1030" relname="span">that spoofing an address only influences some of the routing tables ;</segment>
<segment id="31" parent="30" relname="elaboration">not all of them .</segment>
<segment id="32" parent="1032" relname="span">This allows for the correct delivery of packets</segment>
<segment id="33" parent="32" relname="elaboration">not traveling through malicious nodes .</segment>
<segment id="34" parent="1035" relname="span">Last , no trusted third party</segment>
<segment id="35" parent="34" relname="restatement">( ttp )</segment>
<segment id="36" parent="1034" relname="same_unit">is available for the coordination or authentication of sender and receiver .</segment>
<segment id="37" parent="1037" relname="preparation">Definition 1.</segment>
<segment id="38" parent="1039" relname="span">Let be a topology graph of a manet at a specific time ,</segment>
<segment id="39" parent="38" relname="elaboration">where are the hosts in the network ,</segment>
<segment id="40" parent="1037" relname="joint">and are the bidirectional communication links between these hosts .</segment>
<segment id="41" parent="1042" relname="span">Let be a noncyclic route</segment>
<segment id="42" parent="41" relname="elaboration">( ) in G , between the sender</segment>
<segment id="43" parent="1043" relname="span">( ) and receiver</segment>
<segment id="44" parent="43" relname="elaboration">( ) .</segment>
<segment id="45" parent="1037" relname="joint">Let denote the length of the path .</segment>
<segment id="46" parent="1046" relname="span">Let denote the set of all possible such routes , the size of , and the set of chosen routes from ;</segment>
<segment id="47" parent="46" relname="elaboration">implying , .</segment>
<segment id="48" parent="1048" relname="span">Let , such that and , ,</segment>
<segment id="49" parent="48" relname="elaboration">which is under the attacker ’s control .</segment>
<segment id="50" parent="1050" relname="preparation">Let equal the size of A.</segment>
<segment id="51" parent="52" relname="attribution">In essence , we define</segment>
<segment id="52" parent="1051" relname="span">that it suffices for one host , , to come under the attacker ’s control for the entire route , , to be tainted .</segment>
<segment id="53" parent="1053" relname="preparation">Definition 2.</segment>
<segment id="54" parent="1054" relname="preparation">Let .</segment>
<segment id="55" parent="1055" relname="span">That is ,</segment>
<segment id="56" parent="1056" relname="span">denoting all the paths</segment>
<segment id="57" parent="56" relname="elaboration">not under the attacker ’s control .</segment>
<segment id="58" parent="1058" relname="span">Let be the size of F.</segment>
<segment id="59" parent="1060" relname="attribution">Based on the above definition , we assume</segment>
<segment id="60" parent="1060" relname="span">that the manet is such that ,</segment>
<segment id="61" parent="60" relname="elaboration">meaning that at least one route between the sender and receiver is not under the attacker ’s control .</segment>
<segment id="62" parent="1062" relname="span">That the attacker has not taken over the entire network ,</segment>
<segment id="63" parent="62" relname="elaboration">for which no leap of faith algorithms can succeed .</segment>
<segment id="64" parent="1061" relname="joint">2.3 .</segment>
<segment id="65" parent="1065" relname="span">Simulation Parameters</segment>
<segment id="66" parent="1067" relname="span">Prior to implementing our algorithm on a real-world manet application</segment>
<segment id="67" parent="66" relname="elaboration">( e. g. , Serval ) ,</segment>
<segment id="68" parent="1068" relname="span">we ran multiple preliminary simulations</segment>
<segment id="69" parent="68" relname="purpose">to test its feasibility .</segment>
<segment id="70" parent="1069" relname="joint">In this section , we describe our simulation model .</segment>
<segment id="71" parent="1070" relname="joint">2.3.1 .</segment>
<segment id="72" parent="1072" relname="preparation">Random Number Generator</segment>
<segment id="73" parent="1073" relname="span">All simulations must have the means</segment>
<segment id="74" parent="73" relname="elaboration">of generating random data .</segment>
<segment id="75" parent="1075" relname="preparation">Of the many algorithms</segment>
<segment id="76" parent="1076" relname="span">available</segment>
<segment id="77" parent="76" relname="elaboration">( e. g. , Mersenne Twister ) ,</segment>
<segment id="78" parent="1079" relname="span">we chose the combined multiple recursive random number generator</segment>
<segment id="79" parent="78" relname="restatement">( cmrg )</segment>
<segment id="80" parent="1078" relname="same_unit">algorithm ,</segment>
<segment id="81" parent="1080" relname="span">an algorithm</segment>
<segment id="82" parent="1081" relname="joint">that passed a wide range of empirical tests of randomness</segment>
<segment id="83" parent="1084" relname="span">and is the algorithm of choice in many simulation software</segment>
<segment id="84" parent="83" relname="elaboration">( e. g. , Arena ) .</segment>
<segment id="85" parent="1085" relname="span">Of course , similar results should be achieved</segment>
<segment id="86" parent="85" relname="means">using all good random number generators .</segment>
<segment id="87" parent="1086" relname="joint">2.3.2 .</segment>
<segment id="88" parent="1088" relname="preparation">Mobility Model</segment>
<segment id="89" parent="1089" relname="preparation">The mobility of nodes in the real world exhibits vastly varying behaviors .</segment>
<segment id="90" parent="91" relname="attribution">Some walk ,</segment>
<segment id="91" parent="1090" relname="span">others drive .</segment>
<segment id="92" parent="1092" relname="joint">Some move about randomly ,</segment>
<segment id="93" parent="1092" relname="joint">others in specific formations or patterns .</segment>
<segment id="94" parent="1094" relname="joint">Each of these have their own characteristics ,</segment>
<segment id="95" parent="1095" relname="span">and must be modelled accordingly</segment>
<segment id="96" parent="95" relname="elaboration">( for a survey see ) .</segment>
<segment id="97" parent="1097" relname="span">Due to its prevalence</segment>
<segment id="98" parent="97" relname="elaboration">( see , e. g. , ) ,</segment>
<segment id="99" parent="1100" relname="span">in this work , all simulations followed a random walk model ,</segment>
<segment id="100" parent="99" relname="elaboration">which captures the pattern of people in open spaces or recreational parks .</segment>
<segment id="101" parent="1102" relname="joint">We leave other models to future research .</segment>
<segment id="102" parent="1103" relname="span">2.3.3 .</segment>
<segment id="103" parent="1104" relname="span">Routing Algorithm</segment>
<segment id="104" parent="1106" relname="span">Network simulation requires that one choose the means</segment>
<segment id="105" parent="104" relname="elaboration">by which packets are forwarded on the path to the destination .</segment>
<segment id="106" parent="1107" relname="span">Being the basis behind ospf ,</segment>
<segment id="107" parent="1109" relname="span">implementation of the Dijkstra graph theory best route algorithm</segment>
<segment id="108" parent="107" relname="means">using standard dynamic programming techniques ,</segment>
<segment id="109" parent="1110" relname="span">allows us to find the optimal</segment>
<segment id="110" parent="109" relname="elaboration">( shortest ) route .</segment>
<segment id="111" parent="1111" relname="joint">We randomly chose between multiple paths</segment>
<segment id="112" parent="1112" relname="joint">having similar lengths ,</segment>
<segment id="113" parent="1112" relname="joint">classifying one as the better of the bunch .</segment>
<segment id="114" parent="1114" relname="span">All packets were sent through optimal paths</segment>
<segment id="115" parent="114" relname="circumstance">when possible .</segment>
<segment id="116" parent="1115" relname="joint">2.3.4 .</segment>
<segment id="117" parent="1117" relname="preparation">Attacker Dispersion</segment>
<segment id="118" parent="1118" relname="span">Attackers are randomly placed on the graph ,</segment>
<segment id="119" parent="118" relname="elaboration">allowing for all possible attacker dispersion scenarios .</segment>
<segment id="120" parent="1121" relname="span">The number of attackers are a function of the size of the population ,</segment>
<segment id="121" parent="120" relname="elaboration">with a linear increase in the population entailing a similar increase in the number of attackers .</segment>
<segment id="122" parent="1122" relname="span">These attackers are assumed</segment>
<segment id="123" parent="122" relname="elaboration">colluding .</segment>
<segment id="124" parent="1124" relname="span">Knowledge gleaned by one attacker</segment>
<segment id="125" parent="1125" relname="joint">( e. g. , intercept of a micro-ke message )</segment>
<segment id="126" parent="1125" relname="joint">and/or spoofing requirements are instantly shared with all others through external means .</segment>
<segment id="127" parent="1126" relname="joint">2.3.5 .</segment>
<segment id="128" parent="1128" relname="preparation">Simulation Round</segment>
<segment id="129" parent="1130" relname="span">Each round was preset with a specific combination of parameters</segment>
<segment id="130" parent="129" relname="elaboration">that we are checking for</segment>
<segment id="131" parent="1130" relname="elaboration">( see Section 3.3 and Section 4.2 ) .</segment>
<segment id="132" parent="1133" relname="span">Next , we randomly chose some of the nodes in the network</segment>
<segment id="133" parent="132" relname="purpose">to represent colluding attackers ;</segment>
<segment id="134" parent="1132" relname="same_unit">their specific number a function of predetermined parameter .</segment>
<segment id="135" parent="1135" relname="span">Last , assuming there is a connection between sender and receiver , ,</segment>
<segment id="136" parent="1136" relname="span">we sprayed the k micro-ke messages</segment>
<segment id="137" parent="136" relname="elaboration">documenting whether all , none , or some of the messages were intercepted .</segment>
<segment id="138" parent="1138" relname="preparation">Rounds for which , were discarded .</segment>
<segment id="139" parent="1139" relname="span">The actual spraying algorithm was done</segment>
<segment id="140" parent="1140" relname="span">using either random message spraying or even message spraying algorithm</segment>
<segment id="141" parent="140" relname="elaboration">( see Section 3.2 ) .</segment>
<segment id="142" parent="1141" relname="span">Both techniques were executed on the same network graph</segment>
<segment id="143" parent="142" relname="purpose">so we can get comparable results .</segment>
<group id="1000" type="span" />
<group id="1001" type="multinuc" parent="1000" relname="span"/>
<group id="1002" type="span" parent="1001" relname="joint"/>
<group id="1003" type="multinuc" parent="1002" relname="span"/>
<group id="1005" type="multinuc" parent="1003" relname="joint"/>
<group id="1007" type="span" parent="1003" relname="joint"/>
<group id="1008" type="multinuc" parent="7" relname="elaboration"/>
<group id="1009" type="span" parent="1008" relname="contrast"/>
<group id="1010" type="span" parent="1008" relname="contrast"/>
<group id="1011" type="multinuc" parent="1003" relname="joint"/>
<group id="1013" type="span" parent="1011" relname="sequence"/>
<group id="1014" type="multinuc" parent="1011" relname="sequence"/>
<group id="1016" type="multinuc" parent="1014" relname="joint"/>
<group id="1017" type="span" parent="1016" relname="sequence"/>
<group id="1018" type="span" parent="16" relname="purpose"/>
<group id="1019" type="multinuc" parent="1018" relname="span"/>
<group id="1020" type="span" parent="1019" relname="same_unit"/>
<group id="1021" type="span" parent="1016" relname="sequence"/>
<group id="1022" type="span" parent="1021" relname="span"/>
<group id="1023" type="span" parent="1022" relname="span"/>
<group id="1024" type="span" parent="22" relname="elaboration"/>
<group id="1025" type="span" parent="1022" relname="elaboration"/>
<group id="1026" type="span" parent="1025" relname="span"/>
<group id="1027" type="multinuc" parent="1026" relname="span"/>
<group id="1028" type="span" parent="1026" relname="purpose"/>
<group id="1029" type="span" parent="1028" relname="span"/>
<group id="1030" type="span" parent="1029" relname="span"/>
<group id="1031" type="multinuc" parent="1011" relname="sequence"/>
<group id="1032" type="span" parent="1031" relname="joint"/>
<group id="1034" type="multinuc" parent="1031" relname="joint"/>
<group id="1035" type="span" parent="1034" relname="same_unit"/>
<group id="1036" type="span" parent="1031" relname="joint"/>
<group id="1037" type="multinuc" parent="1036" relname="span"/>
<group id="1039" type="span" parent="1037" relname="joint"/>
<group id="1041" type="span" parent="1037" relname="joint"/>
<group id="1042" type="span" parent="1041" relname="span"/>
<group id="1043" type="span" parent="1042" relname="elaboration"/>
<group id="1046" type="span" parent="1037" relname="joint"/>
<group id="1048" type="span" parent="1037" relname="joint"/>
<group id="1049" type="span" parent="1037" relname="joint"/>
<group id="1050" type="multinuc" parent="1049" relname="span"/>
<group id="1051" type="span" parent="1050" relname="joint"/>
<group id="1052" type="span" parent="1050" relname="joint"/>
<group id="1053" type="span" parent="1052" relname="span"/>
<group id="1054" type="multinuc" parent="1053" relname="span"/>
<group id="1055" type="span" parent="1054" relname="joint"/>
<group id="1056" type="span" parent="55" relname="elaboration"/>
<group id="1057" type="multinuc" parent="1054" relname="joint"/>
<group id="1058" type="span" parent="1057" relname="sequence"/>
<group id="1059" type="span" parent="58" relname="elaboration"/>
<group id="1060" type="span" parent="1059" relname="span"/>
<group id="1061" type="multinuc" parent="1057" relname="sequence"/>
<group id="1062" type="span" parent="1061" relname="joint"/>
<group id="1064" type="span" parent="1061" relname="joint"/>
<group id="1065" type="span" parent="1064" relname="span"/>
<group id="1066" type="multinuc" parent="65" relname="elaboration"/>
<group id="1067" type="span" parent="1066" relname="same_unit"/>
<group id="1068" type="span" parent="1066" relname="same_unit"/>
<group id="1069" type="multinuc" parent="1065" relname="elaboration"/>
<group id="1070" type="multinuc" parent="1069" relname="joint"/>
<group id="1071" type="span" parent="1070" relname="joint"/>
<group id="1072" type="span" parent="1071" relname="span"/>
<group id="1073" type="span" parent="1072" relname="span"/>
<group id="1074" type="span" parent="1073" relname="elaboration"/>
<group id="1075" type="span" parent="1074" relname="span"/>
<group id="1076" type="span" parent="1077" relname="preparation"/>
<group id="1077" type="span" parent="1075" relname="span"/>
<group id="1078" type="multinuc" parent="1080" relname="preparation"/>
<group id="1079" type="span" parent="1078" relname="same_unit"/>
<group id="1080" type="span" parent="1077" relname="span"/>
<group id="1081" type="multinuc" parent="81" relname="elaboration"/>
<group id="1082" type="multinuc" parent="1081" relname="joint"/>
<group id="1083" type="span" parent="1082" relname="joint"/>
<group id="1084" type="span" parent="1083" relname="span"/>
<group id="1085" type="span" parent="1084" relname="elaboration"/>
<group id="1086" type="multinuc" parent="1082" relname="joint"/>
<group id="1087" type="span" parent="1086" relname="joint"/>
<group id="1088" type="span" parent="1087" relname="span"/>
<group id="1089" type="multinuc" parent="1088" relname="span"/>
<group id="1090" type="span" parent="1089" relname="joint"/>
<group id="1091" type="multinuc" parent="1089" relname="joint"/>
<group id="1092" type="multinuc" parent="1091" relname="joint"/>
<group id="1093" type="multinuc" parent="1091" relname="joint"/>
<group id="1094" type="multinuc" parent="1093" relname="joint"/>
<group id="1095" type="span" parent="1094" relname="joint"/>
<group id="1096" type="span" parent="1093" relname="joint"/>
<group id="1097" type="span" parent="1098" relname="preparation"/>
<group id="1098" type="multinuc" parent="1096" relname="span"/>
<group id="1099" type="multinuc" parent="1098" relname="joint"/>
<group id="1100" type="span" parent="1099" relname="joint"/>
<group id="1101" type="multinuc" parent="1099" relname="joint"/>
<group id="1102" type="multinuc" parent="1101" relname="joint"/>
<group id="1103" type="span" parent="1102" relname="joint"/>
<group id="1104" type="span" parent="102" relname="elaboration"/>
<group id="1105" type="span" parent="103" relname="elaboration"/>
<group id="1106" type="span" parent="1105" relname="span"/>
<group id="1107" type="span" parent="1106" relname="elaboration"/>
<group id="1108" type="multinuc" parent="106" relname="elaboration"/>
<group id="1109" type="span" parent="1108" relname="same_unit"/>
<group id="1110" type="span" parent="1108" relname="same_unit"/>
<group id="1111" type="multinuc" parent="1101" relname="joint"/>
<group id="1112" type="multinuc" parent="1111" relname="joint"/>
<group id="1113" type="multinuc" parent="1098" relname="joint"/>
<group id="1114" type="span" parent="1113" relname="joint"/>
<group id="1115" type="multinuc" parent="1113" relname="joint"/>
<group id="1116" type="span" parent="1115" relname="joint"/>
<group id="1117" type="multinuc" parent="1116" relname="span"/>
<group id="1118" type="span" parent="1117" relname="joint"/>
<group id="1119" type="multinuc" parent="1117" relname="joint"/>
<group id="1120" type="span" parent="1119" relname="joint"/>
<group id="1121" type="span" parent="1120" relname="span"/>
<group id="1122" type="span" parent="1121" relname="elaboration"/>
<group id="1123" type="multinuc" parent="1119" relname="joint"/>
<group id="1124" type="span" parent="1123" relname="joint"/>
<group id="1125" type="multinuc" parent="124" relname="elaboration"/>
<group id="1126" type="multinuc" parent="1123" relname="joint"/>
<group id="1127" type="span" parent="1126" relname="joint"/>
<group id="1128" type="multinuc" parent="1127" relname="span"/>
<group id="1129" type="span" parent="1128" relname="joint"/>
<group id="1130" type="span" parent="1129" relname="span"/>
<group id="1131" type="multinuc" parent="1128" relname="joint"/>
<group id="1132" type="multinuc" parent="1131" relname="joint"/>
<group id="1133" type="span" parent="1132" relname="same_unit"/>
<group id="1134" type="multinuc" parent="1131" relname="joint"/>
<group id="1135" type="span" parent="1134" relname="joint"/>
<group id="1136" type="span" parent="135" relname="elaboration"/>
<group id="1137" type="span" parent="1134" relname="joint"/>
<group id="1138" type="multinuc" parent="1137" relname="span"/>
<group id="1139" type="span" parent="1138" relname="joint"/>
<group id="1140" type="span" parent="139" relname="means"/>
<group id="1141" type="span" parent="1138" relname="joint"/>
	</body>
</rst>
