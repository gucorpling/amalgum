<rst>
<header>
	<relations>
			<rel name="elaboration" type="rst"/>
			<rel name="means" type="rst"/>
			<rel name="attribution" type="rst"/>
			<rel name="circumstance" type="rst"/>
			<rel name="condition" type="rst"/>
			<rel name="concession" type="rst"/>
			<rel name="purpose" type="rst"/>
			<rel name="cause" type="rst"/>
			<rel name="restatement" type="rst"/>
			<rel name="evidence" type="rst"/>
			<rel name="evaluation" type="rst"/>
			<rel name="preparation" type="rst"/>
			<rel name="sequence" type="multinuc"/>
			<rel name="same_unit" type="multinuc"/>
			<rel name="joint" type="multinuc"/>
		</relations>
</header>
<body>
<segment id="1" parent="1001" relname="preparation">2. Laplacian Graph Embedding</segment>
<segment id="2" parent="1002" relname="preparation">2.1 .</segment>
<segment id="3" parent="1003" relname="preparation">One-dimensional Embedding</segment>
<segment id="4" parent="1004" relname="preparation">In this paper , we assume an undirected and connected graph .</segment>
<segment id="5" parent="1004" relname="joint">The graph is represented by sets of vertices and edges .</segment>
<segment id="6" parent="7" relname="circumstance">Given a weighted graph ,</segment>
<segment id="7" parent="1006" relname="span">edge weights are represented as a weight matrix .</segment>
<segment id="8" parent="1010" relname="span">One-dimensional graph embedding finds a configuration of embedded vertices in one-dimensional space ,</segment>
<segment id="9" parent="8" relname="elaboration">such that the vertices ’ proximities from the edge weights are preserved as the embedded vertices ’ distances .</segment>
<segment id="10" parent="11" relname="attribution">Assuming each entry of a column vector as coordinates of the embedded vertices ,</segment>
<segment id="11" parent="1012" relname="span">this problem can be solved through minimization of the following objective function .</segment>
<segment id="12" parent="1012" relname="evidence">( 1 )</segment>
<segment id="13" parent="1013" relname="span">This function could be minimized</segment>
<segment id="14" parent="15" relname="circumstance">when vertices i and j with large are embedded at close coordinates ,</segment>
<segment id="15" parent="1014" relname="span">whereas vertices with small are embedded into distant coordinates .</segment>
<segment id="16" parent="1016" relname="preparation">In this study , this mathematical property is applied as follows :</segment>
<segment id="17" parent="1018" relname="span">feature classes</segment>
<segment id="18" parent="17" relname="elaboration">( e. g. , land-use category and record )</segment>
<segment id="19" parent="1019" relname="joint">with a greater degree of object sharing have close coordinates in their embedding space</segment>
<segment id="20" parent="1019" relname="joint">and feature classes with a lesser degree of object sharing have distant coordinates .</segment>
<segment id="21" parent="1024" relname="span">Equation</segment>
<segment id="22" parent="21" relname="elaboration">( 1 )</segment>
<segment id="23" parent="1023" relname="same_unit">can be expressed in a matrix operation form with a Laplacian matrix ,</segment>
<segment id="24" parent="1025" relname="span">and can be represented as Equation ( 2 ) .</segment>
<segment id="25" parent="1026" relname="span">( 2 )</segment>
<segment id="26" parent="1028" relname="span">where , the Laplacian matrix is defined as Equation</segment>
<segment id="27" parent="26" relname="restatement">( 3 )</segment>
<segment id="28" parent="1029" relname="span">with a vertex degree matrix</segment>
<segment id="29" parent="28" relname="elaboration">whose diagonal entries are obtained</segment>
<segment id="30" parent="1030" relname="joint">as</segment>
<segment id="31" parent="1031" relname="span">and the remaining entries are 0 .</segment>
<segment id="32" parent="31" relname="evidence">( 3 )</segment>
<segment id="33" parent="1034" relname="span">Now , the problem can be changed</segment>
<segment id="34" parent="1035" relname="span">to find a vector</segment>
<segment id="35" parent="34" relname="elaboration">that minimizes ,</segment>
<segment id="36" parent="1037" relname="span">and can be represented as Equation</segment>
<segment id="37" parent="36" relname="restatement">( 4 ) .</segment>
<segment id="38" parent="1037" relname="evidence">( 4 )</segment>
<segment id="39" parent="1040" relname="concession">Since the value of is vulnerable to the scaling of a vector ,</segment>
<segment id="40" parent="1040" relname="span">a constraint is imposed</segment>
<segment id="41" parent="40" relname="purpose">to remove any such arbitrary scaling effect .</segment>
<segment id="42" parent="1042" relname="span">The diagonal matrix provides weights on the vertices ,</segment>
<segment id="43" parent="44" relname="condition">so that the higher is ,</segment>
<segment id="44" parent="1043" relname="span">the more important is that vertex .</segment>
<segment id="45" parent="1046" relname="span">Equation</segment>
<segment id="46" parent="45" relname="elaboration">( 4 )</segment>
<segment id="47" parent="1051" relname="span">with the constraint can be solved by the Lagrange multiplier method as in Equations</segment>
<segment id="48" parent="47" relname="elaboration">( 5 ) –</segment>
<segment id="49" parent="1051" relname="evidence">( 7 ) .</segment>
<segment id="50" parent="1050" relname="restatement">( 5 )</segment>
<segment id="51" parent="1049" relname="restatement">( 6 )</segment>
<segment id="52" parent="1048" relname="evidence">( 7 )</segment>
<segment id="53" parent="1053" relname="same_unit">Thus , the solution of one-dimensional embedding , ,</segment>
<segment id="54" parent="1054" relname="span">is obtained</segment>
<segment id="55" parent="54" relname="means">by solving the eigenproblem .</segment>
<segment id="56" parent="1055" relname="joint">However , according to the rank of matrix , there could be more than one eigenvector .</segment>
<segment id="57" parent="1059" relname="span">In the field of graph spectral theory , the eigenvector</segment>
<segment id="58" parent="57" relname="elaboration">corresponding to the smallest eigenvalue larger than 0</segment>
<segment id="59" parent="1058" relname="same_unit">is the proven solution ,</segment>
<segment id="60" parent="1058" relname="elaboration">which is called a Fiedler vector .</segment>
<segment id="61" parent="1061" relname="span">Thus , the coordinates of vertices in one-dimensional embedding are obtained as components of the Fiedler vector</segment>
<segment id="62" parent="1062" relname="span">as represented by Equation</segment>
<segment id="63" parent="62" relname="elaboration">( 7 ) .</segment>
<segment id="64" parent="1064" relname="preparation">2.2 . k-dimensional Embedding</segment>
<segment id="65" parent="1065" relname="preparation">Now , consider k-dimensional graph embedding .</segment>
<segment id="66" parent="1066" relname="span">These embedded coordinates are represented as an matrix ,</segment>
<segment id="67" parent="66" relname="purpose">so that the i th row of , , contains the k-dimensional coordinates of vertex .</segment>
<segment id="68" parent="1069" relname="span">Now , an objective function is defined as Equation</segment>
<segment id="69" parent="68" relname="evidence">( 8 )</segment>
<segment id="70" parent="1070" relname="span">with the constraint , .</segment>
<segment id="71" parent="70" relname="elaboration">( 8 )</segment>
<segment id="72" parent="73" relname="attribution">Sameh and Wisniewski proved</segment>
<segment id="73" parent="1072" relname="span">that the solution to this trace minimization problem is obtained by the k-eigenvectors of that correspond to its smallest eigenvalues other than 0 .</segment>
<segment id="74" parent="1075" relname="span">Thus , the solution of Equation</segment>
<segment id="75" parent="74" relname="restatement">( 8 )</segment>
<segment id="76" parent="1074" relname="same_unit">is obtained by a matrix ,</segment>
<segment id="77" parent="1077" relname="span">where represents an eigenvector</segment>
<segment id="78" parent="77" relname="elaboration">corresponding to eigenvalue under the condition .</segment>
<segment id="79" parent="1078" relname="sequence">However , the constraint normalizes the scales of the coordinates in each dimension .</segment>
<segment id="80" parent="1080" relname="span">Thus , it is necessary to rescale them</segment>
<segment id="81" parent="80" relname="elaboration">according to each dimension ’s relative importance .</segment>
<segment id="82" parent="1082" relname="attribution">Sameh and Wisniewski also proved</segment>
<segment id="83" parent="1084" relname="span">that the minimum value of in Equation</segment>
<segment id="84" parent="83" relname="elaboration">( 8 )</segment>
<segment id="85" parent="1083" relname="same_unit">equals the sum of the corresponding eigenvalues ,</segment>
<segment id="86" parent="1087" relname="span">as shown by Equation</segment>
<segment id="87" parent="86" relname="evidence">( 9 ) .</segment>
<segment id="88" parent="1087" relname="evidence">( 9 )</segment>
<segment id="89" parent="1089" relname="span">Accordingly , we can assume the eigenvalue as the amount of either the penalty or the cost</segment>
<segment id="90" parent="89" relname="elaboration">caused by the i th dimensional space in the embedding problem .</segment>
<segment id="91" parent="1090" relname="span">So , when , it is appropriate to apply more weight to than in measuring the proximity for a clustering analysis .</segment>
<segment id="92" parent="1092" relname="span">Based on these mathematical properties , we determined the embedded coordinates as Equation</segment>
<segment id="93" parent="92" relname="restatement">( 10 ) ,</segment>
<segment id="94" parent="1093" relname="span">because the increase in distance is proportional to that of the root-squared coordinate difference .</segment>
<segment id="95" parent="94" relname="elaboration">( 10 )</segment>
<group id="1000" type="span" />
<group id="1001" type="span" parent="1000" relname="span"/>
<group id="1002" type="span" parent="1001" relname="span"/>
<group id="1003" type="span" parent="1002" relname="span"/>
<group id="1004" type="multinuc" parent="1003" relname="span"/>
<group id="1006" type="span" parent="1004" relname="joint"/>
<group id="1008" type="span" parent="1004" relname="joint"/>
<group id="1009" type="span" parent="1008" relname="span"/>
<group id="1010" type="span" parent="1009" relname="span"/>
<group id="1011" type="span" parent="1010" relname="elaboration"/>
<group id="1012" type="span" parent="1011" relname="span"/>
<group id="1013" type="span" parent="1009" relname="evaluation"/>
<group id="1014" type="span" parent="13" relname="circumstance"/>
<group id="1015" type="span" parent="1004" relname="joint"/>
<group id="1016" type="multinuc" parent="1015" relname="span"/>
<group id="1017" type="multinuc" parent="1016" relname="joint"/>
<group id="1018" type="span" parent="1017" relname="same_unit"/>
<group id="1019" type="multinuc" parent="1017" relname="same_unit"/>
<group id="1021" type="span" parent="1016" relname="joint"/>
<group id="1022" type="multinuc" parent="1021" relname="span"/>
<group id="1023" type="multinuc" parent="1022" relname="joint"/>
<group id="1024" type="span" parent="1023" relname="same_unit"/>
<group id="1025" type="span" parent="1022" relname="joint"/>
<group id="1026" type="span" parent="24" relname="elaboration"/>
<group id="1027" type="multinuc" parent="25" relname="elaboration"/>
<group id="1028" type="span" parent="1027" relname="same_unit"/>
<group id="1029" type="span" parent="1027" relname="same_unit"/>
<group id="1030" type="multinuc" parent="1022" relname="circumstance"/>
<group id="1031" type="span" parent="1030" relname="joint"/>
<group id="1034" type="span" parent="1016" relname="joint"/>
<group id="1035" type="span" parent="33" relname="purpose"/>
<group id="1036" type="span" parent="1016" relname="joint"/>
<group id="1037" type="span" parent="1036" relname="span"/>
<group id="1038" type="span" parent="1016" relname="joint"/>
<group id="1039" type="span" parent="1041" relname="preparation"/>
<group id="1040" type="span" parent="1039" relname="span"/>
<group id="1041" type="multinuc" parent="1038" relname="span"/>
<group id="1042" type="span" parent="1041" relname="joint"/>
<group id="1043" type="span" parent="42" relname="purpose"/>
<group id="1045" type="multinuc" parent="1041" relname="joint"/>
<group id="1046" type="span" parent="1045" relname="same_unit"/>
<group id="1047" type="span" parent="1045" relname="same_unit"/>
<group id="1048" type="span" parent="1047" relname="span"/>
<group id="1049" type="span" parent="1048" relname="span"/>
<group id="1050" type="span" parent="1049" relname="span"/>
<group id="1051" type="span" parent="1050" relname="span"/>
<group id="1052" type="multinuc" parent="1041" relname="joint"/>
<group id="1053" type="multinuc" parent="1052" relname="sequence"/>
<group id="1054" type="span" parent="1053" relname="same_unit"/>
<group id="1055" type="multinuc" parent="1052" relname="sequence"/>
<group id="1057" type="span" parent="1055" relname="joint"/>
<group id="1058" type="multinuc" parent="1057" relname="span"/>
<group id="1059" type="span" parent="1058" relname="same_unit"/>
<group id="1061" type="span" parent="1055" relname="joint"/>
<group id="1062" type="span" parent="61" relname="elaboration"/>
<group id="1063" type="span" parent="1055" relname="joint"/>
<group id="1064" type="span" parent="1063" relname="span"/>
<group id="1065" type="multinuc" parent="1064" relname="span"/>
<group id="1066" type="span" parent="1065" relname="joint"/>
<group id="1067" type="multinuc" parent="1065" relname="joint"/>
<group id="1068" type="multinuc" parent="1067" relname="sequence"/>
<group id="1069" type="span" parent="1068" relname="same_unit"/>
<group id="1070" type="span" parent="1068" relname="same_unit"/>
<group id="1071" type="multinuc" parent="1067" relname="sequence"/>
<group id="1072" type="span" parent="1071" relname="joint"/>
<group id="1073" type="span" parent="1071" relname="joint"/>
<group id="1074" type="multinuc" parent="1076" relname="preparation"/>
<group id="1075" type="span" parent="1074" relname="same_unit"/>
<group id="1076" type="multinuc" parent="1073" relname="span"/>
<group id="1077" type="span" parent="1076" relname="joint"/>
<group id="1078" type="multinuc" parent="1076" relname="joint"/>
<group id="1079" type="multinuc" parent="1078" relname="sequence"/>
<group id="1080" type="span" parent="1079" relname="joint"/>
<group id="1081" type="span" parent="1079" relname="joint"/>
<group id="1082" type="multinuc" parent="1081" relname="span"/>
<group id="1083" type="multinuc" parent="1082" relname="joint"/>
<group id="1084" type="span" parent="1083" relname="same_unit"/>
<group id="1086" type="span" parent="1082" relname="joint"/>
<group id="1087" type="span" parent="1086" relname="span"/>
<group id="1089" type="span" parent="1082" relname="joint"/>
<group id="1090" type="span" parent="1082" relname="joint"/>
<group id="1091" type="span" parent="91" relname="elaboration"/>
<group id="1092" type="span" parent="1091" relname="span"/>
<group id="1093" type="span" parent="1092" relname="cause"/>
	</body>
</rst>
