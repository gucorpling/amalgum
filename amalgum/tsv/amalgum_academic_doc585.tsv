#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Referent|entity|infstat
#T_RL=webanno.custom.Coref|type|BT_webanno.custom.Referent


#Text=2. Related Work
1-1	0-2	2.	_	_	_	_
1-2	3-10	Related	abstract[1]	new[1]	_	_
1-3	11-15	Work	abstract[1]	new[1]	_	_

#Text=Two important techniques are used in our proposed method : absolute moment block truncation coding ( AMBTC ) compression and matrix coding .
2-1	16-19	Two	abstract[2]	new[2]	coref	3-1[12_2]
2-2	20-29	important	abstract[2]	new[2]	_	_
2-3	30-40	techniques	abstract[2]	new[2]	_	_
2-4	41-44	are	_	_	_	_
2-5	45-49	used	_	_	_	_
2-6	50-52	in	_	_	_	_
2-7	53-56	our	person|abstract[4]	acc|new[4]	appos	2-11[8_4]
2-8	57-65	proposed	abstract[4]	new[4]	_	_
2-9	66-72	method	abstract[4]	new[4]	_	_
2-10	73-74	:	_	_	_	_
2-11	75-83	absolute	abstract[8]	giv[8]	appos	2-19[10_8]
2-12	84-90	moment	event|abstract[8]	new|giv[8]	coref	5-1[16_0]
2-13	91-96	block	object|abstract[8]	new|giv[8]	coref	6-12
2-14	97-107	truncation	place|abstract[8]	new|giv[8]	coref	5-4
2-15	108-114	coding	abstract[8]	giv[8]	_	_
2-16	115-116	(	_	_	_	_
2-17	117-122	AMBTC	object	new	coref	5-7
2-18	123-124	)	_	_	_	_
2-19	125-136	compression	abstract[10]	giv[10]	coref	5-1[19_10]
2-20	137-140	and	abstract[10]	giv[10]	_	_
2-21	141-147	matrix	abstract[10]|abstract	giv[10]|new	coref	17-1
2-22	148-154	coding	abstract[10]	giv[10]	_	_
2-23	155-156	.	_	_	_	_

#Text=These techniques are briefly introduced in Section 2.1 and Section 2.2 , respectively .
3-1	157-162	These	abstract[12]	giv[12]	_	_
3-2	163-173	techniques	abstract[12]	giv[12]	_	_
3-3	174-177	are	_	_	_	_
3-4	178-185	briefly	_	_	_	_
3-5	186-196	introduced	_	_	_	_
3-6	197-199	in	_	_	_	_
3-7	200-207	Section	abstract[13]	new[13]	coref	3-10[14_13]
3-8	208-211	2.1	abstract[13]	new[13]	_	_
3-9	212-215	and	_	_	_	_
3-10	216-223	Section	abstract[14]	giv[14]	_	_
3-11	224-227	2.2	abstract[14]	giv[14]	_	_
3-12	228-229	,	_	_	_	_
3-13	230-242	respectively	_	_	_	_
3-14	243-244	.	_	_	_	_

#Text=2.1 .
4-1	245-248	2.1	abstract	new	_	_
4-2	249-250	.	_	_	_	_

#Text=Absolute Moment Block Truncation Coding ( AMBTC )
5-1	251-259	Absolute	event[16]|abstract[19]	giv[16]|giv[19]	coref|coref	6-9[0_19]|8-23[0_16]
5-2	260-266	Moment	event[16]|abstract[19]	giv[16]|giv[19]	_	_
5-3	267-272	Block	person|abstract[19]	new|giv[19]	_	_
5-4	273-283	Truncation	abstract|abstract[19]	giv|giv[19]	coref	6-13
5-5	284-290	Coding	abstract[19]	giv[19]	_	_
5-6	291-292	(	abstract[19]	giv[19]	_	_
5-7	293-298	AMBTC	abstract[19]|object	giv[19]|giv	coref	8-28
5-8	299-300	)	abstract[19]	giv[19]	_	_

#Text=In 1979 , an efficient block-based lossy image compression technique named block truncation coding ( BTC ) was proposed by Delp and Mitchell .
6-1	301-303	In	_	_	_	_
6-2	304-308	1979	time	new	_	_
6-3	309-310	,	_	_	_	_
6-4	311-313	an	object[23]|abstract[25]	new[23]|new[25]	coref|coref	7-7[33_23]|8-6[43_25]
6-5	314-323	efficient	object[23]|abstract[25]	new[23]|new[25]	_	_
6-6	324-335	block-based	object[23]|abstract[25]	new[23]|new[25]	_	_
6-7	336-341	lossy	place|object[23]|abstract[25]	new|new[23]|new[25]	_	_
6-8	342-347	image	object[23]|abstract[25]	new[23]|new[25]	_	_
6-9	348-359	compression	event|abstract[25]	giv|new[25]	coref	6-12[28_0]
6-10	360-369	technique	abstract[25]	new[25]	_	_
6-11	370-375	named	_	_	_	_
6-12	376-381	block	object|abstract[28]	giv|giv[28]	coref|coref	7-5[0_28]|7-26[40_0]
6-13	382-392	truncation	place|abstract[28]	giv|giv[28]	coref	8-25
6-14	393-399	coding	abstract[28]	giv[28]	_	_
6-15	400-401	(	_	_	_	_
6-16	402-405	BTC	object	new	coref	8-7
6-17	406-407	)	_	_	_	_
6-18	408-411	was	_	_	_	_
6-19	412-420	proposed	_	_	_	_
6-20	421-423	by	_	_	_	_
6-21	424-428	Delp	person	new	_	_
6-22	429-432	and	_	_	_	_
6-23	433-441	Mitchell	person	new	coref	8-16
6-24	442-443	.	_	_	_	_

#Text=In order to achieve compression , an image is divided into several non-overlapping blocks and stores only one bitmap and two corresponding quantization values of each block .
7-1	444-446	In	_	_	_	_
7-2	447-452	order	_	_	_	_
7-3	453-455	to	_	_	_	_
7-4	456-463	achieve	_	_	_	_
7-5	464-475	compression	abstract	giv	coref	8-22[51_0]
7-6	476-477	,	_	_	_	_
7-7	478-480	an	object[33]	giv[33]	coref	9-4[54_33]
7-8	481-486	image	object[33]	giv[33]	_	_
7-9	487-489	is	_	_	_	_
7-10	490-497	divided	_	_	_	_
7-11	498-502	into	_	_	_	_
7-12	503-510	several	object[34]	new[34]	coref	9-10[55_34]
7-13	511-526	non-overlapping	object[34]	new[34]	_	_
7-14	527-533	blocks	object[34]	new[34]	_	_
7-15	534-537	and	_	_	_	_
7-16	538-544	stores	place	new	_	_
7-17	545-549	only	abstract[36]	new[36]	coref	10-1[67_36]
7-18	550-553	one	abstract[36]	new[36]	_	_
7-19	554-560	bitmap	abstract[36]	new[36]	_	_
7-20	561-564	and	_	_	_	_
7-21	565-568	two	abstract	new	_	_
7-22	569-582	corresponding	_	_	_	_
7-23	583-595	quantization	abstract|abstract[39]	new|new[39]	coref|coref	11-17|11-16[82_39]
7-24	596-602	values	abstract[39]	new[39]	_	_
7-25	603-605	of	abstract[39]	new[39]	_	_
7-26	606-610	each	abstract[39]|object[40]	new[39]|giv[40]	coref	8-24[0_40]
7-27	611-616	block	abstract[39]|object[40]	new[39]|giv[40]	_	_
7-28	617-618	.	_	_	_	_

#Text=Because the algorithm utilized in the BTC technique has significant computational complexity , Lema and Mitchell proposed an improved version named absolute moment block truncation coding ( AMBTC ) .
8-1	619-626	Because	_	_	_	_
8-2	627-630	the	abstract[41]	new[41]	_	_
8-3	631-640	algorithm	abstract[41]	new[41]	_	_
8-4	641-649	utilized	_	_	_	_
8-5	650-652	in	_	_	_	_
8-6	653-656	the	abstract[43]	giv[43]	_	_
8-7	657-660	BTC	abstract|abstract[43]	giv|giv[43]	_	_
8-8	661-670	technique	abstract[43]	giv[43]	_	_
8-9	671-674	has	_	_	_	_
8-10	675-686	significant	abstract[44]	new[44]	_	_
8-11	687-700	computational	abstract[44]	new[44]	_	_
8-12	701-711	complexity	abstract[44]	new[44]	_	_
8-13	712-713	,	_	_	_	_
8-14	714-718	Lema	person	new	_	_
8-15	719-722	and	_	_	_	_
8-16	723-731	Mitchell	person	giv	_	_
8-17	732-740	proposed	_	_	_	_
8-18	741-743	an	abstract[47]	new[47]	_	_
8-19	744-752	improved	abstract[47]	new[47]	_	_
8-20	753-760	version	abstract[47]	new[47]	_	_
8-21	761-766	named	_	_	_	_
8-22	767-775	absolute	abstract[51]	giv[51]	coref	14-5[0_51]
8-23	776-782	moment	event|abstract[51]	giv|giv[51]	_	_
8-24	783-788	block	object|abstract[51]	giv|giv[51]	coref	9-23[60_0]
8-25	789-799	truncation	place|abstract[51]	giv|giv[51]	_	_
8-26	800-806	coding	abstract[51]	giv[51]	_	_
8-27	807-808	(	_	_	_	_
8-28	809-814	AMBTC	object	giv	coref	9-2
8-29	815-816	)	_	_	_	_
8-30	817-818	.	_	_	_	_

#Text=In AMBTC , the image is also divided into several non-overlapping blocks with a size of k × k pixels , for each block , the mean value AVG can be calculated by Equation ( 1 ) . ( 1 ) where denotes the j -th pixel value in the block .
9-1	819-821	In	_	_	_	_
9-2	822-827	AMBTC	abstract	giv	_	_
9-3	828-829	,	_	_	_	_
9-4	830-833	the	object[54]	giv[54]	_	_
9-5	834-839	image	object[54]	giv[54]	_	_
9-6	840-842	is	_	_	_	_
9-7	843-847	also	_	_	_	_
9-8	848-855	divided	_	_	_	_
9-9	856-860	into	_	_	_	_
9-10	861-868	several	object[55]	giv[55]	_	_
9-11	869-884	non-overlapping	object[55]	giv[55]	_	_
9-12	885-891	blocks	object[55]	giv[55]	_	_
9-13	892-896	with	object[55]	giv[55]	_	_
9-14	897-898	a	object[55]|quantity[56]	giv[55]|new[56]	_	_
9-15	899-903	size	object[55]|quantity[56]	giv[55]|new[56]	_	_
9-16	904-906	of	object[55]|quantity[56]	giv[55]|new[56]	_	_
9-17	907-908	k	object[55]|quantity[56]|quantity	giv[55]|new[56]|new	coref	9-19
9-18	909-910	×	object[55]|quantity[56]	giv[55]|new[56]	_	_
9-19	911-912	k	object[55]|quantity[56]|abstract|abstract[59]	giv[55]|new[56]|giv|new[59]	_	_
9-20	913-919	pixels	object[55]|quantity[56]|abstract[59]	giv[55]|new[56]|new[59]	_	_
9-21	920-921	,	_	_	_	_
9-22	922-925	for	_	_	_	_
9-23	926-930	each	object[60]	giv[60]	coref	9-50[66_60]
9-24	931-936	block	object[60]	giv[60]	_	_
9-25	937-938	,	_	_	_	_
9-26	939-942	the	abstract[61]	new[61]	coref	9-44[65_61]
9-27	943-947	mean	abstract[61]	new[61]	_	_
9-28	948-953	value	abstract[61]	new[61]	_	_
9-29	954-957	AVG	_	_	_	_
9-30	958-961	can	_	_	_	_
9-31	962-964	be	_	_	_	_
9-32	965-975	calculated	_	_	_	_
9-33	976-978	by	_	_	_	_
9-34	979-987	Equation	abstract[62]	new[62]	coref	23-2[141_62]
9-35	988-989	(	abstract[62]	new[62]	_	_
9-36	990-991	1	abstract[62]	new[62]	_	_
9-37	992-993	)	abstract[62]	new[62]	_	_
9-38	994-995	.	_	_	_	_
9-39	996-997	(	_	_	_	_
9-40	998-999	1	_	_	_	_
9-41	1000-1001	)	_	_	_	_
9-42	1002-1007	where	_	_	_	_
9-43	1008-1015	denotes	_	_	_	_
9-44	1016-1019	the	abstract[65]	giv[65]	coref	10-9[69_65]
9-45	1020-1021	j	abstract|abstract[65]	new|giv[65]	_	_
9-46	1022-1025	-th	abstract[65]	giv[65]	_	_
9-47	1026-1031	pixel	object|abstract[65]	new|giv[65]	coref	10-10
9-48	1032-1037	value	abstract[65]	giv[65]	_	_
9-49	1038-1040	in	_	_	_	_
9-50	1041-1044	the	object[66]	giv[66]	coref	14-8[100_66]
9-51	1045-1050	block	object[66]	giv[66]	_	_
9-52	1051-1052	.	_	_	_	_

#Text=The bitmap can then be constructed by comparing each pixel value with AVG : Set the bit value of bitmap to ‘ 0 ’ if the pixel value is less than AVG and set to ‘ 1 ’ for others .
10-1	1053-1056	The	abstract[67]	giv[67]	coref	10-20[0_67]
10-2	1057-1063	bitmap	abstract[67]	giv[67]	_	_
10-3	1064-1067	can	_	_	_	_
10-4	1068-1072	then	_	_	_	_
10-5	1073-1075	be	_	_	_	_
10-6	1076-1087	constructed	_	_	_	_
10-7	1088-1090	by	_	_	_	_
10-8	1091-1100	comparing	_	_	_	_
10-9	1101-1105	each	abstract[69]	giv[69]	coref	10-16[72_69]
10-10	1106-1111	pixel	object|abstract[69]	giv|giv[69]	coref	10-27
10-11	1112-1117	value	abstract[69]	giv[69]	_	_
10-12	1118-1122	with	_	_	_	_
10-13	1123-1126	AVG	abstract	new	coref	10-32
10-14	1127-1128	:	_	_	_	_
10-15	1129-1132	Set	_	_	_	_
10-16	1133-1136	the	abstract[72]	giv[72]	coref	10-22[75_72]
10-17	1137-1140	bit	abstract|abstract[72]	new|giv[72]	coref	19-18[128_0]
10-18	1141-1146	value	abstract[72]	giv[72]	_	_
10-19	1147-1149	of	abstract[72]	giv[72]	_	_
10-20	1150-1156	bitmap	abstract[72]|abstract	giv[72]|giv	coref	12-20
10-21	1157-1159	to	_	_	_	_
10-22	1160-1161	‘	abstract[75]	giv[75]	coref	11-26[0_75]
10-23	1162-1163	0	abstract[75]	giv[75]	_	_
10-24	1164-1165	’	abstract[75]	giv[75]	_	_
10-25	1166-1168	if	abstract[75]	giv[75]	_	_
10-26	1169-1172	the	abstract[75]	giv[75]	_	_
10-27	1173-1178	pixel	object|abstract[75]	giv|giv[75]	coref	13-7
10-28	1179-1184	value	abstract[75]	giv[75]	_	_
10-29	1185-1187	is	_	_	_	_
10-30	1188-1192	less	_	_	_	_
10-31	1193-1197	than	_	_	_	_
10-32	1198-1201	AVG	abstract	giv	_	_
10-33	1202-1205	and	_	_	_	_
10-34	1206-1209	set	_	_	_	_
10-35	1210-1212	to	_	_	_	_
10-36	1213-1214	‘	_	_	_	_
10-37	1215-1216	1	time	new	coref	12-13[89_0]
10-38	1217-1218	’	_	_	_	_
10-39	1219-1222	for	_	_	_	_
10-40	1223-1229	others	person	new	_	_
10-41	1230-1231	.	_	_	_	_

#Text=Next , Equations ( 2 ) and ( 3 ) can be applied to derive two quantization values , i. e. , the low mean value L and the high mean value H , respectively .
11-1	1232-1236	Next	_	_	_	_
11-2	1237-1238	,	_	_	_	_
11-3	1239-1248	Equations	abstract	new	_	_
11-4	1249-1250	(	_	_	_	_
11-5	1251-1252	2	quantity	new	_	_
11-6	1253-1254	)	_	_	_	_
11-7	1255-1258	and	_	_	_	_
11-8	1259-1260	(	_	_	_	_
11-9	1261-1262	3	_	_	_	_
11-10	1263-1264	)	_	_	_	_
11-11	1265-1268	can	_	_	_	_
11-12	1269-1271	be	_	_	_	_
11-13	1272-1279	applied	_	_	_	_
11-14	1280-1282	to	_	_	_	_
11-15	1283-1289	derive	_	_	_	_
11-16	1290-1293	two	abstract[82]	giv[82]	_	_
11-17	1294-1306	quantization	abstract|abstract[82]	giv|giv[82]	_	_
11-18	1307-1313	values	abstract[82]	giv[82]	_	_
11-19	1314-1315	,	_	_	_	_
11-20	1316-1318	i.	_	_	_	_
11-21	1319-1321	e.	_	_	_	_
11-22	1322-1323	,	_	_	_	_
11-23	1324-1327	the	abstract[84]	new[84]	_	_
11-24	1328-1331	low	abstract[84]	new[84]	_	_
11-25	1332-1336	mean	abstract[84]	new[84]	_	_
11-26	1337-1342	value	abstract|abstract[84]	giv|new[84]	coref	11-32
11-27	1343-1344	L	abstract[84]	new[84]	_	_
11-28	1345-1348	and	_	_	_	_
11-29	1349-1352	the	abstract[86]	new[86]	coref	14-17[0_86]
11-30	1353-1357	high	abstract[86]	new[86]	_	_
11-31	1358-1362	mean	abstract[86]	new[86]	_	_
11-32	1363-1368	value	abstract|abstract[86]	giv|new[86]	coref	15-22[110_0]
11-33	1369-1370	H	abstract[86]	new[86]	_	_
11-34	1371-1372	,	_	_	_	_
11-35	1373-1385	respectively	_	_	_	_
11-36	1386-1387	.	_	_	_	_

#Text=( 2 ) ( 3 ) where q represents the number of ‘ 1 ’ that exist in the bitmap BM .
12-1	1388-1389	(	_	_	_	_
12-2	1390-1391	2	_	_	_	_
12-3	1392-1393	)	_	_	_	_
12-4	1394-1395	(	_	_	_	_
12-5	1396-1397	3	_	_	_	_
12-6	1398-1399	)	_	_	_	_
12-7	1400-1405	where	_	_	_	_
12-8	1406-1407	q	abstract	new	_	_
12-9	1408-1418	represents	_	_	_	_
12-10	1419-1422	the	abstract[88]	new[88]	_	_
12-11	1423-1429	number	abstract[88]	new[88]	_	_
12-12	1430-1432	of	_	_	_	_
12-13	1433-1434	‘	time[89]	giv[89]	coref	15-10[107_89]
12-14	1435-1436	1	time[89]	giv[89]	_	_
12-15	1437-1438	’	time[89]	giv[89]	_	_
12-16	1439-1443	that	_	_	_	_
12-17	1444-1449	exist	_	_	_	_
12-18	1450-1452	in	_	_	_	_
12-19	1453-1456	the	object[91]	new[91]	coref	13-24[97_91]
12-20	1457-1463	bitmap	abstract|object[91]	giv|new[91]	coref	13-24
12-21	1464-1466	BM	object[91]	new[91]	_	_
12-22	1467-1468	.	_	_	_	_

#Text=Meanwhile , and denote two original pixel sets which the corresponding bits are ‘ 0 ’ and ‘ 1 ’ , respectively in bitmap BM .
13-1	1469-1478	Meanwhile	_	_	_	_
13-2	1479-1480	,	_	_	_	_
13-3	1481-1484	and	_	_	_	_
13-4	1485-1491	denote	_	_	_	_
13-5	1492-1495	two	abstract[93]	new[93]	_	_
13-6	1496-1504	original	abstract[93]	new[93]	_	_
13-7	1505-1510	pixel	object|abstract[93]	giv|new[93]	_	_
13-8	1511-1515	sets	abstract[93]	new[93]	_	_
13-9	1516-1521	which	quantity[95]	new[95]	coref	15-11[106_95]
13-10	1522-1525	the	object[94]|quantity[95]	new[94]|new[95]	coref	19-26[129_94]
13-11	1526-1539	corresponding	object[94]|quantity[95]	new[94]|new[95]	_	_
13-12	1540-1544	bits	object[94]|quantity[95]	new[94]|new[95]	_	_
13-13	1545-1548	are	quantity[95]	new[95]	_	_
13-14	1549-1550	‘	quantity[95]	new[95]	_	_
13-15	1551-1552	0	quantity[95]	new[95]	_	_
13-16	1553-1554	’	quantity[95]	new[95]	_	_
13-17	1555-1558	and	quantity[95]	new[95]	_	_
13-18	1559-1560	‘	quantity[95]	new[95]	_	_
13-19	1561-1562	1	quantity[95]	new[95]	_	_
13-20	1563-1564	’	quantity[95]	new[95]	_	_
13-21	1565-1566	,	quantity[95]	new[95]	_	_
13-22	1567-1579	respectively	quantity[95]	new[95]	_	_
13-23	1580-1582	in	quantity[95]	new[95]	_	_
13-24	1583-1589	bitmap	quantity[95]|abstract|object[97]	new[95]|giv|giv[97]	coref|coref	14-20[0_97]|15-19[108_0]
13-25	1590-1592	BM	quantity[95]|object[97]	new[95]|giv[97]	_	_
13-26	1593-1594	.	_	_	_	_

#Text=Therefore , the final compression code of the block can be obtained by concatenating L , H , and BM , i. e. , ( L , H , BM ) .
14-1	1595-1604	Therefore	_	_	_	_
14-2	1605-1606	,	_	_	_	_
14-3	1607-1610	the	abstract[99]	new[99]	coref	18-9[120_99]
14-4	1611-1616	final	abstract[99]	new[99]	_	_
14-5	1617-1628	compression	event|abstract[99]	giv|new[99]	coref	17-1[114_0]
14-6	1629-1633	code	abstract[99]	new[99]	_	_
14-7	1634-1636	of	abstract[99]	new[99]	_	_
14-8	1637-1640	the	abstract[99]|object[100]	new[99]|giv[100]	coref	15-1[105_100]
14-9	1641-1646	block	abstract[99]|object[100]	new[99]|giv[100]	_	_
14-10	1647-1650	can	_	_	_	_
14-11	1651-1653	be	_	_	_	_
14-12	1654-1662	obtained	_	_	_	_
14-13	1663-1665	by	_	_	_	_
14-14	1666-1679	concatenating	_	_	_	_
14-15	1680-1681	L	abstract	new	_	_
14-16	1682-1683	,	_	_	_	_
14-17	1684-1685	H	abstract	giv	coref	15-27[111_0]
14-18	1686-1687	,	_	_	_	_
14-19	1688-1691	and	_	_	_	_
14-20	1692-1694	BM	object	giv	_	_
14-21	1695-1696	,	_	_	_	_
14-22	1697-1699	i.	abstract[104]	new[104]	_	_
14-23	1700-1702	e.	abstract[104]	new[104]	_	_
14-24	1703-1704	,	_	_	_	_
14-25	1705-1706	(	_	_	_	_
14-26	1707-1708	L	_	_	_	_
14-27	1709-1710	,	_	_	_	_
14-28	1711-1712	H	_	_	_	_
14-29	1713-1714	,	_	_	_	_
14-30	1715-1717	BM	_	_	_	_
14-31	1718-1719	)	_	_	_	_
14-32	1720-1721	.	_	_	_	_

#Text=The corresponding restored block can be constructed by replacing each ‘ 0 ’ and ‘ 1 ’ of the bitmap with low mean value L and high mean value H , respectively .
15-1	1722-1725	The	abstract[105]	giv[105]	coref	24-1[144_105]
15-2	1726-1739	corresponding	abstract[105]	giv[105]	_	_
15-3	1740-1748	restored	abstract[105]	giv[105]	_	_
15-4	1749-1754	block	abstract[105]	giv[105]	_	_
15-5	1755-1758	can	_	_	_	_
15-6	1759-1761	be	_	_	_	_
15-7	1762-1773	constructed	_	_	_	_
15-8	1774-1776	by	_	_	_	_
15-9	1777-1786	replacing	_	_	_	_
15-10	1787-1791	each	time[107]	giv[107]	coref	24-9[0_107]
15-11	1792-1793	‘	quantity[106]|time[107]	giv[106]|giv[107]	_	_
15-12	1794-1795	0	quantity[106]|time[107]	giv[106]|giv[107]	_	_
15-13	1796-1797	’	quantity[106]|time[107]	giv[106]|giv[107]	_	_
15-14	1798-1801	and	time[107]	giv[107]	_	_
15-15	1802-1803	‘	time[107]	giv[107]	_	_
15-16	1804-1805	1	time[107]	giv[107]	_	_
15-17	1806-1807	’	time[107]	giv[107]	_	_
15-18	1808-1810	of	_	_	_	_
15-19	1811-1814	the	abstract[108]	giv[108]	_	_
15-20	1815-1821	bitmap	abstract[108]	giv[108]	_	_
15-21	1822-1826	with	abstract[108]	giv[108]	_	_
15-22	1827-1830	low	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-23	1831-1835	mean	abstract[108]|abstract|abstract[110]	giv[108]|new|giv[110]	_	_
15-24	1836-1841	value	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-25	1842-1843	L	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-26	1844-1847	and	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-27	1848-1852	high	abstract[108]|abstract[110]|abstract[111]	giv[108]|giv[110]|giv[111]	coref	20-7[0_111]
15-28	1853-1857	mean	abstract[108]|abstract[110]|abstract[111]	giv[108]|giv[110]|giv[111]	_	_
15-29	1858-1863	value	abstract[108]|abstract[110]|abstract[111]	giv[108]|giv[110]|giv[111]	_	_
15-30	1864-1865	H	abstract[108]|abstract[110]|abstract[111]	giv[108]|giv[110]|giv[111]	_	_
15-31	1866-1867	,	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-32	1868-1880	respectively	abstract[108]|abstract[110]	giv[108]|giv[110]	_	_
15-33	1881-1882	.	_	_	_	_

#Text=2.2 .
16-1	1883-1886	2.2	abstract	new	_	_
16-2	1887-1888	.	_	_	_	_

#Text=Matrix Coding
17-1	1889-1895	Matrix	abstract|abstract[114]	giv|giv[114]	coref|coref	18-1|18-2[0_114]
17-2	1896-1902	Coding	abstract[114]	giv[114]	_	_

#Text=Matrix coding method is a modified version of the ( 7 , 4 ) Hamming code , and is widely used in LSB-based data hiding methods .
18-1	1903-1909	Matrix	abstract|abstract[117]	giv|new[117]	coref|coref	18-5[118_117]|19-4
18-2	1910-1916	coding	abstract|abstract[117]	giv|new[117]	coref	20-4
18-3	1917-1923	method	abstract[117]	new[117]	_	_
18-4	1924-1926	is	_	_	_	_
18-5	1927-1928	a	abstract[118]	giv[118]	coref	20-2[132_118]
18-6	1929-1937	modified	abstract[118]	giv[118]	_	_
18-7	1938-1945	version	abstract[118]	giv[118]	_	_
18-8	1946-1948	of	abstract[118]	giv[118]	_	_
18-9	1949-1952	the	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-10	1953-1954	(	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-11	1955-1956	7	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-12	1957-1958	,	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-13	1959-1960	4	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-14	1961-1962	)	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-15	1963-1970	Hamming	abstract[118]|person|abstract[120]	giv[118]|new|giv[120]	_	_
18-16	1971-1975	code	abstract[118]|abstract[120]	giv[118]|giv[120]	_	_
18-17	1976-1977	,	_	_	_	_
18-18	1978-1981	and	_	_	_	_
18-19	1982-1984	is	_	_	_	_
18-20	1985-1991	widely	_	_	_	_
18-21	1992-1996	used	_	_	_	_
18-22	1997-1999	in	_	_	_	_
18-23	2000-2009	LSB-based	abstract|abstract[122]	new|new[122]	coref	25-19[153_122]
18-24	2010-2014	data	abstract[122]	new[122]	_	_
18-25	2015-2021	hiding	_	_	_	_
18-26	2022-2029	methods	abstract	new	_	_
18-27	2030-2031	.	_	_	_	_

#Text=By utilizing the matrix operation , for a seven-bit sequence ( also called a code-word ) , at most one bit is changed when embedding three secret bits .
19-1	2032-2034	By	_	_	_	_
19-2	2035-2044	utilizing	_	_	_	_
19-3	2045-2048	the	abstract[125]	new[125]	coref	23-10[143_125]
19-4	2049-2055	matrix	abstract|abstract[125]	giv|new[125]	coref	20-3
19-5	2056-2065	operation	abstract[125]	new[125]	_	_
19-6	2066-2067	,	_	_	_	_
19-7	2068-2071	for	_	_	_	_
19-8	2072-2073	a	abstract[126]	new[126]	coref	22-7[139_126]
19-9	2074-2083	seven-bit	abstract[126]	new[126]	_	_
19-10	2084-2092	sequence	abstract[126]	new[126]	_	_
19-11	2093-2094	(	_	_	_	_
19-12	2095-2099	also	_	_	_	_
19-13	2100-2106	called	_	_	_	_
19-14	2107-2108	a	abstract[127]	new[127]	_	_
19-15	2109-2118	code-word	abstract[127]	new[127]	_	_
19-16	2119-2120	)	_	_	_	_
19-17	2121-2122	,	_	_	_	_
19-18	2123-2125	at	abstract[128]	giv[128]	coref	21-9[137_128]
19-19	2126-2130	most	abstract[128]	giv[128]	_	_
19-20	2131-2134	one	abstract[128]	giv[128]	_	_
19-21	2135-2138	bit	abstract[128]	giv[128]	_	_
19-22	2139-2141	is	_	_	_	_
19-23	2142-2149	changed	_	_	_	_
19-24	2150-2154	when	_	_	_	_
19-25	2155-2164	embedding	_	_	_	_
19-26	2165-2170	three	object[129]	giv[129]	coref	25-16[152_129]
19-27	2171-2177	secret	object[129]	giv[129]	_	_
19-28	2178-2182	bits	object[129]	giv[129]	_	_
19-29	2183-2184	.	_	_	_	_

#Text=In the matrix coding method , H is the check matrix and is defined as .
20-1	2185-2187	In	_	_	_	_
20-2	2188-2191	the	abstract[132]	giv[132]	_	_
20-3	2192-2198	matrix	abstract|abstract[132]	giv|giv[132]	_	_
20-4	2199-2205	coding	abstract|abstract[132]	giv|giv[132]	_	_
20-5	2206-2212	method	abstract[132]	giv[132]	_	_
20-6	2213-2214	,	_	_	_	_
20-7	2215-2216	H	object	giv	coref	20-9[135_0]
20-8	2217-2219	is	_	_	_	_
20-9	2220-2223	the	object[135]	giv[135]	_	_
20-10	2224-2229	check	event|object[135]	new|giv[135]	_	_
20-11	2230-2236	matrix	object[135]	giv[135]	_	_
20-12	2237-2240	and	_	_	_	_
20-13	2241-2243	is	_	_	_	_
20-14	2244-2251	defined	_	_	_	_
20-15	2252-2254	as	_	_	_	_
20-16	2255-2256	.	_	_	_	_

#Text=Equation ( 4 ) is used to obtain which bit needs to be changed .
21-1	2257-2265	Equation	abstract[136]	new[136]	_	_
21-2	2266-2267	(	abstract[136]	new[136]	_	_
21-3	2268-2269	4	abstract[136]	new[136]	_	_
21-4	2270-2271	)	abstract[136]	new[136]	_	_
21-5	2272-2274	is	_	_	_	_
21-6	2275-2279	used	_	_	_	_
21-7	2280-2282	to	_	_	_	_
21-8	2283-2289	obtain	_	_	_	_
21-9	2290-2295	which	abstract[137]	giv[137]	_	_
21-10	2296-2299	bit	abstract[137]	giv[137]	_	_
21-11	2300-2305	needs	_	_	_	_
21-12	2306-2308	to	_	_	_	_
21-13	2309-2311	be	_	_	_	_
21-14	2312-2319	changed	_	_	_	_
21-15	2320-2321	.	_	_	_	_

#Text=( 4 ) where CW denotes the seven-bit sequence , and S represents the three-bit vector to be hidden .
22-1	2322-2323	(	_	_	_	_
22-2	2324-2325	4	_	_	_	_
22-3	2326-2327	)	_	_	_	_
22-4	2328-2333	where	_	_	_	_
22-5	2334-2336	CW	abstract	new	_	_
22-6	2337-2344	denotes	_	_	_	_
22-7	2345-2348	the	abstract[139]	giv[139]	coref	25-22[154_139]
22-8	2349-2358	seven-bit	abstract[139]	giv[139]	_	_
22-9	2359-2367	sequence	abstract[139]	giv[139]	_	_
22-10	2368-2369	,	_	_	_	_
22-11	2370-2373	and	_	_	_	_
22-12	2374-2375	S	_	_	_	_
22-13	2376-2386	represents	_	_	_	_
22-14	2387-2390	the	abstract[140]	new[140]	_	_
22-15	2391-2400	three-bit	abstract[140]	new[140]	_	_
22-16	2401-2407	vector	abstract[140]	new[140]	_	_
22-17	2408-2410	to	_	_	_	_
22-18	2411-2413	be	_	_	_	_
22-19	2414-2420	hidden	_	_	_	_
22-20	2421-2422	.	_	_	_	_

#Text=Notice that Equation ( 4 ) is calculated under the modulo-2 operation .
23-1	2423-2429	Notice	_	_	_	_
23-2	2430-2434	that	abstract[141]	giv[141]	appos	23-5[0_141]
23-3	2435-2443	Equation	abstract[141]	giv[141]	_	_
23-4	2444-2445	(	_	_	_	_
23-5	2446-2447	4	abstract	giv	_	_
23-6	2448-2449	)	_	_	_	_
23-7	2450-2452	is	_	_	_	_
23-8	2453-2463	calculated	_	_	_	_
23-9	2464-2469	under	_	_	_	_
23-10	2470-2473	the	abstract[143]	giv[143]	coref	26-9[158_143]
23-11	2474-2482	modulo-2	abstract[143]	giv[143]	_	_
23-12	2483-2492	operation	abstract[143]	giv[143]	_	_
23-13	2493-2494	.	_	_	_	_

#Text=The location of z is listed in Table 1 .
24-1	2495-2498	The	abstract[144]	giv[144]	_	_
24-2	2499-2507	location	abstract[144]	giv[144]	_	_
24-3	2508-2510	of	abstract[144]	giv[144]	_	_
24-4	2511-2512	z	abstract[144]|abstract	giv[144]|new	_	_
24-5	2513-2515	is	_	_	_	_
24-6	2516-2522	listed	_	_	_	_
24-7	2523-2525	in	_	_	_	_
24-8	2526-2531	Table	abstract	new	_	_
24-9	2532-2533	1	time	giv	_	_
24-10	2534-2535	.	_	_	_	_

#Text=In the data extraction phase , Equation ( 5 ) can be used to extract three bits of secret data from each seven-bit sequence . ( 5 ) where RCW denotes the seven-bit sequence that has been embedded .
25-1	2536-2538	In	_	_	_	_
25-2	2539-2542	the	abstract[150]	new[150]	_	_
25-3	2543-2547	data	abstract|abstract[150]	new|new[150]	_	_
25-4	2548-2558	extraction	abstract|abstract[150]	new|new[150]	_	_
25-5	2559-2564	phase	abstract[150]	new[150]	_	_
25-6	2565-2566	,	_	_	_	_
25-7	2567-2575	Equation	abstract[151]	new[151]	coref	26-1[157_151]
25-8	2576-2577	(	abstract[151]	new[151]	_	_
25-9	2578-2579	5	abstract[151]	new[151]	_	_
25-10	2580-2581	)	abstract[151]	new[151]	_	_
25-11	2582-2585	can	_	_	_	_
25-12	2586-2588	be	_	_	_	_
25-13	2589-2593	used	_	_	_	_
25-14	2594-2596	to	_	_	_	_
25-15	2597-2604	extract	_	_	_	_
25-16	2605-2610	three	object[152]	giv[152]	_	_
25-17	2611-2615	bits	object[152]	giv[152]	_	_
25-18	2616-2618	of	object[152]	giv[152]	_	_
25-19	2619-2625	secret	object[152]|abstract[153]	giv[152]|giv[153]	_	_
25-20	2626-2630	data	object[152]|abstract[153]	giv[152]|giv[153]	_	_
25-21	2631-2635	from	object[152]|abstract[153]	giv[152]|giv[153]	_	_
25-22	2636-2640	each	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	coref	25-32[156_154]
25-23	2641-2650	seven-bit	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-24	2651-2659	sequence	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-25	2660-2661	.	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-26	2662-2663	(	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-27	2664-2665	5	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-28	2666-2667	)	object[152]|abstract[153]|abstract[154]	giv[152]|giv[153]|giv[154]	_	_
25-29	2668-2673	where	_	_	_	_
25-30	2674-2677	RCW	abstract	new	_	_
25-31	2678-2685	denotes	_	_	_	_
25-32	2686-2689	the	abstract[156]	giv[156]	_	_
25-33	2690-2699	seven-bit	abstract[156]	giv[156]	_	_
25-34	2700-2708	sequence	abstract[156]	giv[156]	_	_
25-35	2709-2713	that	_	_	_	_
25-36	2714-2717	has	_	_	_	_
25-37	2718-2722	been	_	_	_	_
25-38	2723-2731	embedded	_	_	_	_
25-39	2732-2733	.	_	_	_	_

#Text=Equation ( 5 ) is also calculated under the modulo-2 operation .
26-1	2734-2742	Equation	abstract[157]	giv[157]	_	_
26-2	2743-2744	(	abstract[157]	giv[157]	_	_
26-3	2745-2746	5	abstract[157]	giv[157]	_	_
26-4	2747-2748	)	abstract[157]	giv[157]	_	_
26-5	2749-2751	is	_	_	_	_
26-6	2752-2756	also	_	_	_	_
26-7	2757-2767	calculated	_	_	_	_
26-8	2768-2773	under	_	_	_	_
26-9	2774-2777	the	abstract[158]	giv[158]	_	_
26-10	2778-2786	modulo-2	abstract[158]	giv[158]	_	_
26-11	2787-2796	operation	abstract[158]	giv[158]	_	_
26-12	2797-2798	.	_	_	_	_
