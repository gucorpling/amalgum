# newdoc id = AMALGUM_whow_clawbot
# sent_id = AMALGUM_whow_clawbot-1
# s_type = frag
# text = Program a VEX Robotics Clawbot
1	Program	Program	NOUN	NN	Number=Sing	0	root	0:root	Discourse=preparation:1->9|Entity=(abstract-1
2	a	a	DET	DT	Definite=Ind|PronType=Art	5	det	5:det	Entity=(abstract-2
3	VEX	VEX	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=(abstract-3(abstract-4)
4	Robotics	Robotics	PROPN	NNP	Number=Sing	5	compound	5:compound	Entity=abstract-3)
5	Clawbot	Clawbot	PROPN	NNP	Number=Sing	1	obj	1:obj	Entity=abstract-1)abstract-2)|SpaceAfter=No

# sent_id = AMALGUM_whow_clawbot-2
# s_type = decl
# text = You have built a clawbot but it doesn't do anything because you haven't programmed it.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=concession:2->3|Entity=(person-5)
2	have	have	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	3	aux	3:aux	_
3	built	build	VERB	VBN	Tense=Past|VerbForm=Part	0	root	0:root	_
4	a	a	DET	DT	Definite=Ind|PronType=Art	5	det	5:det	Entity=(object-6
5	clawbot	clawbot	NOUN	NN	Number=Sing	3	obj	3:obj	Entity=object-6)
6	but	but	CCONJ	CC	_	10	cc	10:cc	Discourse=background:3->9
7	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	10	nsubj	10:nsubj	Entity=(object-6)
8-9	doesn't	_	_	_	_	_	_	_	_
8	does	do	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	10	aux	10:aux	_
9	n't	not	ADV	RB	Polarity=Neg	10	advmod	10:advmod	_
10	do	do	VERB	VB	VerbForm=Inf	3	conj	3:conj:but	_
11	anything	anything	NOUN	NN	Number=Sing	10	obj	10:obj	Entity=(object-7)
12	because	because	SCONJ	IN	_	16	mark	16:mark	Discourse=cause:4->3
13	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	16	nsubj	16:nsubj	Entity=(person-5)
14-15	haven't	_	_	_	_	_	_	_	_
14	have	have	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	16	aux	16:aux	_
15	n't	not	ADV	RB	Polarity=Neg	16	advmod	16:advmod	_
16	programmed	programme	VERB	VBN	Tense=Past|VerbForm=Part	10	advcl	10:advcl:because	_
17	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	16	obj	16:obj	Entity=(object-6)|SpaceAfter=No
18	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-3
# s_type = decl
# text = This page will take you step by step through programming your clawbot.
1	This	this	DET	DT	Number=Sing|PronType=Dem	2	det	2:det	Discourse=elaboration:5->3|Entity=(abstract-8
2	page	page	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	Entity=abstract-8)
3	will	will	AUX	MD	VerbForm=Fin	4	aux	4:aux	_
4	take	take	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	you	you	PRON	PRP	Case=Acc|Number=Sing|Person=2|PronType=Prs	4	iobj	4:iobj	Entity=(person-5)
6	step	step	NOUN	NN	Number=Sing	4	obj	4:obj	Entity=(abstract-9
7	by	by	ADP	IN	_	8	case	8:case	_
8	step	step	NOUN	NN	Number=Sing	6	nmod	6:nmod:by	Entity=abstract-9)(abstract-9)
9	through	through	SCONJ	IN	_	10	mark	10:mark	_
10	programming	programme	VERB	VBG	VerbForm=Ger	4	advcl	4:advcl:through	_
11	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	12	nmod:poss	12:nmod:poss	Entity=(object-6(person-5)
12	clawbot	clawbot	NOUN	NN	Number=Sing	10	obj	10:obj	Entity=object-6)|SpaceAfter=No
13	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_clawbot-4
# s_type = frag
# text = Steps
1	Steps	step	NOUN	NNS	Number=Plur	0	root	0:root	Discourse=preparation:6->9|Entity=(abstract-10)

# sent_id = AMALGUM_whow_clawbot-5
# s_type = imp
# text = Get the programming environment.
1	Get	get	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:7->9
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(abstract-11
3	programming	programming	NOUN	NN	Number=Sing	4	compound	4:compound	Entity=(abstract-12)
4	environment	environment	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-11)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-6
# s_type = decl
# text = You can download RobotC for free here: http://www.robotc.net/download/vexrobotics/
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=preparation:8->9|Entity=(person-5)
2	can	can	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	download	download	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	RobotC	RobotC	PROPN	NNP	Number=Sing	3	obj	3:obj	Entity=(abstract-13)
5	for	for	ADP	IN	_	6	case	6:case	_
6	free	free	ADJ	JJ	Degree=Pos	3	obl	3:obl:for	_
7	here	here	ADV	RB	PronType=Dem	3	advmod	3:advmod	SpaceAfter=No
8	:	:	PUNCT	:	_	9	punct	9:punct	_
9	http://www.robotc.net/download/vexrobotics/	http://www.robotc.net/download/vexrobotics/	PROPN	NNP	Number=Sing	3	parataxis	3:parataxis	Discourse=ROOT:9|Entity=(abstract-14)

# sent_id = AMALGUM_whow_clawbot-7
# s_type = frag
# text = Image:Vexclaw1 1.png
1	Image	image	NOUN	NN	Number=Sing	0	root	0:root	Discourse=preparation:10->11|Entity=(abstract-15)|SpaceAfter=No
2	:	:	PUNCT	:	_	3	punct	3:punct	SpaceAfter=No
3	Vexclaw1	Vexclaw1	PROPN	NNP	Number=Sing	1	dep	1:dep	Discourse=attribution:11->9|Entity=(abstract-16
4	1	1	NUM	CD	NumForm=Digit|NumType=Card	3	flat	3:flat	Entity=abstract-16)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	SpaceAfter=No
6	png	png	NOUN	NN	Number=Sing	1	dep	1:dep	SpaceAfter=No

# sent_id = AMALGUM_whow_clawbot-8
# s_type = imp
# text = Create a new bit of code.
1	Create	create	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:12->9
2	a	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Entity=(abstract-17
3	new	new	ADJ	JJ	Degree=Pos	4	amod	4:amod	_
4	bit	bit	NOUN	NN	Number=Sing	1	obj	1:obj	_
5	of	of	ADP	IN	_	6	case	6:case	_
6	code	code	NOUN	NN	Number=Sing	4	nmod	4:nmod:of	Entity=abstract-17)(abstract-18)|SpaceAfter=No
7	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-9
# s_type = imp
# text = Go to File/New/New File.
1	Go	go	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:13->9
2	to	to	ADP	IN	_	4	case	4:case	_
3	File/New/New	File/New/New	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=(object-19(abstract-20)
4	File	file	PROPN	NNP	Number=Sing	1	obl	1:obl:to	Entity=object-19)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-10
# s_type = sub
# text = You could also use a 'Competition Template' if you are planning on using this code in a competition.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	4	nsubj	4:nsubj	Discourse=joint:14->9|Entity=(person-5)
2	could	could	AUX	MD	VerbForm=Fin	4	aux	4:aux	_
3	also	also	ADV	RB	_	4	advmod	4:advmod	_
4	use	use	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	a	a	DET	DT	Definite=Ind|PronType=Art	8	det	8:det	Entity=(abstract-21
6	'	'	PUNCT	``	_	8	punct	8:punct	SpaceAfter=No
7	Competition	Competition	PROPN	NNP	Number=Sing	8	compound	8:compound	Entity=(abstract-22)
8	Template	template	NOUN	NN	Number=Sing	4	obj	4:obj	SpaceAfter=No
9	'	'	PUNCT	''	_	8	punct	8:punct	Entity=abstract-21)
10	if	if	SCONJ	IN	_	13	mark	13:mark	Discourse=condition:15->14
11	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	13	nsubj	13:nsubj	Entity=(person-5)
12	are	be	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	13	aux	13:aux	_
13	planning	plan	VERB	VBG	Tense=Pres|VerbForm=Part	4	advcl	4:advcl:if	_
14	on	on	SCONJ	IN	_	15	mark	15:mark	_
15	using	use	VERB	VBG	VerbForm=Ger	13	advcl	13:advcl:on	_
16	this	this	DET	DT	Number=Sing|PronType=Dem	17	det	17:det	Entity=(abstract-18
17	code	code	NOUN	NN	Number=Sing	15	obj	15:obj	Entity=abstract-18)
18	in	in	ADP	IN	_	20	case	20:case	_
19	a	a	DET	DT	Definite=Ind|PronType=Art	20	det	20:det	Entity=(event-23
20	competition	competition	NOUN	NN	Number=Sing	15	obl	15:obl:in	Entity=event-23)|SpaceAfter=No
21	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_clawbot-11
# s_type = decl
# text = But if you are just testing your robot, 'New file' works.
1	But	but	CCONJ	CC	_	14	cc	14:cc	Discourse=preparation:16->20
2	if	if	SCONJ	IN	_	6	mark	6:mark	Discourse=condition:17->18
3	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	6	nsubj	6:nsubj	Entity=(person-5)
4	are	be	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	6	aux	6:aux	_
5	just	just	ADV	RB	_	6	advmod	6:advmod	_
6	testing	test	VERB	VBG	Tense=Pres|VerbForm=Part	14	advcl	14:advcl:if	_
7	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	8	nmod:poss	8:nmod:poss	Entity=(object-24(person-5)
8	robot	robot	NOUN	NN	Number=Sing	6	obj	6:obj	Entity=object-24)|SpaceAfter=No
9	,	,	PUNCT	,	_	6	punct	6:punct	_
10	'	'	PUNCT	``	_	12	punct	12:punct	Discourse=same_unit:18->16|SpaceAfter=No
11	New	New	ADJ	JJ	Degree=Pos	12	amod	12:amod	Entity=(object-19
12	file	file	NOUN	NN	Number=Sing	14	nsubj	14:nsubj	Entity=object-19)|SpaceAfter=No
13	'	'	PUNCT	''	_	12	punct	12:punct	_
14	works	work	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	SpaceAfter=No
15	.	.	PUNCT	.	_	14	punct	14:punct	_

# sent_id = AMALGUM_whow_clawbot-12
# s_type = imp
# text = Set up the motors.
1	Set	set	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:19->20
2	up	up	ADP	RP	_	1	compound:prt	1:compound:prt	_
3	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(object-25
4	motors	motor	NOUN	NNS	Number=Plur	1	obj	1:obj	Entity=object-25)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-13
# s_type = imp
# text = Go to the motors and sensors set-up page (robot/motors and sensors).
1	Go	go	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:20->9
2	to	to	ADP	IN	_	8	case	8:case	_
3	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(abstract-8
4	motors	motor	NOUN	NNS	Number=Plur	8	compound	8:compound	Entity=(object-25(object-25)
5	and	and	CCONJ	CC	_	6	cc	6:cc	_
6	sensors	sensor	NOUN	NNS	Number=Plur	4	conj	4:conj:and|8:compound	Entity=object-25)(person-26)
7	set-up	set-up	NOUN	NN	Number=Sing	8	compound	8:compound	Entity=(abstract-27)
8	page	page	NOUN	NN	Number=Sing	1	obl	1:obl:to	Entity=abstract-8)
9	(	(	PUNCT	-LRB-	_	10	punct	10:punct	Discourse=elaboration:21->20|SpaceAfter=No
10	robot/motors	robot/motor	NOUN	NNS	Number=Plur	8	appos	8:appos	Entity=(object-28)
11	and	and	CCONJ	CC	_	12	cc	12:cc	_
12	sensors	sensor	NOUN	NNS	Number=Plur	10	conj	8:appos|10:conj:and	Entity=(object-29)|SpaceAfter=No
13	)	)	PUNCT	-RRB-	_	10	punct	10:punct	SpaceAfter=No
14	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-14
# s_type = imp
# text = When the box pops up enter in your motor name (anything you want but stick with things like front right and lift) into the corresponding port number.
1	When	when	SCONJ	WRB	PronType=Int	4	mark	4:mark	Discourse=circumstance:22->23
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-30
3	box	box	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	Entity=object-30)
4	pops	pop	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	advcl	6:advcl:when	_
5	up	up	ADP	RP	_	4	compound:prt	4:compound:prt	_
6	enter	enter	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:23->20
7	in	in	ADP	IN	_	6	compound:prt	6:compound:prt	_
8	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	10	nmod:poss	10:nmod:poss	Entity=(abstract-31(person-5)
9	motor	motor	NOUN	NN	Number=Sing	10	compound	10:compound	Entity=(object-32)
10	name	name	NOUN	NN	Number=Sing	6	obj	6:obj	Entity=abstract-31)
11	(	(	PUNCT	-LRB-	_	12	punct	12:punct	Discourse=elaboration:24->23|SpaceAfter=No
12	anything	anything	NOUN	NN	Number=Sing	10	appos	10:appos	Entity=(object-7
13	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	14	nsubj	14:nsubj	Discourse=elaboration:25->24|Entity=(person-5)
14	want	want	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	12	acl:relcl	12:acl:relcl	Entity=object-7)
15	but	but	CCONJ	CC	_	16	cc	16:cc	Discourse=contrast:26->25
16	stick	stick	VERB	VBP	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	12	conj	10:appos|12:conj:but	_
17	with	with	ADP	IN	_	18	case	18:case	_
18	things	thing	NOUN	NNS	Number=Plur	16	obl	16:obl:with	Entity=(abstract-33
19	like	like	ADP	IN	_	21	case	21:case	_
20	front	front	NOUN	NN	Number=Sing	21	compound	21:compound	Entity=(abstract-34
21	right	right	NOUN	NN	Number=Sing	18	nmod	18:nmod:like	Entity=abstract-34)
22	and	and	CCONJ	CC	_	23	cc	23:cc	_
23	lift	lift	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	21	conj	18:nmod:like|21:conj:and	Entity=abstract-33)(abstract-35)|SpaceAfter=No
24	)	)	PUNCT	-RRB-	_	12	punct	12:punct	_
25	into	into	ADP	IN	_	29	case	29:case	Discourse=same_unit:27->26
26	the	the	DET	DT	Definite=Def|PronType=Art	29	det	29:det	Entity=(abstract-36
27	corresponding	corresponding	ADJ	JJ	Degree=Pos	29	amod	29:amod	_
28	port	port	NOUN	NN	Number=Sing	29	compound	29:compound	Entity=(object-37)
29	number	number	NOUN	NN	Number=Sing	16	obl	16:obl:into	Entity=abstract-36)|SpaceAfter=No
30	.	.	PUNCT	.	_	6	punct	6:punct	_

# sent_id = AMALGUM_whow_clawbot-15
# s_type = imp
# text = Use the drop down on the right to select the type of motor you are using and check whether you need it reversed or not.
1	Use	use	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:28->20
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-38
3	drop	drop	NOUN	NN	Number=Sing	1	obj	1:obj	_
4	down	down	ADP	RP	_	3	compound:prt	3:compound:prt	_
5	on	on	ADP	IN	_	7	case	7:case	_
6	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(abstract-34
7	right	right	NOUN	NN	Number=Sing	3	nmod	3:nmod:on	Entity=object-38)abstract-34)
8	to	to	PART	TO	_	9	mark	9:mark	Discourse=purpose:29->28
9	select	select	VERB	VB	VerbForm=Inf	1	advcl	1:advcl:to	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	Entity=(abstract-39
11	type	type	NOUN	NN	Number=Sing	9	obj	9:obj	_
12	of	of	ADP	IN	_	13	case	13:case	_
13	motor	motor	NOUN	NN	Number=Sing	11	nmod	11:nmod:of	Entity=(object-32
14	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	16	nsubj	16:nsubj	Discourse=elaboration:30->29|Entity=(person-5)
15	are	be	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	16	aux	16:aux	_
16	using	use	VERB	VBG	Tense=Pres|VerbForm=Part	13	acl:relcl	13:acl:relcl	Entity=abstract-39)object-32)
17	and	and	CCONJ	CC	_	18	cc	18:cc	Discourse=attribution:31->32
18	check	check	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	9	conj	1:advcl:to|9:conj:and	_
19	whether	whether	SCONJ	IN	_	21	mark	21:mark	Discourse=joint:32->30
20	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	21	nsubj	21:nsubj|25:nsubj:xsubj	Entity=(person-5)
21	need	need	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	18	ccomp	18:ccomp	_
22	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	21	obj	21:obj|23:nsubj:xsubj|25:nsubj:xsubj	Entity=(object-32)
23	reversed	reverse	VERB	VBN	Tense=Past|VerbForm=Part	21	xcomp	21:xcomp	_
24	or	or	CCONJ	CC	_	25	cc	25:cc	_
25	not	not	ADV	RB	Polarity=Neg	23	conj	21:xcomp|23:conj:or	SpaceAfter=No
26	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-16
# s_type = sub
# text = You can use trial and error to find out if it needs to be reversed or not.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=joint:33->20|Entity=(person-5)
2	can	can	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	use	use	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	trial	trial	NOUN	NN	Number=Sing	3	obj	3:obj	Entity=(abstract-40)
5	and	and	CCONJ	CC	_	6	cc	6:cc	_
6	error	error	NOUN	NN	Number=Sing	4	conj	3:obj|4:conj:and	Entity=(abstract-41)
7	to	to	PART	TO	_	8	mark	8:mark	Discourse=purpose:34->33
8	find	find	VERB	VB	VerbForm=Inf	3	advcl	3:advcl:to	_
9	out	out	ADP	RP	_	8	compound:prt	8:compound:prt	_
10	if	if	SCONJ	IN	_	12	mark	12:mark	Discourse=elaboration:35->34
11	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	12	nsubj	12:nsubj|15:nsubj:xsubj|17:nsubj:xsubj	Entity=(abstract-41)
12	needs	need	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	8	ccomp	8:ccomp	_
13	to	to	PART	TO	_	15	mark	15:mark	_
14	be	be	AUX	VB	VerbForm=Inf	15	aux:pass	15:aux:pass	_
15	reversed	reverse	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	12	xcomp	12:xcomp	_
16	or	or	CCONJ	CC	_	17	cc	17:cc	_
17	not	not	ADV	RB	Polarity=Neg	15	conj	12:xcomp|15:conj:or	SpaceAfter=No
18	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-17
# s_type = imp
# text = Code the while loop.
1	Code	code	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:36->20
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(abstract-42
3	while	while	NOUN	NN	Number=Sing	4	compound	4:compound	Entity=(time-43)
4	loop	loop	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-42)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-18
# s_type = decl
# text = You will want to make sure that all of the code to control your motors is inside some type of infinite while loop.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj|5:nsubj:xsubj|6:nsubj:xsubj	Discourse=attribution:37->38|Entity=(person-5)
2	will	will	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	want	want	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	to	to	PART	TO	_	5	mark	5:mark	_
5	make	make	VERB	VB	VerbForm=Inf	3	xcomp	3:xcomp	_
6	sure	sure	ADJ	JJ	Degree=Pos	5	xcomp	5:xcomp	_
7	that	that	SCONJ	IN	_	19	mark	19:mark	Discourse=joint:38->20
8	all	all	PRON	DT	_	19	nsubj	19:nsubj	Entity=(abstract-18
9	of	of	ADP	IN	_	11	case	11:case	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	_
11	code	code	NOUN	NN	Number=Sing	8	nmod	8:nmod:of	_
12	to	to	PART	TO	_	13	mark	13:mark	Discourse=purpose:39->38
13	control	control	VERB	VB	VerbForm=Inf	11	acl	11:acl:to	_
14	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	15	nmod:poss	15:nmod:poss	Entity=(object-25(person-5)
15	motors	motor	NOUN	NNS	Number=Plur	13	obj	13:obj	Entity=abstract-18)object-25)
16	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	19	cop	19:cop	Discourse=same_unit:40->38
17	inside	inside	ADP	IN	_	19	case	19:case	_
18	some	some	DET	DT	_	19	det	19:det	Entity=(abstract-44
19	type	type	NOUN	NN	Number=Sing	6	ccomp	6:ccomp	_
20	of	of	ADP	IN	_	23	case	23:case	_
21	infinite	infinite	ADJ	JJ	Degree=Pos	23	amod	23:amod	Entity=(abstract-42
22	while	while	NOUN	NN	Number=Sing	23	compound	23:compound	Entity=(time-43)
23	loop	loop	NOUN	NN	Number=Sing	19	nmod	19:nmod:of	Entity=abstract-44)abstract-42)|SpaceAfter=No
24	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-19
# s_type = decl
# text = This will make your program run smoothly as it is constantly checking to see if the controller is requesting a motor to move.
1	This	this	PRON	DT	Number=Sing|PronType=Dem	3	nsubj	3:nsubj	Discourse=joint:41->20|Entity=(abstract-42)
2	will	will	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	make	make	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	5	nmod:poss	5:nmod:poss	Entity=(abstract-1(person-5)
5	program	program	NOUN	NN	Number=Sing	3	obj	3:obj|6:nsubj:xsubj	Entity=abstract-1)
6	run	run	VERB	VB	VerbForm=Inf	3	xcomp	3:xcomp	_
7	smoothly	smoothly	ADV	RB	Degree=Pos	6	advmod	6:advmod	_
8	as	as	SCONJ	IN	_	12	mark	12:mark	Discourse=manner:42->41
9	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	12	nsubj	12:nsubj|14:nsubj:xsubj	Entity=(abstract-42)
10	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	12	aux	12:aux	_
11	constantly	constantly	ADV	RB	Degree=Pos	12	advmod	12:advmod	_
12	checking	check	VERB	VBG	Tense=Pres|VerbForm=Part	3	advcl	3:advcl:as	_
13	to	to	PART	TO	_	14	mark	14:mark	Discourse=purpose:43->42
14	see	see	VERB	VB	VerbForm=Inf	12	xcomp	12:xcomp	_
15	if	if	SCONJ	IN	_	19	mark	19:mark	Discourse=condition:44->43
16	the	the	DET	DT	Definite=Def|PronType=Art	17	det	17:det	Entity=(person-45
17	controller	controller	NOUN	NN	Number=Sing	19	nsubj	19:nsubj	Entity=person-45)
18	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	19	aux	19:aux	_
19	requesting	request	VERB	VBG	Tense=Pres|VerbForm=Part	14	ccomp	14:ccomp	_
20	a	a	DET	DT	Definite=Ind|PronType=Art	21	det	21:det	Entity=(object-32
21	motor	motor	NOUN	NN	Number=Sing	19	obj	19:obj|23:nsubj:xsubj	Entity=object-32)
22	to	to	PART	TO	_	23	mark	23:mark	_
23	move	move	VERB	VB	VerbForm=Inf	19	xcomp	19:xcomp	SpaceAfter=No
24	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-20
# s_type = imp
# text = Code the wheels.
1	Code	code	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:45->20
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-46
3	wheels	wheel	NOUN	NNS	Number=Plur	1	obj	1:obj	Entity=object-46)|SpaceAfter=No
4	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-21
# s_type = sub
# text = If you have four motors for your wheels you can set up your motors two on each side.
1	If	if	SCONJ	IN	_	3	mark	3:mark	Discourse=condition:46->47
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Entity=(person-5)
3	have	have	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	11	advcl	11:advcl:if	_
4	four	4	NUM	CD	NumForm=Digit|NumType=Card	5	nummod	5:nummod	Entity=(object-25
5	motors	motor	NOUN	NNS	Number=Plur	3	obj	3:obj	_
6	for	for	ADP	IN	_	8	case	8:case	_
7	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	8	nmod:poss	8:nmod:poss	Entity=(object-46(person-5)
8	wheels	wheel	NOUN	NNS	Number=Plur	5	nmod	5:nmod:for	Entity=object-25)object-46)
9	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	11	nsubj	11:nsubj	Discourse=joint:47->20|Entity=(person-5)
10	can	can	AUX	MD	VerbForm=Fin	11	aux	11:aux	_
11	set	set	VERB	VB	VerbForm=Inf	0	root	0:root	_
12	up	up	ADP	RP	_	11	compound:prt	11:compound:prt	_
13	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	14	nmod:poss	14:nmod:poss	Entity=(object-25(person-5)
14	motors	motor	NOUN	NNS	Number=Plur	11	obj	11:obj	Entity=object-25)
15	two	2	NUM	CD	NumForm=Digit|NumType=Card	11	obl:npmod	11:obl:npmod	_
16	on	on	ADP	IN	_	18	case	18:case	_
17	each	each	DET	DT	_	18	det	18:det	Entity=(abstract-47
18	side	side	NOUN	NN	Number=Sing	11	obl	11:obl:on	Entity=abstract-47)|SpaceAfter=No
19	.	.	PUNCT	.	_	11	punct	11:punct	_

# sent_id = AMALGUM_whow_clawbot-22
# s_type = decl
# text = The code looks like this:
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=preparation:48->49|Entity=(abstract-18
2	code	code	NOUN	NN	Number=Sing	3	nsubj	3:nsubj	Entity=abstract-18)
3	looks	look	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
4	like	like	ADP	IN	_	5	case	5:case	_
5	this	this	PRON	DT	Number=Sing|PronType=Dem	3	obl	3:obl:like	SpaceAfter=No
6	:	:	PUNCT	:	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-23
# s_type = decl
# text = This is taking a specific motor and assigning it to a channel; in this case, either 3 or 2.
1	This	this	PRON	DT	Number=Sing|PronType=Dem	3	nsubj	3:nsubj|8:nsubj	Discourse=joint:49->20|Entity=(abstract-47)
2	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	aux	3:aux|8:aux	_
3	taking	take	VERB	VBG	Tense=Pres|VerbForm=Part	0	root	0:root	_
4	a	a	DET	DT	Definite=Ind|PronType=Art	6	det	6:det	Entity=(object-32
5	specific	specific	ADJ	JJ	Degree=Pos	6	amod	6:amod	_
6	motor	motor	NOUN	NN	Number=Sing	3	obj	3:obj	Entity=object-32)
7	and	and	CCONJ	CC	_	8	cc	8:cc	Discourse=joint:50->49
8	assigning	assign	VERB	VBG	VerbForm=Ger	3	conj	3:conj:and	_
9	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	8	obj	8:obj	Entity=(abstract-47)
10	to	to	ADP	IN	_	12	case	12:case	_
11	a	a	DET	DT	Definite=Ind|PronType=Art	12	det	12:det	Entity=(abstract-48
12	channel	channel	NOUN	NN	Number=Sing	8	obl	8:obl:to	Entity=abstract-48)|SpaceAfter=No
13	;	;	PUNCT	:	_	19	punct	19:punct	_
14	in	in	ADP	IN	_	16	case	16:case	Discourse=elaboration:51->50
15	this	this	DET	DT	Number=Sing|PronType=Dem	16	det	16:det	Entity=(abstract-49(abstract-50
16	case	case	NOUN	NN	Number=Sing	19	nmod	19:nmod:in	Entity=abstract-50)|SpaceAfter=No
17	,	,	PUNCT	,	_	16	punct	16:punct	_
18	either	either	CCONJ	CC	_	19	cc:preconj	19:cc:preconj	_
19	3	3	NUM	CD	NumForm=Digit|NumType=Card	8	obl	8:obl	Entity=abstract-49)
20	or	or	CCONJ	CC	_	21	cc	21:cc	_
21	2	2	NUM	CD	NumForm=Digit|NumType=Card	19	conj	8:obl|19:conj:or	Entity=(abstract-51)|SpaceAfter=No
22	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-24
# s_type = decl
# text = These are the y axis on the joysticks.
1	These	this	PRON	DT	Number=Plur|PronType=Dem	5	nsubj	5:nsubj	Discourse=joint:52->20|Entity=(object-25)
2	are	be	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	5	cop	5:cop	_
3	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-25
4	y	y	NOUN	NN	Number=Sing	5	compound	5:compound	Entity=(abstract-52)
5	axis	axis	NOUN	NN	Number=Sing	0	root	0:root	_
6	on	on	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-53
8	joysticks	joystick	NOUN	NNS	Number=Plur	5	nmod	5:nmod:on	Entity=object-25)object-53)|SpaceAfter=No
9	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_clawbot-25
# s_type = decl
# text = The code automatically takes the position of the joystick and gives the wheels appropriate rpm (rotations per minute).
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=joint:53->20|Entity=(abstract-18
2	code	code	NOUN	NN	Number=Sing	4	nsubj	4:nsubj|11:nsubj	Entity=abstract-18)
3	automatically	automatically	ADV	RB	Degree=Pos	4	advmod	4:advmod	_
4	takes	take	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(abstract-54
6	position	position	NOUN	NN	Number=Sing	4	obj	4:obj	_
7	of	of	ADP	IN	_	9	case	9:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-55
9	joystick	joystick	NOUN	NN	Number=Sing	6	nmod	6:nmod:of	Entity=abstract-54)object-55)
10	and	and	CCONJ	CC	_	11	cc	11:cc	Discourse=joint:54->20
11	gives	give	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	4	conj	4:conj:and	_
12	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(object-46
13	wheels	wheel	NOUN	NNS	Number=Plur	11	iobj	11:iobj	Entity=object-46)
14	appropriate	appropriate	ADJ	JJ	Degree=Pos	15	amod	15:amod	Entity=(abstract-56
15	rpm	rpm	NOUN	NN	Number=Sing	11	obj	11:obj	Entity=abstract-56)
16	(	(	PUNCT	-LRB-	_	17	punct	17:punct	Discourse=elaboration:55->54|SpaceAfter=No
17	rotations	rotation	NOUN	NNS	Number=Plur	15	appos	15:appos	Entity=(event-57
18	per	per	ADP	IN	_	19	case	19:case	_
19	minute	minute	NOUN	NN	Number=Sing	17	nmod	17:nmod:per	Entity=event-57)(time-58)|SpaceAfter=No
20	)	)	PUNCT	-RRB-	_	17	punct	17:punct	SpaceAfter=No
21	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_clawbot-26
# s_type = imp
# text = Code the lift.
1	Code	code	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:56->57
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-59
3	lift	lift	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-59)|SpaceAfter=No
4	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-27
# s_type = decl
# text = This will raise and lower the arm that your claw is on.
1	This	this	PRON	DT	Number=Sing|PronType=Dem	3	nsubj	3:nsubj	Discourse=joint:57->20|Entity=(object-59)
2	will	will	AUX	MD	VerbForm=Fin	3	aux	3:aux|5:aux	_
3	raise	raise	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	and	and	CCONJ	CC	_	5	cc	5:cc	_
5	lower	low	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	3	conj	3:conj:and	_
6	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(object-60
7	arm	arm	NOUN	NN	Number=Sing	3	obj	3:obj|5:obj|11:obl:on	_
8	that	that	PRON	WDT	PronType=Rel	11	obl	7:ref	Discourse=elaboration:58->57
9	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	10	nmod:poss	10:nmod:poss	Entity=(object-61(person-5)
10	claw	claw	NOUN	NN	Number=Sing	11	nsubj	11:nsubj	Entity=object-61)
11	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	7	acl:relcl	7:acl:relcl	Entity=object-60)
12	on	on	ADP	IN	_	8	case	8:case	SpaceAfter=No
13	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-28
# s_type = decl
# text = It is saying: If Btn5U is being held down lift motor rotate forwards (clockwise) at the speed of 127 rpm.
1	It	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	3	nsubj	3:nsubj	Discourse=preparation:59->61|Entity=(object-60)
2	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	aux	3:aux	_
3	saying	say	VERB	VBG	Tense=Pres|VerbForm=Part	0	root	0:root	SpaceAfter=No
4	:	:	PUNCT	:	_	13	punct	13:punct	_
5	If	if	SCONJ	IN	_	9	mark	9:mark	Discourse=condition:60->61
6	Btn5U	Btn5U	PROPN	NNP	Number=Sing	9	nsubj:pass	9:nsubj:pass	Entity=(abstract-62)
7	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	9	aux	9:aux	_
8	being	be	AUX	VBG	VerbForm=Ger	9	aux:pass	9:aux:pass	_
9	held	hold	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	13	advcl	13:advcl:if	_
10	down	down	ADP	RP	_	9	compound:prt	9:compound:prt	_
11	lift	lift	NOUN	NN	Number=Sing	12	compound	12:compound	Discourse=joint:61->57|Entity=(object-32(object-59)
12	motor	motor	NOUN	NN	Number=Sing	13	nsubj	13:nsubj	Entity=object-32)
13	rotate	rotate	NOUN	NN	Number=Sing	3	ccomp	3:ccomp	_
14	forwards	forwards	ADV	RB	Degree=Pos	13	advmod	13:advmod	_
15	(	(	PUNCT	-LRB-	_	16	punct	16:punct	Discourse=elaboration:62->61|SpaceAfter=No
16	clockwise	clockwise	ADV	RB	Degree=Pos	13	advmod	13:advmod	SpaceAfter=No
17	)	)	PUNCT	-RRB-	_	16	punct	16:punct	_
18	at	at	ADP	IN	_	20	case	20:case	_
19	the	the	DET	DT	Definite=Def|PronType=Art	20	det	20:det	Entity=(abstract-63
20	speed	speed	NOUN	NN	Number=Sing	13	obl	13:obl:at	_
21	of	of	ADP	IN	_	23	case	23:case	_
22	127	127	NUM	CD	NumForm=Digit|NumType=Card	23	nummod	23:nummod	Entity=(abstract-56
23	rpm	rpm	NOUN	NN	Number=Sing	20	nmod	20:nmod:of	Entity=abstract-63)abstract-56)|SpaceAfter=No
24	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-29
# s_type = imp
# text = Then- If that isn't happening is Btn5D being pressed, if that is true then rotate the motor backwards (anti-clockwise).
1	Then-	then-	ADV	RB	Degree=Pos	17	discourse	17:discourse	Discourse=joint:63->57
2	If	if	SCONJ	IN	_	6	mark	6:mark	Discourse=condition:64->63
3	that	that	PRON	DT	Number=Sing|PronType=Dem	6	nsubj	6:nsubj	Entity=(object-32)
4-5	isn't	_	_	_	_	_	_	_	_
4	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	aux	6:aux	_
5	n't	not	ADV	RB	Polarity=Neg	6	advmod	6:advmod	_
6	happening	happen	VERB	VBG	Tense=Pres|VerbForm=Part	17	advcl	17:advcl:if	_
7	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	10	aux:pass	10:aux:pass	Discourse=same_unit:65->63
8	Btn5D	Btn5D	PROPN	NNP	Number=Sing	10	nsubj:pass	10:nsubj:pass	Entity=(abstract-64)
9	being	be	AUX	VBG	VerbForm=Ger	10	aux:pass	10:aux:pass	_
10	pressed	press	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	17	advcl	17:advcl	SpaceAfter=No
11	,	,	PUNCT	,	_	10	punct	10:punct	_
12	if	if	SCONJ	IN	_	15	mark	15:mark	Discourse=condition:66->67
13	that	that	PRON	DT	Number=Sing|PronType=Dem	15	nsubj	15:nsubj	Entity=(object-32)
14	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	15	cop	15:cop	_
15	true	true	ADJ	JJ	Degree=Pos	17	advcl	17:advcl:if	_
16	then	then	ADV	RB	PronType=Dem	17	advmod	17:advmod	Discourse=same_unit:67->63
17	rotate	rotate	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	_
18	the	the	DET	DT	Definite=Def|PronType=Art	19	det	19:det	Entity=(object-32
19	motor	motor	NOUN	NN	Number=Sing	17	obj	17:obj	Entity=object-32)
20	backwards	backwards	ADV	RB	Degree=Pos	17	advmod	17:advmod	_
21	(	(	PUNCT	-LRB-	_	22	punct	22:punct	Discourse=elaboration:68->67|SpaceAfter=No
22	anti-clockwise	anti-clockwise	ADJ	JJ	Degree=Pos	17	advmod	17:advmod	SpaceAfter=No
23	)	)	PUNCT	-RRB-	_	22	punct	22:punct	SpaceAfter=No
24	.	.	PUNCT	.	_	17	punct	17:punct	_

# sent_id = AMALGUM_whow_clawbot-30
# s_type = imp
# text = If none of that is happening, don't turn the motor at all.
1	If	if	SCONJ	IN	_	6	mark	6:mark	Discourse=condition:69->70
2	none	none	NOUN	NN	Number=Sing|Polarity=Neg	6	nsubj	6:nsubj	Entity=(event-65
3	of	of	ADP	IN	_	4	case	4:case	_
4	that	that	PRON	DT	Number=Sing|PronType=Dem	2	nmod	2:nmod:of	Entity=event-65)
5	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	aux	6:aux	_
6	happening	happen	VERB	VBG	Tense=Pres|VerbForm=Part	10	advcl	10:advcl:if	SpaceAfter=No
7	,	,	PUNCT	,	_	6	punct	6:punct	_
8-9	don't	_	_	_	_	_	_	_	_
8	do	do	AUX	VB	VerbForm=Inf	10	aux	10:aux	Discourse=joint:70->57
9	n't	not	ADV	RB	Polarity=Neg	10	advmod	10:advmod	_
10	turn	turn	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-32
12	motor	motor	NOUN	NN	Number=Sing	10	obj	10:obj	Entity=object-32)
13	at	at	ADP	IN	_	14	case	14:case	_
14	all	all	PRON	DT	_	10	obl	10:obl:at	Entity=(event-65)|SpaceAfter=No
15	.	.	PUNCT	.	_	10	punct	10:punct	_

# sent_id = AMALGUM_whow_clawbot-31
# s_type = imp
# text = Add the claw code.
1	Add	add	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:71->73
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(abstract-18
3	claw	claw	NOUN	NN	Number=Sing	4	compound	4:compound	Entity=(object-61)
4	code	code	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-18)|SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-32
# s_type = decl
# text = This code looks a lot like the lift code but, instead of Btn5U and Btn5D it uses Btn6U and Btn6D.
1	This	this	DET	DT	Number=Sing|PronType=Dem	2	det	2:det	Discourse=concession:72->73|Entity=(abstract-18
2	code	code	NOUN	NN	Number=Sing	3	nsubj	3:nsubj	Entity=abstract-18)
3	looks	look	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
4	a	a	DET	DT	Definite=Ind|PronType=Art	5	det	5:det	_
5	lot	lot	NOUN	NN	Number=Sing	3	obl:npmod	3:obl:npmod	_
6	like	like	ADP	IN	_	9	case	9:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(abstract-18
8	lift	lift	NOUN	NN	Number=Sing	9	compound	9:compound	Entity=(object-59)
9	code	code	NOUN	NN	Number=Sing	3	obl	3:obl:like	Entity=abstract-18)
10	but	but	CCONJ	CC	_	18	cc	18:cc	Discourse=joint:73->57|SpaceAfter=No
11	,	,	PUNCT	,	_	10	punct	10:punct	_
12	instead	instead	ADV	RB	Degree=Pos	14	case	14:case	Discourse=elaboration:74->73
13	of	of	ADP	IN	_	12	fixed	12:fixed	_
14	Btn5U	Btn5U	PROPN	NNP	Number=Sing	18	obl	18:obl:instead_of	Entity=(abstract-62)
15	and	and	CCONJ	CC	_	16	cc	16:cc	_
16	Btn5D	Btn5D	PROPN	NNP	Number=Sing	14	conj	14:conj:and|18:obl:instead_of	Entity=(abstract-64)
17	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	18	nsubj	18:nsubj	Entity=(abstract-18)
18	uses	use	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	conj	3:conj:but	_
19	Btn6U	Btn6U	PROPN	NNP	Number=Sing	18	obj	18:obj	Entity=(abstract-66)
20	and	and	CCONJ	CC	_	21	cc	21:cc	_
21	Btn6D	Btn6D	PROPN	NNP	Number=Sing	19	conj	18:obj|19:conj:and	Entity=(abstract-67)|SpaceAfter=No
22	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-33
# s_type = decl
# text = This means that you use a different set of buttons on your controller for the lift and claw.
1	This	this	PRON	DT	Number=Sing|PronType=Dem	2	nsubj	2:nsubj	Discourse=attribution:75->76|Entity=(abstract-67)
2	means	mean	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
3	that	that	SCONJ	IN	_	5	mark	5:mark	Discourse=elaboration:76->73
4	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	5	nsubj	5:nsubj	Entity=(person-5)
5	use	use	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	2	ccomp	2:ccomp	_
6	a	a	DET	DT	Definite=Ind|PronType=Art	8	det	8:det	Entity=(abstract-68
7	different	different	ADJ	JJ	Degree=Pos	8	amod	8:amod	_
8	set	set	NOUN	NN	Number=Sing	5	obj	5:obj	_
9	of	of	ADP	IN	_	10	case	10:case	_
10	buttons	button	NOUN	NNS	Number=Plur	8	nmod	8:nmod:of	Entity=(object-69
11	on	on	ADP	IN	_	13	case	13:case	_
12	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	13	nmod:poss	13:nmod:poss	Entity=(object-70(person-5)
13	controller	controller	NOUN	NN	Number=Sing	10	nmod	10:nmod:on	Entity=abstract-68)object-69)object-70)
14	for	for	ADP	IN	_	16	case	16:case	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(abstract-35(object-59
16	lift	lift	NOUN	NN	Number=Sing	5	obl	5:obl:for	Entity=object-59)
17	and	and	CCONJ	CC	_	18	cc	18:cc	_
18	claw	claw	NOUN	NN	Number=Sing	16	conj	5:obl:for|16:conj:and	Entity=abstract-35)(object-61)|SpaceAfter=No
19	.	.	PUNCT	.	_	2	punct	2:punct	_

# sent_id = AMALGUM_whow_clawbot-34
# s_type = decl
# text = The other difference is that this bit of code activates the motor 'claw' rather than the motor 'lift'.
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=joint:77->76|Entity=(abstract-71
2	other	other	ADJ	JJ	Degree=Pos	3	amod	3:amod	_
3	difference	difference	NOUN	NN	Number=Sing	10	nsubj	10:nsubj	Entity=abstract-71)
4	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	10	cop	10:cop	_
5	that	that	SCONJ	IN	_	10	mark	10:mark	_
6	this	this	DET	DT	Number=Sing|PronType=Dem	7	det	7:det	Entity=(abstract-72
7	bit	bit	NOUN	NN	Number=Sing	10	nsubj	10:nsubj	_
8	of	of	ADP	IN	_	9	case	9:case	_
9	code	code	NOUN	NN	Number=Sing	7	nmod	7:nmod:of	Entity=abstract-72)(abstract-18)
10	activates	activate	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-32
12	motor	motor	NOUN	NN	Number=Sing	10	obj	10:obj	Entity=object-32)
13	'	'	PUNCT	``	_	14	punct	14:punct	SpaceAfter=No
14	claw	claw	NOUN	NN	Number=Sing	12	appos	12:appos	Entity=(object-32)|SpaceAfter=No
15	'	'	PUNCT	''	_	14	punct	14:punct	_
16	rather	rather	ADV	RB	_	19	cc	19:cc	Discourse=antithesis:78->77
17	than	than	ADP	IN	_	16	fixed	16:fixed	_
18	the	the	DET	DT	Definite=Def|PronType=Art	19	det	19:det	Entity=(object-32
19	motor	motor	NOUN	NN	Number=Sing	12	conj	10:obj|12:conj:rather_than	Entity=object-32)
20	'	'	PUNCT	``	_	21	punct	21:punct	SpaceAfter=No
21	lift	lift	NOUN	NN	Number=Sing	19	appos	19:appos	Entity=(object-59)|SpaceAfter=No
22	'	'	PUNCT	''	_	21	punct	21:punct	SpaceAfter=No
23	.	.	PUNCT	.	_	10	punct	10:punct	_

# sent_id = AMALGUM_whow_clawbot-35
# s_type = imp
# text = Test and adapt your new code.
1	Test	test	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:79->81
2	and	and	CCONJ	CC	_	3	cc	3:cc	_
3	adapt	adapt	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
4	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	6	nmod:poss	6:nmod:poss	Entity=(abstract-18(person-5)
5	new	new	ADJ	JJ	Degree=Pos	6	amod	6:amod	_
6	code	code	NOUN	NN	Number=Sing	1	obj	1:obj|3:obj	Entity=abstract-18)|SpaceAfter=No
7	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-36
# s_type = imp
# text = After you have your code completed compile and download it onto your clawbot (Windows - F5).
1	After	after	SCONJ	IN	_	3	mark	3:mark	Discourse=circumstance:80->81
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Entity=(person-5)
3	have	have	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	7	advcl	7:advcl:after	_
4	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	5	nmod:poss	5:nmod:poss	Entity=(abstract-18(person-5)
5	code	code	NOUN	NN	Number=Sing	3	obj	3:obj|6:nsubj:xsubj	Entity=abstract-18)
6	completed	complete	VERB	VBN	Tense=Past|VerbForm=Part	3	xcomp	3:xcomp	_
7	compile	compile	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:81->77
8	and	and	CCONJ	CC	_	9	cc	9:cc	Discourse=sequence:82->81
9	download	download	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	7	conj	7:conj:and	_
10	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	9	obj	9:obj	Entity=(object-59)
11	onto	onto	ADP	IN	_	13	case	13:case	_
12	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	13	nmod:poss	13:nmod:poss	Entity=(abstract-73(person-5)
13	clawbot	clawbot	NOUN	NN	Number=Sing	9	obl	9:obl:onto	Entity=abstract-73)
14	(	(	PUNCT	-LRB-	_	15	punct	15:punct	Discourse=elaboration:83->82|SpaceAfter=No
15	Windows	window	PROPN	NNP	Number=Sing	13	appos	13:appos	Entity=(abstract-73)
16	-	-	PUNCT	:	_	17	punct	17:punct	_
17	F5	F5	PROPN	NNP	Number=Sing	15	dep	15:dep	Entity=(abstract-74)|SpaceAfter=No
18	)	)	PUNCT	-RRB-	_	15	punct	15:punct	SpaceAfter=No
19	.	.	PUNCT	.	_	7	punct	7:punct	_

# sent_id = AMALGUM_whow_clawbot-37
# s_type = decl
# text = You can change the buttons that activate the motors and change the rpm of the motors.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj|11:nsubj	Discourse=elaboration:84->81|Entity=(person-5)
2	can	can	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	change	change	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-69
5	buttons	button	NOUN	NNS	Number=Plur	3	obj	3:obj|7:nsubj	_
6	that	that	PRON	WDT	PronType=Rel	7	nsubj	5:ref	Discourse=elaboration:85->84
7	activate	activate	VERB	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	5	acl:relcl	5:acl:relcl	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-25
9	motors	motor	NOUN	NNS	Number=Plur	7	obj	7:obj	Entity=object-69)object-25)
10	and	and	CCONJ	CC	_	11	cc	11:cc	Discourse=joint:86->84
11	change	change	VERB	VBP	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	conj	3:conj:and	_
12	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(abstract-56
13	rpm	rpm	NOUN	NN	Number=Sing	11	obj	11:obj	_
14	of	of	ADP	IN	_	16	case	16:case	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(object-25
16	motors	motor	NOUN	NNS	Number=Plur	13	nmod	13:nmod:of	Entity=abstract-56)object-25)|SpaceAfter=No
17	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_clawbot-38
# s_type = decl
# text = The fastest the standard 393 motors can go is 127rpm.
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=elaboration:87->84
2	fastest	fast	ADJ	JJS	Degree=Sup	10	csubj	10:csubj	_
3	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Discourse=elaboration:88->87|Entity=(object-25
4	standard	standard	ADJ	JJ	Degree=Pos	6	amod	6:amod	_
5	393	393	NUM	CD	NumForm=Digit|NumType=Card	6	nummod	6:nummod	_
6	motors	motor	NOUN	NNS	Number=Plur	8	nsubj	8:nsubj	Entity=object-25)
7	can	can	AUX	MD	VerbForm=Fin	8	aux	8:aux	_
8	go	go	VERB	VB	VerbForm=Inf	2	acl:relcl	2:acl:relcl	_
9	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	10	cop	10:cop	Discourse=same_unit:89->88
10	127rpm	127rpm	NUM	CD	NumForm=Word|NumType=Card	0	root	0:root	Entity=(person-75)|SpaceAfter=No
11	.	.	PUNCT	.	_	10	punct	10:punct	_

# sent_id = AMALGUM_whow_clawbot-39
# s_type = imp
# text = Feel free to play around with the code and find what works for you.
1	Feel	feel	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:90->81
2	free	free	ADJ	JJ	Degree=Pos	1	xcomp	1:xcomp	_
3	to	to	PART	TO	_	4	mark	4:mark	_
4	play	play	VERB	VB	VerbForm=Inf	2	xcomp	2:xcomp	_
5	around	around	ADV	RB	Degree=Pos	4	advmod	4:advmod	_
6	with	with	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(abstract-18
8	code	code	NOUN	NN	Number=Sing	4	obl	4:obl:with	Entity=abstract-18)
9	and	and	CCONJ	CC	_	10	cc	10:cc	Discourse=joint:91->90
10	find	find	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	4	conj	2:xcomp|4:conj:and	_
11	what	what	PRON	WP	PronType=Rel	10	obj	10:obj	_
12	works	work	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	11	acl:relcl	11:acl:relcl	_
13	for	for	ADP	IN	_	14	case	14:case	_
14	you	you	PRON	PRP	Case=Acc|Number=Sing|Person=2|PronType=Prs	12	obl	12:obl:for	Entity=(person-5)|SpaceAfter=No
15	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_clawbot-40
# s_type = decl
# text = There are other ways to make the same thing happen using robotC but the above is the easiest to create edit and understand.
1	There	there	PRON	EX	_	2	expl	2:expl	Discourse=joint:92->90
2	are	be	VERB	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
3	other	other	ADJ	JJ	Degree=Pos	4	amod	4:amod	Entity=(abstract-76
4	ways	way	NOUN	NNS	Number=Plur	2	nsubj	2:nsubj	_
5	to	to	PART	TO	_	6	mark	6:mark	Discourse=elaboration:93->92
6	make	make	VERB	VB	VerbForm=Inf	4	acl	4:acl:to	_
7	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(abstract-47
8	same	same	ADJ	JJ	Degree=Pos	9	amod	9:amod	_
9	thing	thing	NOUN	NN	Number=Sing	6	obj	6:obj|10:nsubj:xsubj|11:nsubj:xsubj	Entity=abstract-47)
10	happen	happen	VERB	VB	VerbForm=Inf	6	xcomp	6:xcomp	_
11	using	use	VERB	VBG	VerbForm=Ger	6	xcomp	6:xcomp	Discourse=means:94->93
12	robotC	robotC	NOUN	NN	Number=Sing	11	obj	11:obj	Entity=abstract-76)(abstract-77)
13	but	but	CCONJ	CC	_	18	cc	18:cc	Discourse=contrast:95->94
14	the	the	DET	DT	Definite=Def|PronType=Art	15	det	15:det	_
15	above	above	ADJ	JJ	Degree=Pos	18	nsubj	18:nsubj|20:nsubj:xsubj|21:nsubj:xsubj	_
16	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	18	cop	18:cop	_
17	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	_
18	easiest	easy	ADJ	JJS	Degree=Sup	2	conj	2:conj:but	_
19	to	to	PART	TO	_	20	mark	20:mark	Discourse=purpose:96->95
20	create	create	VERB	VB	VerbForm=Inf	18	xcomp	18:xcomp	_
21	edit	edit	VERB	VB	VerbForm=Inf	20	xcomp	20:xcomp	_
22	and	and	CCONJ	CC	_	23	cc	23:cc	_
23	understand	understand	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	21	conj	20:xcomp|21:conj:and	SpaceAfter=No
24	.	.	PUNCT	.	_	2	punct	2:punct	_

