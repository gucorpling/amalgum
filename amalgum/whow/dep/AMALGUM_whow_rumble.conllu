# meta::id = AMALGUM_whow_rumble
# meta::title = Hack a Rumble Robot
# meta::shortTitle = rumble
# meta::type = whow
# meta::dateCollected = 2019-11-06
# meta::dateCreated = 2009-06-30
# meta::dateModified = 2018-08-23
# meta::sourceURL = https://www.wikihow.com/Hack-a-Rumble-Robot
# meta::speakerList = none
# meta::speakerCount = 0
# newdoc id = AMALGUM_whow_rumble
# sent_id = AMALGUM_whow_rumble-1
# s_type = imp
# text = Hack a Rumble Robot
# newpar = head (1 s)
1	Hack	hack	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:1->3
2	a	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Entity=(object-1
3	Rumble	Rumble	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=(person-2)
4	Robot	Robot	PROPN	NNP	Number=Sing	1	obj	1:obj	Entity=object-1)

# sent_id = AMALGUM_whow_rumble-2
# s_type = q
# text = Do you want to hack a Rumble Robot with an Arduino microcontroller?
# newpar = p (4 s) | figure rend:::"Dino_fab_finished_476.jpg" (0 s)
1	Do	do	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	3	aux	3:aux	Discourse=question:2->3
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj|5:nsubj:xsubj	Entity=(person-3)
3	want	want	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	to	to	PART	TO	_	5	mark	5:mark	_
5	hack	hack	VERB	VB	VerbForm=Inf	3	xcomp	3:xcomp	_
6	a	a	DET	DT	Definite=Ind|PronType=Art	8	det	8:det	Entity=(object-1
7	Rumble	Rumble	PROPN	NNP	Number=Sing	8	compound	8:compound	Entity=(person-2)
8	Robot	Robot	PROPN	NNP	Number=Sing	5	obj	5:obj	Entity=object-1)
9	with	with	ADP	IN	_	12	case	12:case	_
10	an	a	DET	DT	Definite=Ind|PronType=Art	12	det	12:det	Entity=(object-4
11	Arduino	Arduino	PROPN	NNP	Number=Sing	12	compound	12:compound	Entity=(place-5)
12	microcontroller	microcontroller	NOUN	NN	Number=Sing	5	obl	5:obl:with	Entity=object-4)|SpaceAfter=No
13	?	?	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-3
# s_type = decl
# text = Your robot will have the ability to turn around and head in another direction when it senses an obstacle.
1	Your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	2	nmod:poss	2:nmod:poss	Discourse=ROOT:3|Entity=(object-1(person-3)
2	robot	robot	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	Entity=object-1)
3	will	will	AUX	MD	VerbForm=Fin	4	aux	4:aux	_
4	have	have	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(abstract-6
6	ability	ability	NOUN	NN	Number=Sing	4	obj	4:obj	_
7	to	to	PART	TO	_	8	mark	8:mark	Discourse=purpose:4->3
8	turn	turn	VERB	VB	VerbForm=Inf	6	acl	6:acl:to	_
9	around	around	ADV	RB	Degree=Pos	8	advmod	8:advmod	_
10	and	and	CCONJ	CC	_	11	cc	11:cc	Discourse=joint:5->4
11	head	head	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	8	conj	6:acl:to|8:conj:and	Entity=abstract-6)
12	in	in	ADP	IN	_	14	case	14:case	_
13	another	another	DET	DT	_	14	det	14:det	Entity=(abstract-7
14	direction	direction	NOUN	NN	Number=Sing	11	obl	11:obl:in	Entity=abstract-7)
15	when	when	SCONJ	WRB	PronType=Int	17	mark	17:mark	Discourse=circumstance:6->5
16	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	17	nsubj	17:nsubj	Entity=(abstract-7)
17	senses	sense	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	11	advcl	11:advcl:when	_
18	an	a	DET	DT	Definite=Ind|PronType=Art	19	det	19:det	Entity=(object-8
19	obstacle	obstacle	NOUN	NN	Number=Sing	17	obj	17:obj	Entity=object-8)|SpaceAfter=No
20	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_rumble-4
# s_type = decl
# text = You can use the code provided, or write your own and see how your roving rumble bot responds.
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=elaboration:7->3|Entity=(person-3)
2	can	can	AUX	MD	VerbForm=Fin	3	aux	3:aux|9:aux|13:aux	_
3	use	use	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(abstract-9
5	code	code	NOUN	NN	Number=Sing	3	obj	3:obj	_
6	provided	provide	VERB	VBN	Tense=Past|VerbForm=Part	5	acl	5:acl	Entity=abstract-9)|SpaceAfter=No
7	,	,	PUNCT	,	_	9	punct	9:punct	_
8	or	or	CCONJ	CC	_	9	cc	9:cc	Discourse=contrast:8->7
9	write	write	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	3	conj	3:conj:or	_
10	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	11	nmod:poss	11:nmod:poss	Entity=(person-3)
11	own	own	ADJ	JJ	Degree=Pos	9	obj	9:obj	_
12	and	and	CCONJ	CC	_	13	cc	13:cc	Discourse=joint:9->8
13	see	see	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	3	conj	3:conj:and	_
14	how	how	SCONJ	WRB	PronType=Rel	13	obj	13:obj	_
15	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	18	nmod:poss	18:nmod:poss	Entity=(person-10(person-3)
16	roving	roving	NOUN	NN	Number=Sing	18	compound	18:compound	Entity=(event-11)
17	rumble	rumble	NOUN	NN	Number=Sing	18	compound	18:compound	Entity=(abstract-12)
18	bot	bot	NOUN	NN	Number=Sing	19	nsubj	19:nsubj	Entity=person-10)
19	responds	respond	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	14	acl:relcl	14:acl:relcl	SpaceAfter=No
20	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-5
# s_type = decl
# text = If you're not used to tinkering with robots, it's an ambitious project, but it's well worth the trouble to take it on.
1	If	if	SCONJ	IN	_	5	mark	5:mark	Discourse=condition:10->11
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	5	nsubj:pass	5:nsubj:pass|7:nsubj:xsubj	Entity=(abstract-3(person-3)|SpaceAfter=No
3	're	be	AUX	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	5	aux:pass	5:aux:pass	_
4	not	not	ADV	RB	Polarity=Neg	5	advmod	5:advmod	_
5	used	use	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	15	acl	15:acl:if	_
6	to	to	SCONJ	IN	_	7	mark	7:mark	_
7	tinkering	tinker	VERB	VBG	VerbForm=Ger	5	xcomp	5:xcomp	_
8	with	with	ADP	IN	_	9	case	9:case	_
9	robots	robot	NOUN	NNS	Number=Plur	7	obl	7:obl:with	Entity=(object-13)|SpaceAfter=No
10	,	,	PUNCT	,	_	5	punct	5:punct	_
11-12	it's	_	_	_	_	_	_	_	_
11	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	15	nsubj	15:nsubj	Discourse=concession:11->12|Entity=(abstract-9)
12	's	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	15	cop	15:cop	_
13	an	a	DET	DT	Definite=Ind|PronType=Art	15	det	15:det	_
14	ambitious	ambitious	ADJ	JJ	Degree=Pos	15	amod	15:amod	_
15	project	project	NOUN	NN	Number=Sing	0	root	0:root	Entity=abstract-3)|SpaceAfter=No
16	,	,	PUNCT	,	_	21	punct	21:punct	_
17	but	but	CCONJ	CC	_	21	cc	21:cc	Discourse=elaboration:12->7
18-19	it's	_	_	_	_	_	_	_	_
18	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	21	nsubj	21:nsubj	Entity=(abstract-3)
19	's	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	21	cop	21:cop	_
20	well	well	ADV	RB	Degree=Pos	21	advmod	21:advmod	_
21	worth	worth	ADJ	JJ	Degree=Pos	15	conj	15:conj:but	_
22	the	the	DET	DT	Definite=Def|PronType=Art	23	det	23:det	Entity=(abstract-14
23	trouble	trouble	NOUN	NN	Number=Sing	21	obj	21:obj	_
24	to	to	PART	TO	_	25	mark	25:mark	Discourse=purpose:13->12
25	take	take	VERB	VB	VerbForm=Inf	23	acl	23:acl:to	_
26	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	25	obj	25:obj	Entity=(abstract-3)
27	on	on	ADP	RP	_	25	compound:prt	25:compound:prt	Entity=abstract-14)|SpaceAfter=No
28	.	.	PUNCT	.	_	15	punct	15:punct	_

# sent_id = AMALGUM_whow_rumble-6
# s_type = frag
# text = Steps
# newpar = head (1 s)
1	Steps	step	NOUN	NNS	Number=Plur	0	root	0:root	Discourse=preparation:14->15|Entity=(abstract-15)

# sent_id = AMALGUM_whow_rumble-7
# s_type = imp
# text = Put some batteries in the robot to see if it works.
# newpar = list type:::"ordered" (64 s) | item (7 s)
1	Put	put	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:15->3
2	some	some	DET	DT	_	3	det	3:det	Entity=(object-16
3	batteries	battery	NOUN	NNS	Number=Plur	1	obj	1:obj	Entity=object-16)
4	in	in	ADP	IN	_	6	case	6:case	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-1
6	robot	robot	NOUN	NN	Number=Sing	1	obl	1:obl:in	Entity=object-1)
7	to	to	PART	TO	_	8	mark	8:mark	Discourse=purpose:16->15
8	see	see	VERB	VB	VerbForm=Inf	1	advcl	1:advcl:to	_
9	if	if	SCONJ	IN	_	11	mark	11:mark	_
10	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	11	nsubj	11:nsubj	Entity=(object-1)
11	works	work	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	8	ccomp	8:ccomp	SpaceAfter=No
12	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-8
# s_type = decl
# text = Typically, they take four AA batteries.
# trailing_xml = <figure rend:::"Dino_fab_1_230.jpg"></figure>
1	Typically	typically	ADV	RB	Degree=Pos	4	advmod	4:advmod	Discourse=sequence:17->15|SpaceAfter=No
2	,	,	PUNCT	,	_	1	punct	1:punct	_
3	they	they	PRON	PRP	Case=Nom|Number=Plur|Person=3|PronType=Prs	4	nsubj	4:nsubj	Entity=(object-16)
4	take	take	VERB	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
5	four	4	NUM	CD	NumForm=Digit|NumType=Card	7	nummod	7:nummod	Entity=(object-16
6	AA	AA	PROPN	NNP	Number=Sing	7	compound	7:compound	Entity=(abstract-17)
7	batteries	battery	NOUN	NNS	Number=Plur	4	obj	4:obj	Entity=object-16)|SpaceAfter=No|XML=<ref target:::"https://www.wikihow.com/wiki/Lengthen_the_Life_of_Batteries_Without_Recharging">
8	.	.	PUNCT	.	_	4	punct	4:punct	XML=</ref>

# sent_id = AMALGUM_whow_rumble-9
# s_type = decl
# text = On the back are some switches.
# newpar = list type:::"unordered" (5 s) | item (5 s)
1	On	on	ADP	IN	_	3	case	3:case	Discourse=sequence:18->15
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-18
3	back	back	NOUN	NN	Number=Sing	4	obl	4:obl:on	Entity=object-18)
4	are	be	AUX	VBP	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	cop	6:cop	_
5	some	some	DET	DT	_	6	det	6:det	Entity=(object-19
6	switches	switch	NOUN	NNS	Number=Plur	0	root	0:root	Entity=object-19)|SpaceAfter=No
7	.	.	PUNCT	.	_	6	punct	6:punct	_

# sent_id = AMALGUM_whow_rumble-10
# s_type = decl
# text = There is "off/on" and also "A/B" to determine which team the robot is on.
1	There	there	PRON	EX	Case=Nom	2	expl	2:expl	Discourse=sequence:19->15
2	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
3	"	''	PUNCT	``	_	4	punct	4:punct	SpaceAfter=No
4	off/on	off/on	ADJ	JJ	Degree=Pos	2	nsubj	2:nsubj	SpaceAfter=No
5	"	''	PUNCT	''	_	4	punct	4:punct	_
6	and	and	CCONJ	CC	_	9	cc	9:cc	_
7	also	also	ADV	RB	_	2	advmod	2:advmod	_
8	"	''	PUNCT	``	_	9	punct	9:punct	SpaceAfter=No
9	A/B	A/B	PROPN	NNP	Number=Sing	4	conj	2:nsubj|4:conj:and	Entity=(abstract-20)|SpaceAfter=No
10	"	''	PUNCT	''	_	9	punct	9:punct	_
11	to	to	PART	TO	_	12	mark	12:mark	Discourse=purpose:20->19
12	determine	determine	VERB	VB	VerbForm=Inf	2	csubj	2:csubj	_
13	which	which	DET	WDT	PronType=Int	14	det	14:det	Entity=(organization-21
14	team	team	NOUN	NN	Number=Sing	12	obj	12:obj	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(object-1
16	robot	robot	NOUN	NN	Number=Sing	18	nsubj	18:nsubj	Entity=object-1)
17	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	18	cop	18:cop	_
18	on	on	ADP	IN	_	14	acl:relcl	14:acl:relcl	Entity=organization-21)|SpaceAfter=No
19	.	.	PUNCT	.	_	2	punct	2:punct	_

# sent_id = AMALGUM_whow_rumble-11
# s_type = imp
# text = Push the "on" switch.
1	Push	push	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:21->15
2	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-22
3	"	''	PUNCT	``	_	4	punct	4:punct	SpaceAfter=No
4	on	on	NOUN	NN	Number=Sing	6	compound	6:compound	Entity=(time-23)|SpaceAfter=No
5	"	''	PUNCT	''	_	4	punct	4:punct	_
6	switch	switch	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-22)|SpaceAfter=No
7	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-12
# s_type = sub
# text = If the bot is working, it should say its name.
1	If	if	SCONJ	IN	_	5	mark	5:mark	Discourse=condition:22->23
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(person-10
3	bot	bot	NOUN	NN	Number=Sing	5	nsubj	5:nsubj	Entity=person-10)
4	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	5	aux	5:aux	_
5	working	work	VERB	VBG	Tense=Pres|VerbForm=Part	9	advcl	9:advcl:if	SpaceAfter=No
6	,	,	PUNCT	,	_	5	punct	5:punct	_
7	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	9	nsubj	9:nsubj	Discourse=sequence:23->15|Entity=(abstract-3)
8	should	should	AUX	MD	VerbForm=Fin	9	aux	9:aux	_
9	say	say	VERB	VB	VerbForm=Inf	0	root	0:root	_
10	its	its	PRON	PRP$	Gender=Neut|Number=Sing|Person=3|Poss=Yes|PronType=Prs	11	nmod:poss	11:nmod:poss	Entity=(abstract-24(abstract-3)
11	name	name	NOUN	NN	Number=Sing	9	obj	9:obj	Entity=abstract-24)|SpaceAfter=No
12	.	.	PUNCT	.	_	9	punct	9:punct	_

# sent_id = AMALGUM_whow_rumble-13
# s_type = imp
# text = Put the cover and the batteries off to the side for now.
# trailing_xml = <figure rend:::"Dino_fab_2_897.jpg"></figure>
1	Put	put	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:24->15
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-25
3	cover	cover	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-25)
4	and	and	CCONJ	CC	_	6	cc	6:cc	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-16
6	batteries	battery	NOUN	NNS	Number=Plur	3	conj	1:obj|3:conj:and	Entity=object-16)
7	off	off	ADV	RB	Degree=Pos	1	advmod	1:advmod	_
8	to	to	ADP	IN	_	10	case	10:case	_
9	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(place-26
10	side	side	NOUN	NN	Number=Sing	1	obl	1:obl:to	Entity=place-26)
11	for	for	ADP	IN	_	12	case	12:case	_
12	now	now	ADV	RB	_	1	obl	1:obl:for	SpaceAfter=No
13	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-14
# s_type = imp
# text = Take the head off the robot.
# newpar = item (4 s)
1	Take	take	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:25->15
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-27
3	head	head	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-27)
4	off	off	ADP	IN	_	6	case	6:case	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-1
6	robot	robot	NOUN	NN	Number=Sing	1	obl	1:obl:off	Entity=object-1)|SpaceAfter=No
7	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-15
# s_type = decl
# text = On the "neck" of the robot (between the head and body) there is a little screw that can be taken off with a small phillips head screwdriver.
1	On	on	ADP	IN	_	4	case	4:case	Discourse=sequence:26->15
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(object-28
3	"	''	PUNCT	``	_	4	punct	4:punct	SpaceAfter=No
4	neck	neck	NOUN	NN	Number=Sing	17	obl	17:obl:on	SpaceAfter=No
5	"	''	PUNCT	''	_	4	punct	4:punct	_
6	of	of	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-1
8	robot	robot	NOUN	NN	Number=Sing	4	nmod	4:nmod:of	Entity=object-1)
9	(	(	PUNCT	-LRB-	_	12	punct	12:punct	Discourse=elaboration:27->26|SpaceAfter=No
10	between	between	ADP	IN	_	12	case	12:case	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-27
12	head	head	NOUN	NN	Number=Sing	4	nmod	4:nmod:between	Entity=object-27)
13	and	and	CCONJ	CC	_	14	cc	14:cc	_
14	body	body	NOUN	NN	Number=Sing	12	conj	4:nmod:between|12:conj:and	Entity=(object-29)|SpaceAfter=No
15	)	)	PUNCT	-RRB-	_	12	punct	12:punct	Entity=object-28)
16	there	there	PRON	EX	_	17	expl	17:expl	Discourse=same_unit:28->26
17	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
18	a	a	DET	DT	Definite=Ind|PronType=Art	20	det	20:det	Entity=(object-30
19	little	little	ADJ	JJ	Degree=Pos	20	amod	20:amod	_
20	screw	screw	NOUN	NN	Number=Sing	17	nsubj:pass	17:nsubj:pass|24:nsubj:pass	_
21	that	that	PRON	WDT	PronType=Rel	24	nsubj:pass	20:ref	Discourse=elaboration:29->28
22	can	can	AUX	MD	VerbForm=Fin	24	aux	24:aux	_
23	be	be	AUX	VB	VerbForm=Inf	24	aux:pass	24:aux:pass	_
24	taken	take	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	20	acl:relcl	20:acl:relcl	_
25	off	off	ADP	RP	_	24	compound:prt	24:compound:prt	_
26	with	with	ADP	IN	_	31	case	31:case	_
27	a	a	DET	DT	Definite=Ind|PronType=Art	31	det	31:det	Entity=(object-31
28	small	small	ADJ	JJ	Degree=Pos	31	amod	31:amod	_
29	phillips	phillip	NOUN	NNS	Number=Plur	30	compound	30:compound	Entity=(object-27(organization-32)
30	head	head	NOUN	NN	Number=Sing	31	compound	31:compound	Entity=object-27)
31	screwdriver	screwdriver	NOUN	NN	Number=Sing	24	obl	24:obl:with	Entity=object-30)object-31)|SpaceAfter=No|XML=<ref target:::"https://www.wikihow.com/wiki/Unscrew_a_Screw_Without_a_Screwdriver"></ref>
32	.	.	PUNCT	.	_	17	punct	17:punct	_

# sent_id = AMALGUM_whow_rumble-16
# s_type = imp
# text = Put the screw aside.
1	Put	put	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:30->15
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-30
3	screw	screw	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-30)
4	aside	aside	ADV	RB	Degree=Pos	1	advmod	1:advmod	SpaceAfter=No
5	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-17
# s_type = decl
# text = There is a small lip in the front of the head that is a little tricky, but should come loose after a little light twisting and turning.
# trailing_xml = <figure rend:::"Dino_fab_3_893.jpg"></figure>
1	There	there	PRON	EX	_	2	expl	2:expl	Discourse=sequence:31->15
2	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
3	a	a	DET	DT	Definite=Ind|PronType=Art	5	det	5:det	Entity=(object-33
4	small	small	ADJ	JJ	Degree=Pos	5	amod	5:amod	_
5	lip	lip	NOUN	NN	Number=Sing	2	nsubj	2:nsubj|16:nsubj	_
6	in	in	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(place-34
8	front	front	NOUN	NN	Number=Sing	5	nmod	5:nmod:in	_
9	of	of	ADP	IN	_	11	case	11:case	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	Entity=(object-27
11	head	head	NOUN	NN	Number=Sing	8	nmod	8:nmod:of	Entity=place-34)object-27)
12	that	that	PRON	WDT	PronType=Rel	16	nsubj	5:ref	Discourse=elaboration:32->31
13	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	16	cop	16:cop	_
14	a	a	DET	DT	Definite=Ind|PronType=Art	15	det	15:det	_
15	little	little	ADJ	JJ	Degree=Pos	16	obl:npmod	16:obl:npmod	_
16	tricky	tricky	ADJ	JJ	Degree=Pos	5	acl:relcl	5:acl:relcl	SpaceAfter=No
17	,	,	PUNCT	,	_	20	punct	20:punct	_
18	but	but	CCONJ	CC	_	20	cc	20:cc	Discourse=contrast:33->31
19	should	should	AUX	MD	VerbForm=Fin	20	aux	20:aux	_
20	come	come	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	16	conj	5:acl:relcl|16:conj:but	_
21	loose	loose	ADJ	JJ	Degree=Pos	20	advmod	20:advmod	Entity=object-33)
22	after	after	ADP	IN	_	26	case	26:case	_
23	a	a	DET	DT	Definite=Ind|PronType=Art	26	det	26:det	Entity=(object-35
24	little	little	ADJ	JJ	Degree=Pos	26	amod	26:amod	_
25	light	light	NOUN	NN	Number=Sing	26	compound	26:compound	Entity=(abstract-36)
26	twisting	twisting	NOUN	NN	Number=Sing	20	obl	20:obl:after	Entity=object-35)
27	and	and	CCONJ	CC	_	28	cc	28:cc	_
28	turning	turn	VERB	VBG	VerbForm=Ger	26	conj	20:obl:after|26:conj:and	SpaceAfter=No
29	.	.	PUNCT	.	_	2	punct	2:punct	_

# sent_id = AMALGUM_whow_rumble-18
# s_type = imp
# text = Disconnect the cable from the motherboard that connects the head to the body.
# newpar = item (14 s)
1	Disconnect	disconnect	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:34->15
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-37
3	cable	cable	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-37)
4	from	from	ADP	IN	_	6	case	6:case	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-38
6	motherboard	motherboard	NOUN	NN	Number=Sing	1	obl	1:obl:from|8:nsubj	_
7	that	that	PRON	WDT	PronType=Rel	8	nsubj	6:ref	Discourse=elaboration:35->34
8	connects	connect	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	acl:relcl	6:acl:relcl	_
9	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(object-27
10	head	head	NOUN	NN	Number=Sing	8	obj	8:obj	Entity=object-27)
11	to	to	ADP	IN	_	13	case	13:case	_
12	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(object-29
13	body	body	NOUN	NN	Number=Sing	8	obl	8:obl:to	Entity=object-38)object-29)|SpaceAfter=No
14	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-19
# s_type = imp
# text = Using a small screwdriver, pry back the tabs keeping the board down, and pop the board out.
1	Using	use	VERB	VBG	VerbForm=Ger	6	advcl	6:advcl	Discourse=means:36->34
2	a	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Entity=(object-31
3	small	small	ADJ	JJ	Degree=Pos	4	amod	4:amod	_
4	screwdriver	screwdriver	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-31)|SpaceAfter=No|XML=<ref target:::"https://www.wikihow.com/wiki/Magnetize_a_Screwdriver"></ref>
5	,	,	PUNCT	,	_	1	punct	1:punct	_
6	pry	pry	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=joint:37->36
7	back	back	ADV	RB	Degree=Pos	6	advmod	6:advmod	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-39
9	tabs	tab	NOUN	NNS	Number=Plur	6	obj	6:obj	_
10	keeping	keep	VERB	VBG	VerbForm=Ger	9	acl	9:acl	Discourse=elaboration:38->37
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-40
12	board	board	NOUN	NN	Number=Sing	10	obj	10:obj	Entity=object-40)
13	down	down	ADV	RB	Degree=Pos	10	advmod	10:advmod	Entity=object-39)|SpaceAfter=No
14	,	,	PUNCT	,	_	16	punct	16:punct	_
15	and	and	CCONJ	CC	_	16	cc	16:cc	Discourse=joint:39->38
16	pop	pop	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	6	conj	6:conj:and	_
17	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(object-40
18	board	board	NOUN	NN	Number=Sing	16	obj	16:obj	Entity=object-40)
19	out	out	ADP	RP	_	16	compound:prt	16:compound:prt	SpaceAfter=No
20	.	.	PUNCT	.	_	6	punct	6:punct	_

# sent_id = AMALGUM_whow_rumble-20
# s_type = sub
# text = You should now have just the naked board.
# trailing_xml = <figure rend:::"Dino_fab_4_153.jpg"></figure>
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	4	nsubj	4:nsubj	Discourse=sequence:40->15|Entity=(person-3)
2	should	should	AUX	MD	VerbForm=Fin	4	aux	4:aux	_
3	now	now	ADV	RB	_	4	advmod	4:advmod	_
4	have	have	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	just	just	ADV	RB	_	8	advmod	8:advmod	Entity=(object-40
6	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	_
7	naked	naked	ADJ	JJ	Degree=Pos	8	amod	8:amod	_
8	board	board	NOUN	NN	Number=Sing	4	obj	4:obj	Entity=object-40)|SpaceAfter=No
9	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_rumble-21
# s_type = sub
# text = You should see the black micro processor that makes the bot move backward and forward.
# newpar = list type:::"unordered" (11 s) | item (2 s)
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=elaboration:41->40|Entity=(person-3)
2	should	should	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	see	see	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(object-41
5	black	black	ADJ	JJ	Degree=Pos	7	amod	7:amod	_
6	micro	micro	NOUN	NN	Number=Sing	7	compound	7:compound	Entity=(abstract-42)
7	processor	processor	NOUN	NN	Number=Sing	3	obj	3:obj|9:nsubj	_
8	that	that	PRON	WDT	PronType=Rel	9	nsubj	7:ref	Discourse=elaboration:42->41
9	makes	make	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	7	acl:relcl	7:acl:relcl	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	Entity=(person-10
11	bot	bot	NOUN	NN	Number=Sing	9	obj	9:obj	Entity=person-10)
12	move	move	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	9	ccomp	9:ccomp	_
13	backward	backward	ADV	RB	Degree=Pos	12	advmod	12:advmod	_
14	and	and	CCONJ	CC	_	15	cc	15:cc	_
15	forward	forward	ADV	RB	Degree=Pos	13	conj	12:advmod|13:conj:and	Entity=object-41)|SpaceAfter=No
16	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-22
# s_type = decl
# text = This is what we'll be hacking and wiring into.
# trailing_xml = <figure rend:::"Dino_fab_5_702.jpg"></figure>
1	This	this	PRON	DT	Number=Sing|PronType=Dem	3	nsubj	3:nsubj	Discourse=elaboration:43->41|Entity=(object-41)
2	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	cop	3:cop	_
3	what	what	PRON	WP	PronType=Rel	0	root	0:root	_
4-5	we'll	_	_	_	_	_	_	_	_
4	we	we	PRON	PRP	Case=Nom|Number=Plur|Person=1|PronType=Prs	7	nsubj	7:nsubj|9:nsubj	Entity=(person-43)
5	'll	will	AUX	MD	VerbForm=Fin	7	aux	7:aux|9:aux	_
6	be	be	AUX	VB	VerbForm=Inf	7	aux	7:aux|9:aux	_
7	hacking	hack	VERB	VBG	Tense=Pres|VerbForm=Part	3	acl:relcl	3:acl:relcl	_
8	and	and	CCONJ	CC	_	9	cc	9:cc	_
9	wiring	wire	VERB	VBG	VerbForm=Ger	7	conj	3:acl:relcl|7:conj:and	_
10	into	into	ADP	IN	_	7	obl	7:obl	SpaceAfter=No
11	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-23
# s_type = decl
# text = These are the pin outs on the board where you'll need to connect new wires.
# newpar = item (9 s)
1	These	this	PRON	DT	Number=Plur|PronType=Dem	5	nsubj	5:nsubj	Discourse=elaboration:44->40|Entity=(object-39)
2	are	be	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	5	cop	5:cop	_
3	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-39
4	pin	pin	NOUN	NN	Number=Sing	5	compound	5:compound	Entity=(object-44)
5	outs	out	NOUN	NNS	Number=Plur	0	root	0:root	_
6	on	on	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-40
8	board	board	NOUN	NN	Number=Sing	5	nmod	5:nmod:on	Entity=object-40)
9	where	where	SCONJ	WRB	PronType=Rel	12	mark	12:mark	Discourse=elaboration:45->44
10-11	you'll	_	_	_	_	_	_	_	_
10	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	12	nsubj	12:nsubj|14:nsubj:xsubj	Entity=(person-3)
11	'll	will	AUX	MD	VerbForm=Fin	12	aux	12:aux	_
12	need	need	VERB	VB	VerbForm=Inf	5	acl:relcl	5:acl:relcl	_
13	to	to	PART	TO	_	14	mark	14:mark	_
14	connect	connect	VERB	VB	VerbForm=Inf	12	xcomp	12:xcomp	_
15	new	new	ADJ	JJ	Degree=Pos	16	amod	16:amod	Entity=(object-45
16	wires	wire	NOUN	NNS	Number=Plur	14	obj	14:obj	Entity=object-39)object-45)|SpaceAfter=No
17	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-24
# s_type = decl
# text = The main pins we're concerned with are the four that operate the drive motors.
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=sequence:46->15|Entity=(object-46
2	main	main	ADJ	JJ	Degree=Pos	3	amod	3:amod	_
3	pins	pin	NOUN	NNS	Number=Plur	10	nsubj	10:nsubj	_
4	we	we	PRON	PRP	Case=Nom|Number=Plur|Person=1|PronType=Prs	6	nsubj:pass	6:nsubj:pass	Discourse=elaboration:47->46|Entity=(person-43)|SpaceAfter=No
5	're	be	AUX	VBP	Mood=Ind|Number=Plur|Person=1|Tense=Pres|VerbForm=Fin	6	aux:pass	6:aux:pass	_
6	concerned	concern	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	3	acl:relcl	3:acl:relcl	_
7	with	with	ADP	IN	_	6	obl	6:obl	Entity=object-46)
8	are	be	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	10	cop	10:cop	_
9	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(abstract-47
10	four	4	NUM	CD	NumForm=Digit|NumType=Card	0	root	0:root|12:nsubj	_
11	that	that	PRON	WDT	PronType=Rel	12	nsubj	10:ref	Discourse=elaboration:48->47
12	operate	operate	VERB	VBP	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	10	acl:relcl	10:acl:relcl	_
13	the	the	DET	DT	Definite=Def|PronType=Art	15	det	15:det	Entity=(object-48
14	drive	drive	NOUN	NN	Number=Sing	15	compound	15:compound	Entity=(event-49)
15	motors	motor	NOUN	NNS	Number=Plur	12	obj	12:obj	Entity=abstract-47)object-48)|SpaceAfter=No
16	.	.	PUNCT	.	_	10	punct	10:punct	_

# sent_id = AMALGUM_whow_rumble-25
# s_type = decl
# text = They are connected to the "H-Bridge" that will allow us to trigger the motors to rotate forward or reverse by applying a positive voltage to one of two wires for each motor.
1	They	they	PRON	PRP	Case=Nom|Number=Plur|Person=3|PronType=Prs	3	nsubj:pass	3:nsubj:pass	Discourse=elaboration:49->46|Entity=(object-48)
2	are	be	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	3	aux:pass	3:aux:pass	_
3	connected	connect	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	0	root	0:root	_
4	to	to	ADP	IN	_	7	case	7:case	_
5	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(abstract-50
6	"	''	PUNCT	``	_	7	punct	7:punct	SpaceAfter=No
7	H-Bridge	H-Bridge	PROPN	NNP	Number=Sing	3	obl	3:obl:to|11:nsubj	SpaceAfter=No
8	"	''	PUNCT	''	_	7	punct	7:punct	_
9	that	that	PRON	WDT	PronType=Rel	11	nsubj	7:ref	Discourse=elaboration:50->49
10	will	will	AUX	MD	VerbForm=Fin	11	aux	11:aux	_
11	allow	allow	VERB	VB	VerbForm=Inf	7	acl:relcl	7:acl:relcl	_
12	us	we	PRON	PRP	Case=Acc|Number=Plur|Person=1|PronType=Prs	11	obj	11:obj|14:nsubj:xsubj	Entity=(person-43)
13	to	to	PART	TO	_	14	mark	14:mark	_
14	trigger	trigger	VERB	VB	VerbForm=Inf	11	xcomp	11:xcomp	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(object-48
16	motors	motor	NOUN	NNS	Number=Plur	14	obj	14:obj|18:nsubj:xsubj	Entity=object-48)
17	to	to	PART	TO	_	18	mark	18:mark	_
18	rotate	rotate	VERB	VB	VerbForm=Inf	14	xcomp	14:xcomp	_
19	forward	forward	ADV	RB	Degree=Pos	18	advmod	18:advmod	_
20	or	or	CCONJ	CC	_	21	cc	21:cc	_
21	reverse	reverse	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	19	conj	18:advmod|19:conj:or	Entity=abstract-50)
22	by	by	SCONJ	IN	_	23	mark	23:mark	Discourse=means:51->50
23	applying	apply	VERB	VBG	VerbForm=Ger	14	advcl	14:advcl:by	_
24	a	a	DET	DT	Definite=Ind|PronType=Art	26	det	26:det	Entity=(abstract-51
25	positive	positive	ADJ	JJ	Degree=Pos	26	amod	26:amod	_
26	voltage	voltage	NOUN	NN	Number=Sing	23	obj	23:obj	Entity=abstract-51)
27	to	to	ADP	IN	_	28	case	28:case	_
28	one	one	NUM	CD	NumForm=Word|NumType=Card	23	obl	23:obl:to	Entity=(place-52
29	of	of	ADP	IN	_	31	case	31:case	_
30	two	2	NUM	CD	NumForm=Digit|NumType=Card	31	nummod	31:nummod	Entity=(object-45
31	wires	wire	NOUN	NNS	Number=Plur	28	nmod	28:nmod:of	_
32	for	for	ADP	IN	_	34	case	34:case	_
33	each	each	DET	DT	_	34	det	34:det	Entity=(object-53
34	motor	motor	NOUN	NN	Number=Sing	31	nmod	31:nmod:for	Entity=place-52)object-45)object-53)|SpaceAfter=No
35	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-26
# s_type = decl
# text = There is one for forward and one for reverse on each motor.
1	There	there	PRON	EX	_	2	expl	2:expl	Discourse=sequence:52->15
2	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
3	one	one	NUM	CD	NumForm=Word|NumType=Card	2	nsubj	2:nsubj	Entity=(person-54
4	for	for	ADP	IN	_	5	case	5:case	_
5	forward	forward	NOUN	NN	Number=Sing	3	nmod	3:nmod:for	Entity=person-54)(person-55)
6	and	and	CCONJ	CC	_	7	cc	7:cc	_
7	one	one	NUM	CD	NumForm=Word|NumType=Card	3	conj	2:nsubj|3:conj:and	Entity=(place-52
8	for	for	ADP	IN	_	9	case	9:case	_
9	reverse	reverse	NOUN	NN	Number=Sing	7	nmod	7:nmod:for	Entity=(event-56)
10	on	on	ADP	IN	_	12	case	12:case	_
11	each	each	DET	DT	_	12	det	12:det	Entity=(object-53
12	motor	motor	NOUN	NN	Number=Sing	7	nmod	7:nmod:on	Entity=place-52)object-53)|SpaceAfter=No
13	.	.	PUNCT	.	_	2	punct	2:punct	_

# sent_id = AMALGUM_whow_rumble-27
# s_type = decl
# text = They are connected as follows:
# trailing_xml = <figure rend:::"Dino_fab_6_216.jpg"></figure>
1	They	they	PRON	PRP	Case=Nom|Number=Plur|Person=3|PronType=Prs	3	nsubj:pass	3:nsubj:pass	Discourse=preparation:53->54|Entity=(object-45)
2	are	be	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	3	aux:pass	3:aux:pass	_
3	connected	connect	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	0	root	0:root	_
4	as	as	SCONJ	IN	_	5	mark	5:mark	_
5	follows	follow	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	advcl	3:advcl:as	SpaceAfter=No
6	:	:	PUNCT	:	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-28
# s_type = frag
# text = Pin 1.0 Left motor FORWARD
# newpar = list type:::"unordered" (4 s) | item (1 s)
1	Pin	pin	NOUN	NN	Number=Sing	0	root	0:root	Discourse=sequence:54->15|Entity=(object-57
2	1.0	1.0	NUM	CD	NumForm=Digit|NumType=Card	1	dep	1:dep	Entity=object-57)
3	Left	Left	ADJ	JJ	Degree=Pos	4	amod	4:amod	Entity=(object-57
4	motor	motor	NOUN	NN	Number=Sing	1	appos	1:appos	_
5	FORWARD	forward	ADV	NNP	Number=Sing	4	advmod	4:advmod	Entity=object-57)(person-55)

# sent_id = AMALGUM_whow_rumble-29
# s_type = frag
# text = Pin 1.1 Left motor REVERSE
# newpar = item (1 s)
1	Pin	pin	NOUN	NN	Number=Sing	5	compound	5:compound	Discourse=sequence:55->54|Entity=(event-56(object-58
2	1.1	1.1	NUM	CD	NumForm=Digit|NumType=Card	1	dep	1:dep	Entity=object-58)
3	Left	Left	ADJ	JJ	Degree=Pos	4	amod	4:amod	Entity=(object-57
4	motor	motor	NOUN	NN	Number=Sing	5	compound	5:compound	Entity=object-57)
5	REVERSE	reverse	NOUN	NN	Number=Sing	0	root	0:root	Entity=event-56)

# sent_id = AMALGUM_whow_rumble-30
# s_type = frag
# text = Pin 1.2 Right motor FORWARD
# newpar = item (1 s)
1	Pin	pin	NOUN	NN	Number=Sing	4	compound	4:compound	Discourse=sequence:56->54|Entity=(object-53(object-59
2	1.2	1.2	NUM	CD	NumForm=Digit|NumType=Card	1	dep	1:dep	Entity=object-59)
3	Right	right	ADJ	JJ	Degree=Pos	4	amod	4:amod	_
4	motor	motor	NOUN	NN	Number=Sing	0	root	0:root	_
5	FORWARD	forward	ADV	NNP	Number=Sing	4	advmod	4:advmod	Entity=object-53)(person-55)

# sent_id = AMALGUM_whow_rumble-31
# s_type = frag
# text = Pin 1.3 Right motor REVERSE
# newpar = item (1 s)
1	Pin	pin	NOUN	NN	Number=Sing	5	compound	5:compound	Discourse=sequence:57->54|Entity=(event-56(object-60
2	1.3	1.3	NUM	CD	NumForm=Digit|NumType=Card	1	dep	1:dep	Entity=object-60)
3	Right	right	ADJ	JJ	Degree=Pos	4	amod	4:amod	Entity=(object-53
4	motor	motor	NOUN	NN	Number=Sing	5	compound	5:compound	Entity=object-53)
5	REVERSE	reverse	NOUN	NN	Number=Sing	0	root	0:root	Entity=event-56)

# sent_id = AMALGUM_whow_rumble-32
# s_type = imp
# text = Solder the wires that will go out to the Arduino.
# newpar = item (2 s)
1	Solder	solder	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:58->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-45
3	wires	wire	NOUN	NNS	Number=Plur	1	obj	1:obj|6:nsubj	_
4	that	that	PRON	WDT	PronType=Rel	6	nsubj	3:ref	Discourse=elaboration:59->58
5	will	will	AUX	MD	VerbForm=Fin	6	aux	6:aux	_
6	go	go	VERB	VB	VerbForm=Inf	3	acl:relcl	3:acl:relcl	_
7	out	out	ADP	RP	_	6	compound:prt	6:compound:prt	_
8	to	to	ADP	IN	_	10	case	10:case	_
9	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(place-5
10	Arduino	Arduino	PROPN	NNP	Number=Sing	6	obl	6:obl:to	Entity=object-45)place-5)|SpaceAfter=No
11	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-33
# s_type = decl
# text = In this photo we see the ground wire which is connected to the pin labeled in the photo on the white connector and the other four wires soldered in place.
# trailing_xml = <figure rend:::"Dino_fab_7_578.jpg"></figure>
1	In	in	ADP	IN	_	3	case	3:case	Discourse=sequence:60->54
2	this	this	DET	DT	Number=Sing|PronType=Dem	3	det	3:det	Entity=(abstract-61
3	photo	photo	NOUN	NN	Number=Sing	5	obl	5:obl:in	Entity=abstract-61)
4	we	we	PRON	PRP	Case=Nom|Number=Plur|Person=1|PronType=Prs	5	nsubj	5:nsubj	Discourse=elaboration:61->60|Entity=(person-43)
5	see	see	VERB	VBP	Mood=Ind|Number=Plur|Person=1|Tense=Pres|VerbForm=Fin	0	root	0:root	_
6	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-37
7	ground	ground	NOUN	NN	Number=Sing	8	compound	8:compound	Entity=(place-62)
8	wire	wire	NOUN	NN	Number=Sing	5	obj	5:obj|11:nsubj:pass	_
9	which	which	PRON	WDT	PronType=Rel	11	nsubj:pass	8:ref	Discourse=elaboration:62->61
10	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	11	aux:pass	11:aux:pass	_
11	connected	connect	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	8	acl:relcl	8:acl:relcl	_
12	to	to	ADP	IN	_	14	case	14:case	_
13	the	the	DET	DT	Definite=Def|PronType=Art	14	det	14:det	Entity=(object-44
14	pin	pin	NOUN	NN	Number=Sing	11	obl	11:obl:to	_
15	labeled	label	VERB	VBN	Tense=Past|VerbForm=Part	14	acl	14:acl	Discourse=elaboration:63->62
16	in	in	ADP	IN	_	18	case	18:case	_
17	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(abstract-61
18	photo	photo	NOUN	NN	Number=Sing	15	obl	15:obl:in	Entity=abstract-61)
19	on	on	ADP	IN	_	22	case	22:case	_
20	the	the	DET	DT	Definite=Def|PronType=Art	22	det	22:det	Entity=(object-63
21	white	white	ADJ	JJ	Degree=Pos	22	amod	22:amod	_
22	connector	connector	NOUN	NN	Number=Sing	15	obl	15:obl:on	Entity=object-63)
23	and	and	CCONJ	CC	_	27	cc	27:cc	Discourse=joint:64->62
24	the	the	DET	DT	Definite=Def|PronType=Art	27	det	27:det	Entity=(object-45
25	other	other	ADJ	JJ	Degree=Pos	27	amod	27:amod	_
26	four	4	NUM	CD	NumForm=Digit|NumType=Card	27	nummod	27:nummod	_
27	wires	wire	NOUN	NNS	Number=Plur	22	conj	15:obl:on|22:conj:and	_
28	soldered	solder	VERB	VBN	Tense=Past|VerbForm=Part	27	acl	27:acl	_
29	in	in	ADP	IN	_	30	case	30:case	_
30	place	place	NOUN	NN	Number=Sing	28	obl	28:obl:in	Entity=object-37)object-44)object-45)|SpaceAfter=No
31	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-34
# s_type = imp
# text = Unscrew the upper body and pull it apart.
# newpar = item (1 s)
# trailing_xml = <figure rend:::"Dino_fab_8_338.jpg"></figure>
1	Unscrew	unscrew	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:65->54
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(object-29
3	upper	upper	ADJ	JJ	Degree=Pos	4	amod	4:amod	_
4	body	body	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-29)
5	and	and	CCONJ	CC	_	6	cc	6:cc	Discourse=sequence:66->54
6	pull	pull	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
7	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	6	obj	6:obj	Entity=(object-29)
8	apart	apart	ADV	RB	Degree=Pos	6	advmod	6:advmod	SpaceAfter=No
9	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-35
# s_type = imp
# text = Wire everything together using this schematic.
# newpar = item (24 s)
1	Wire	wire	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:67->54
2	everything	everything	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=(abstract-64)
3	together	together	ADV	RB	Degree=Pos	1	advmod	1:advmod	_
4	using	use	VERB	VBG	VerbForm=Ger	1	advcl	1:advcl	Discourse=means:68->67
5	this	this	DET	DT	Number=Sing|PronType=Dem	6	det	6:det	Entity=(abstract-65
6	schematic	schematic	NOUN	NN	Number=Sing	4	obj	4:obj	Entity=abstract-65)|SpaceAfter=No
7	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-36
# s_type = decl
# text = The video demonstrates how everything is put together.
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=attribution:69->70|Entity=(abstract-66
2	video	video	NOUN	NN	Number=Sing	3	nsubj	3:nsubj	Entity=abstract-66)
3	demonstrates	demonstrate	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
4	how	how	SCONJ	WRB	PronType=Rel	3	obj	3:obj	Discourse=sequence:70->54
5	everything	everything	NOUN	NN	Number=Sing	7	nsubj:pass	7:nsubj:pass	Entity=(abstract-64)
6	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	7	aux:pass	7:aux:pass	_
7	put	put	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	4	acl:relcl	4:acl:relcl	_
8	together	together	ADV	RB	Degree=Pos	7	advmod	7:advmod	SpaceAfter=No
9	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-37
# s_type = imp
# text = Make your wires at least 5" in length to make it easier to mount everything up.
# trailing_xml = <figure rend:::"Schematic_260.jpg"></figure>
1	Make	make	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:71->54
2	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	3	nmod:poss	3:nmod:poss	Entity=(object-45(person-3)
3	wires	wire	NOUN	NNS	Number=Plur	1	obj	1:obj	Entity=object-45)
4	at	at	ADP	IN	_	5	case	5:case	_
5	least	least	ADJ	JJS	Degree=Sup	6	advmod	6:advmod	_
6	5	5	NUM	CD	NumForm=Digit|NumType=Card	7	nummod	7:nummod	SpaceAfter=No
7	"	''	SYM	SYM	_	1	obl	1:obl	_
8	in	in	ADP	IN	_	9	case	9:case	_
9	length	length	NOUN	NN	Number=Sing	1	obl	1:obl:in	Entity=(abstract-67)
10	to	to	PART	TO	_	11	mark	11:mark	Discourse=purpose:72->71
11	make	make	VERB	VB	VerbForm=Inf	1	advcl	1:advcl:to	_
12	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	11	obj	11:obj|13:nsubj:xsubj	Entity=(abstract-67)
13	easier	easy	ADJ	JJR	Degree=Cmp	11	xcomp	11:xcomp	_
14	to	to	PART	TO	_	15	mark	15:mark	_
15	mount	mount	VERB	VB	VerbForm=Inf	13	xcomp	13:xcomp	_
16	everything	everything	NOUN	NN	Number=Sing	15	obj	15:obj	Entity=(abstract-64)
17	up	up	ADP	RP	_	15	compound:prt	15:compound:prt	SpaceAfter=No
18	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-38
# s_type = decl
# text = The schematic shown in this article assumes that there will be one sensor on the front of the bot.
# newpar = list type:::"unordered" (21 s) | item (3 s)
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=sequence:73->54|Entity=(abstract-65
2	schematic	schematic	NOUN	NN	Number=Sing	7	nsubj	7:nsubj	_
3	shown	show	VERB	VBN	Tense=Past|VerbForm=Part	2	acl	2:acl	Discourse=attribution:74->75
4	in	in	ADP	IN	_	6	case	6:case	_
5	this	this	DET	DT	Number=Sing|PronType=Dem	6	det	6:det	Entity=(abstract-68
6	article	article	NOUN	NN	Number=Sing	3	obl	3:obl:in	Entity=abstract-65)abstract-68)
7	assumes	assume	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
8	that	that	SCONJ	IN	_	11	mark	11:mark	Discourse=elaboration:75->73
9	there	there	PRON	EX	_	11	expl	11:expl	_
10	will	will	AUX	MD	VerbForm=Fin	11	aux	11:aux	_
11	be	be	VERB	VB	VerbForm=Inf	7	ccomp	7:ccomp	_
12	one	one	NUM	CD	NumForm=Word|NumType=Card	13	nummod	13:nummod	Entity=(object-69
13	sensor	sensor	NOUN	NN	Number=Sing	11	nsubj	11:nsubj	_
14	on	on	ADP	IN	_	16	case	16:case	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(place-70
16	front	front	NOUN	NN	Number=Sing	13	nmod	13:nmod:on	_
17	of	of	ADP	IN	_	19	case	19:case	_
18	the	the	DET	DT	Definite=Def|PronType=Art	19	det	19:det	Entity=(person-10
19	bot	bot	NOUN	NN	Number=Sing	16	nmod	16:nmod:of	Entity=object-69)place-70)person-10)|SpaceAfter=No
20	.	.	PUNCT	.	_	7	punct	7:punct	_

# sent_id = AMALGUM_whow_rumble-39
# s_type = decl
# text = The video below shows how you can make both the arms sense obstacles, but this will require an extra bump switch (connected to Pin 3 and the ground wire) as described in the video section.
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=attribution:76->77|Entity=(abstract-66
2	video	video	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	_
3	below	below	ADV	RB	Degree=Pos	2	advmod	2:advmod	Entity=abstract-66)
4	shows	show	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
5	how	how	SCONJ	WRB	PronType=Rel	4	obj	4:obj	Discourse=sequence:77->54
6	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	8	nsubj	8:nsubj	Entity=(person-3)
7	can	can	AUX	MD	VerbForm=Fin	8	aux	8:aux	_
8	make	make	VERB	VB	VerbForm=Inf	5	acl:relcl	5:acl:relcl	_
9	both	both	ADV	RB	Degree=Pos	11	det:predet	11:det:predet	Entity=(object-71
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	_
11	arms	arm	NOUN	NNS	Number=Plur	8	obj	8:obj	Entity=object-71)
12	sense	sense	NOUN	NN	Number=Sing	8	ccomp	8:ccomp	_
13	obstacles	obstacle	NOUN	NNS	Number=Plur	12	obj	12:obj	Entity=(object-72)|SpaceAfter=No
14	,	,	PUNCT	,	_	18	punct	18:punct	_
15	but	but	CCONJ	CC	_	18	cc	18:cc	Discourse=sequence:78->54
16	this	this	PRON	DT	Number=Sing|PronType=Dem	18	nsubj	18:nsubj	Entity=(abstract-66)
17	will	will	AUX	MD	VerbForm=Fin	18	aux	18:aux	_
18	require	require	VERB	VB	VerbForm=Inf	4	conj	4:conj:but	_
19	an	a	DET	DT	Definite=Ind|PronType=Art	22	det	22:det	Entity=(object-73
20	extra	extra	ADJ	JJ	Degree=Pos	22	amod	22:amod	_
21	bump	bump	NOUN	NN	Number=Sing	22	compound	22:compound	Entity=(object-74)
22	switch	switch	NOUN	NN	Number=Sing	18	obj	18:obj	_
23	(	(	PUNCT	-LRB-	_	24	punct	24:punct	Discourse=elaboration:79->78|SpaceAfter=No
24	connected	connect	VERB	VBN	Tense=Past|VerbForm=Part	22	acl	22:acl	_
25	to	to	ADP	IN	_	26	case	26:case	_
26	Pin	Pin	PROPN	NNP	Number=Sing	24	obl	24:obl:to	Entity=(object-75
27	3	3	NUM	CD	NumForm=Digit|NumType=Card	26	dep	26:dep	Entity=object-75)
28	and	and	CCONJ	CC	_	31	cc	31:cc	_
29	the	the	DET	DT	Definite=Def|PronType=Art	31	det	31:det	Entity=(object-37
30	ground	ground	NOUN	NN	Number=Sing	31	compound	31:compound	Entity=(place-62)
31	wire	wire	NOUN	NN	Number=Sing	26	conj	24:obl:to|26:conj:and	Entity=object-37)|SpaceAfter=No
32	)	)	PUNCT	-RRB-	_	24	punct	24:punct	_
33	as	as	SCONJ	IN	_	34	mark	34:mark	Discourse=same_unit:80->78
34	described	describe	VERB	VBN	Tense=Past|VerbForm=Part	22	acl	22:acl:as	_
35	in	in	ADP	IN	_	38	case	38:case	_
36	the	the	DET	DT	Definite=Def|PronType=Art	38	det	38:det	Entity=(abstract-68
37	video	video	NOUN	NN	Number=Sing	38	compound	38:compound	Entity=(abstract-66)
38	section	section	NOUN	NN	Number=Sing	34	obl	34:obl:in	Entity=object-73)abstract-68)|SpaceAfter=No
39	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_rumble-40
# s_type = decl
# text = The code will also need to be changed accordingly.
# trailing_xml = <figure rend:::"Dino_fab_9_540.jpg"></figure>
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=sequence:81->54|Entity=(abstract-76
2	code	code	NOUN	NN	Number=Sing	5	nsubj	5:nsubj|8:nsubj:xsubj	Entity=abstract-76)
3	will	will	AUX	MD	VerbForm=Fin	5	aux	5:aux	_
4	also	also	ADV	RB	_	5	advmod	5:advmod	_
5	need	need	VERB	VB	VerbForm=Inf	0	root	0:root	_
6	to	to	PART	TO	_	8	mark	8:mark	_
7	be	be	AUX	VB	VerbForm=Inf	8	aux:pass	8:aux:pass	_
8	changed	change	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	5	xcomp	5:xcomp	_
9	accordingly	accordingly	ADV	RB	Degree=Pos	8	advmod	8:advmod	SpaceAfter=No
10	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-41
# s_type = imp
# text = If you mount everything on top of the chassis where the head used to be and mount the bump switch on the front, use a micro switch and glue on some pieces of wire from a paper clip as whiskers.
# newpar = item (7 s)
1	If	if	SCONJ	IN	_	3	mark	3:mark	Discourse=condition:82->85
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj|17:nsubj	Entity=(person-3)
3	mount	mount	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	25	advcl	25:advcl:if	_
4	everything	everything	NOUN	NN	Number=Sing	3	obj	3:obj	Entity=(abstract-64)
5	on	on	ADP	IN	_	6	case	6:case	_
6	top	top	NOUN	NN	Number=Sing	3	obl	3:obl:on	Entity=(place-77
7	of	of	ADP	IN	_	9	case	9:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-78
9	chassis	chassis	NOUN	NN	Number=Sing	6	nmod	6:nmod:of	_
10	where	where	SCONJ	WRB	PronType=Rel	13	mark	13:mark	Discourse=elaboration:83->82
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-79
12	head	head	NOUN	NN	Number=Sing	13	nsubj	13:nsubj|15:nsubj:xsubj	Entity=object-79)
13	used	use	VERB	VBD	Mood=Ind|Number=Sing|Person=3|Tense=Past|VerbForm=Fin	9	acl:relcl	9:acl:relcl	_
14	to	to	PART	TO	_	15	mark	15:mark	_
15	be	be	VERB	VB	VerbForm=Inf	13	xcomp	13:xcomp	Entity=place-77)object-78)
16	and	and	CCONJ	CC	_	17	cc	17:cc	Discourse=joint:84->82
17	mount	mount	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	3	conj	3:conj:and|25:advcl:if	_
18	the	the	DET	DT	Definite=Def|PronType=Art	20	det	20:det	Entity=(object-73
19	bump	bump	NOUN	NN	Number=Sing	20	compound	20:compound	Entity=(object-74)
20	switch	switch	NOUN	NN	Number=Sing	17	obj	17:obj	Entity=object-73)
21	on	on	ADP	IN	_	23	case	23:case	_
22	the	the	DET	DT	Definite=Def|PronType=Art	23	det	23:det	Entity=(place-70
23	front	front	NOUN	NN	Number=Sing	17	obl	17:obl:on	Entity=place-70)|SpaceAfter=No
24	,	,	PUNCT	,	_	3	punct	3:punct	_
25	use	use	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:85->54
26	a	a	DET	DT	Definite=Ind|PronType=Art	28	det	28:det	Entity=(object-73
27	micro	micro	NOUN	NN	Number=Sing	28	compound	28:compound	Entity=(abstract-42)
28	switch	switch	NOUN	NN	Number=Sing	25	obj	25:obj	Entity=object-73)
29	and	and	CCONJ	CC	_	30	cc	30:cc	Discourse=joint:86->85
30	glue	glue	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	25	conj	25:conj:and	_
31	on	on	ADP	IN	_	30	compound:prt	30:compound:prt	_
32	some	some	DET	DT	_	33	det	33:det	Entity=(object-80
33	pieces	piece	NOUN	NNS	Number=Plur	30	obj	30:obj	_
34	of	of	ADP	IN	_	35	case	35:case	_
35	wire	wire	NOUN	NN	Number=Sing	33	nmod	33:nmod:of	Entity=(object-37
36	from	from	ADP	IN	_	39	case	39:case	_
37	a	a	DET	DT	Definite=Ind|PronType=Art	39	det	39:det	Entity=(object-81
38	paper	paper	NOUN	NN	Number=Sing	39	compound	39:compound	Entity=(object-82)
39	clip	clip	NOUN	NN	Number=Sing	35	nmod	35:nmod:from	Entity=object-80)object-37)object-81)
40	as	as	ADP	IN	_	41	case	41:case	_
41	whiskers	whisker	NOUN	NNS	Number=Plur	30	obl	30:obl:as	Entity=(object-83)|SpaceAfter=No
42	.	.	PUNCT	.	_	25	punct	25:punct	_

# sent_id = AMALGUM_whow_rumble-42
# s_type = sub
# text = The whiskers on the switch should extend left and right the same width as the robot.
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=sequence:87->54|Entity=(object-83
2	whiskers	whisker	NOUN	NNS	Number=Plur	7	nsubj	7:nsubj	_
3	on	on	ADP	IN	_	5	case	5:case	_
4	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-73
5	switch	switch	NOUN	NN	Number=Sing	2	nmod	2:nmod:on	Entity=object-83)object-73)
6	should	should	AUX	MD	VerbForm=Fin	7	aux	7:aux	_
7	extend	extend	VERB	VB	VerbForm=Inf	0	root	0:root	_
8	left	left	ADV	RB	Degree=Pos	7	advmod	7:advmod	_
9	and	and	CCONJ	CC	_	10	cc	10:cc	_
10	right	right	ADV	RB	Degree=Pos	8	conj	7:advmod|8:conj:and	_
11	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(abstract-84
12	same	same	ADJ	JJ	Degree=Pos	13	amod	13:amod	_
13	width	width	NOUN	NN	Number=Sing	7	obj	7:obj	_
14	as	as	ADP	IN	_	16	case	16:case	_
15	the	the	DET	DT	Definite=Def|PronType=Art	16	det	16:det	Entity=(object-85
16	robot	robot	NOUN	NN	Number=Sing	13	nmod	13:nmod:as	Entity=abstract-84)object-85)|SpaceAfter=No
17	.	.	PUNCT	.	_	7	punct	7:punct	_

# sent_id = AMALGUM_whow_rumble-43
# s_type = imp
# text = Add one more whisker pointing down close to the floor.
1	Add	add	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:88->54
2	one	one	NUM	CD	NumForm=Word|NumType=Card	4	nummod	4:nummod	Entity=(object-86
3	more	more	ADJ	JJR	Degree=Cmp	4	amod	4:amod	_
4	whisker	whisker	NOUN	NN	Number=Sing	1	obj	1:obj	_
5	pointing	point	VERB	VBG	VerbForm=Ger	4	acl	4:acl	Discourse=elaboration:89->88
6	down	down	ADV	RB	Degree=Pos	5	advmod	5:advmod	_
7	close	close	ADV	RB	Degree=Pos	5	advmod	5:advmod	_
8	to	to	ADP	IN	_	10	case	10:case	_
9	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(place-87
10	floor	floor	NOUN	NN	Number=Sing	5	obl	5:obl:to	Entity=object-86)place-87)|SpaceAfter=No
11	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-44
# s_type = decl
# text = These will help the bot avoid anything that might not return an echo from the PING sensor.
1	These	this	PRON	DT	Number=Plur|PronType=Dem	3	nsubj	3:nsubj	Discourse=sequence:90->54|Entity=(object-83)
2	will	will	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	help	help	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(person-10
5	bot	bot	NOUN	NN	Number=Sing	3	obj	3:obj|6:nsubj:xsubj	Entity=person-10)
6	avoid	avoid	VERB	VB	VerbForm=Inf	3	xcomp	3:xcomp	_
7	anything	anything	NOUN	NN	Number=Sing	6	obj	6:obj|11:nsubj	Entity=(object-88
8	that	that	PRON	WDT	PronType=Rel	11	nsubj	7:ref	Discourse=elaboration:91->90
9	might	might	AUX	MD	VerbForm=Fin	11	aux	11:aux	_
10	not	not	ADV	RB	Polarity=Neg	11	advmod	11:advmod	_
11	return	return	VERB	VB	VerbForm=Inf	7	acl:relcl	7:acl:relcl	_
12	an	a	DET	DT	Definite=Ind|PronType=Art	13	det	13:det	Entity=(abstract-89
13	echo	echo	NOUN	NN	Number=Sing	11	obj	11:obj	_
14	from	from	ADP	IN	_	17	case	17:case	_
15	the	the	DET	DT	Definite=Def|PronType=Art	17	det	17:det	Entity=(object-69
16	PING	PING	PROPN	NNP	Number=Sing	17	compound	17:compound	Entity=(abstract-90)
17	sensor	sensor	NOUN	NN	Number=Sing	13	nmod	13:nmod:from	Entity=object-88)abstract-89)object-69)|SpaceAfter=No
18	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-45
# s_type = imp
# text = Make sure the PING sensor points towards the front and is at 90 degrees to the floor.
1	Make	make	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:92->54
2	sure	sure	ADJ	JJ	Degree=Pos	1	xcomp	1:xcomp	_
3	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-69
4	PING	PING	PROPN	NNP	Number=Sing	5	compound	5:compound	Entity=(abstract-90)
5	sensor	sensor	NOUN	NN	Number=Sing	6	nsubj	6:nsubj|11:nsubj	Entity=object-69)
6	points	point	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	2	ccomp	2:ccomp	_
7	towards	towards	ADP	IN	_	9	case	9:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(place-70
9	front	front	NOUN	NN	Number=Sing	6	obl	6:obl:towards	Entity=place-70)
10	and	and	CCONJ	CC	_	11	cc	11:cc	Discourse=joint:93->92
11	is	be	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	6	conj	2:ccomp|6:conj:and	_
12	at	at	ADP	IN	_	14	case	14:case	_
13	90	90	NUM	CD	NumForm=Digit|NumType=Card	14	nummod	14:nummod	Entity=(abstract-91
14	degrees	degree	NOUN	NNS	Number=Plur	11	obl	11:obl:at	_
15	to	to	ADP	IN	_	17	case	17:case	_
16	the	the	DET	DT	Definite=Def|PronType=Art	17	det	17:det	Entity=(place-87
17	floor	floor	NOUN	NN	Number=Sing	14	nmod	14:nmod:to	Entity=abstract-91)place-87)|SpaceAfter=No
18	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-46
# s_type = decl
# text = The LED connected to pin 13 blinks each time the PING scans and it can mounted anywhere you like.
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=sequence:94->54|Entity=(object-92
2	LED	LED	PROPN	NNP	Number=Sing	7	nsubj	7:nsubj	_
3	connected	connect	VERB	VBN	Tense=Past|VerbForm=Part	2	acl	2:acl	Discourse=elaboration:95->94
4	to	to	ADP	IN	_	5	case	5:case	_
5	pin	pin	NOUN	NN	Number=Sing	3	obl	3:obl:to	Entity=(object-44
6	13	13	NUM	CD	NumForm=Digit|NumType=Card	5	dep	5:dep	Entity=object-92)object-44)
7	blinks	blink	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
8	each	each	DET	DT	_	9	det	9:det	Entity=(time-93
9	time	time	NOUN	NN	Number=Sing	7	obl:tmod	7:obl:tmod	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	Discourse=elaboration:96->94|Entity=(event-94(abstract-90
11	PING	ping	NOUN	NN	Number=Sing	12	nsubj	12:nsubj	Entity=abstract-90)
12	scans	scan	NOUN	NNS	Number=Plur	9	acl:relcl	9:acl:relcl	Entity=time-93)event-94)
13	and	and	CCONJ	CC	_	16	cc	16:cc	Discourse=joint:97->96
14	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	16	nsubj	16:nsubj	Entity=(abstract-90)
15	can	can	AUX	MD	VerbForm=Fin	16	aux	16:aux	_
16	mounted	mount	VERB	VBN	Tense=Past|VerbForm=Part	7	conj	7:conj:and	_
17	anywhere	anywhere	ADV	RB	_	16	obj	16:obj	_
18	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	19	nsubj	19:nsubj	Discourse=elaboration:98->97|Entity=(person-3)
19	like	like	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	17	acl:relcl	17:acl:relcl	SpaceAfter=No
20	.	.	PUNCT	.	_	7	punct	7:punct	_

# sent_id = AMALGUM_whow_rumble-47
# s_type = decl
# text = The power switch is optional and simply goes in line on the positive battery lead.
# trailing_xml = <figure rend:::"Dino_fab_10_40.jpg"></figure>
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=sequence:99->54|Entity=(object-73
2	power	power	NOUN	NN	Number=Sing	3	compound	3:compound	Entity=(abstract-95)
3	switch	switch	NOUN	NN	Number=Sing	5	nsubj	5:nsubj|8:nsubj	Entity=object-73)
4	is	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	5	cop	5:cop	_
5	optional	optional	ADJ	JJ	Degree=Pos	0	root	0:root	_
6	and	and	CCONJ	CC	_	8	cc	8:cc	Discourse=joint:100->99
7	simply	simply	ADV	RB	Degree=Pos	8	advmod	8:advmod	_
8	goes	go	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	5	conj	5:conj:and	_
9	in	in	ADP	IN	_	10	case	10:case	_
10	line	line	NOUN	NN	Number=Sing	8	obl	8:obl:in	_
11	on	on	ADP	IN	_	15	case	15:case	_
12	the	the	DET	DT	Definite=Def|PronType=Art	15	det	15:det	Entity=(abstract-96
13	positive	positive	ADJ	JJ	Degree=Pos	15	amod	15:amod	_
14	battery	battery	NOUN	NN	Number=Sing	15	compound	15:compound	Entity=(object-97)
15	lead	lead	NOUN	NN	Number=Sing	8	obl	8:obl:on	Entity=abstract-96)|SpaceAfter=No
16	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-48
# s_type = sub
# text = When connecting the motherboard to the microcontroller, you may need to make a notch so that the wires don't get pinched when you put the robot back together.
# newpar = item (1 s)
# trailing_xml = <figure rend:::"Dino_fab_16_501.jpg"></figure>
1	When	when	SCONJ	WRB	PronType=Int	2	mark	2:mark	Discourse=circumstance:101->102
2	connecting	connect	VERB	VBG	VerbForm=Ger	11	advcl	11:advcl:when	_
3	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(object-98
4	motherboard	motherboard	NOUN	NN	Number=Sing	2	obj	2:obj	Entity=object-98)
5	to	to	ADP	IN	_	7	case	7:case	_
6	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(object-99
7	microcontroller	microcontroller	NOUN	NN	Number=Sing	2	obl	2:obl:to	Entity=object-99)|SpaceAfter=No
8	,	,	PUNCT	,	_	2	punct	2:punct	_
9	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	11	nsubj	11:nsubj|13:nsubj:xsubj	Discourse=sequence:102->54|Entity=(person-3)
10	may	may	AUX	MD	VerbForm=Fin	11	aux	11:aux	_
11	need	need	VERB	VB	VerbForm=Inf	0	root	0:root	_
12	to	to	PART	TO	_	13	mark	13:mark	_
13	make	make	VERB	VB	VerbForm=Inf	11	xcomp	11:xcomp	_
14	a	a	DET	DT	Definite=Ind|PronType=Art	15	det	15:det	Entity=(object-100
15	notch	notch	NOUN	NN	Number=Sing	13	obj	13:obj	Entity=object-100)
16	so	so	SCONJ	IN	_	23	mark	23:mark	Discourse=purpose:103->102
17	that	that	ADP	IN	_	16	fixed	16:fixed	_
18	the	the	DET	DT	Definite=Def|PronType=Art	19	det	19:det	Entity=(object-45
19	wires	wire	NOUN	NNS	Number=Plur	23	nsubj:pass	23:nsubj:pass	Entity=object-45)
20-21	don't	_	_	_	_	_	_	_	_
20	do	do	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	23	aux	23:aux	_
21	n't	not	ADV	RB	Polarity=Neg	23	advmod	23:advmod	_
22	get	get	AUX	VB	VerbForm=Inf	23	aux:pass	23:aux:pass	_
23	pinched	pinch	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	13	advcl	13:advcl:so_that	_
24	when	when	SCONJ	WRB	PronType=Int	26	mark	26:mark	Discourse=circumstance:104->103
25	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	26	nsubj	26:nsubj	Entity=(person-3)
26	put	put	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	23	advcl	23:advcl:when	_
27	the	the	DET	DT	Definite=Def|PronType=Art	28	det	28:det	Entity=(object-85
28	robot	robot	NOUN	NN	Number=Sing	26	obj	26:obj	Entity=object-85)
29	back	back	ADV	RB	Degree=Pos	26	advmod	26:advmod	_
30	together	together	ADV	RB	Degree=Pos	26	advmod	26:advmod	SpaceAfter=No
31	.	.	PUNCT	.	_	11	punct	11:punct	_

# sent_id = AMALGUM_whow_rumble-49
# s_type = decl
# text = The battery can be held in place by a small piece of velcro or some EPS foam.
# newpar = item (3 s)
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=elaboration:105->102|Entity=(object-97
2	battery	battery	NOUN	NN	Number=Sing	5	nsubj:pass	5:nsubj:pass	Entity=object-97)
3	can	can	AUX	MD	VerbForm=Fin	5	aux	5:aux	_
4	be	be	AUX	VB	VerbForm=Inf	5	aux:pass	5:aux:pass	_
5	held	hold	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	0	root	0:root	_
6	in	in	ADP	IN	_	7	case	7:case	_
7	place	place	NOUN	NN	Number=Sing	5	obl	5:obl:in	_
8	by	by	ADP	IN	_	11	case	11:case	_
9	a	a	DET	DT	Definite=Ind|PronType=Art	11	det	11:det	Entity=(object-101
10	small	small	ADJ	JJ	Degree=Pos	11	amod	11:amod	_
11	piece	piece	NOUN	NN	Number=Sing	5	obl	5:obl:by	_
12	of	of	ADP	IN	_	13	case	13:case	_
13	velcro	velcro	NOUN	NN	Number=Sing	11	nmod	11:nmod:of	Entity=(object-102)
14	or	or	CCONJ	CC	_	17	cc	17:cc	_
15	some	some	DET	DT	_	17	det	17:det	Entity=(substance-103
16	EPS	EPS	NOUN	NN	Number=Sing	17	compound	17:compound	Entity=(object-104)
17	foam	foam	NOUN	NN	Number=Sing	13	conj	11:nmod:of|13:conj:or	Entity=object-101)substance-103)|SpaceAfter=No
18	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-50
# s_type = imp
# text = Solder the negative lead of the 9-volt battery to the auxiliary battery input.
1	Solder	solder	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:106->54|XML=<ref target:::"https://www.wikihow.com/wiki/Solder_Copper_Tubing"></ref>
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(substance-105
3	negative	negative	ADJ	JJ	Degree=Pos	4	amod	4:amod	_
4	lead	lead	NOUN	NN	Number=Sing	1	obj	1:obj	_
5	of	of	ADP	IN	_	8	case	8:case	_
6	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-97
7	9-volt	9-volt	NOUN	NN	Number=Sing	8	compound	8:compound	_
8	battery	battery	NOUN	NN	Number=Sing	4	nmod	4:nmod:of	Entity=substance-105)object-97)
9	to	to	ADP	IN	_	13	case	13:case	_
10	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(abstract-106
11	auxiliary	auxiliary	ADJ	JJ	Degree=Pos	12	amod	12:amod	Entity=(object-97
12	battery	battery	NOUN	NN	Number=Sing	13	compound	13:compound	Entity=object-97)
13	input	input	NOUN	NN	Number=Sing	1	obl	1:obl:to	Entity=abstract-106)|SpaceAfter=No
14	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-51
# s_type = imp
# text = Be sure to place the jumper onto "extension power" not "USB."
# trailing_xml = <figure rend:::"Dino_fab_17_100.jpg"></figure>
1	Be	be	AUX	VB	VerbForm=Inf	2	cop	2:cop	Discourse=sequence:107->54
2	sure	sure	ADJ	JJ	Degree=Pos	0	root	0:root	_
3	to	to	PART	TO	_	4	mark	4:mark	_
4	place	place	VERB	VB	VerbForm=Inf	2	xcomp	2:xcomp	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-107
6	jumper	jumper	NOUN	NN	Number=Sing	4	obj	4:obj	Entity=object-107)
7	onto	onto	ADP	IN	_	10	case	10:case	_
8	"	''	PUNCT	``	_	10	punct	10:punct	SpaceAfter=No
9	extension	extension	NOUN	NN	Number=Sing	10	compound	10:compound	Entity=(abstract-95(abstract-108)
10	power	power	NOUN	NN	Number=Sing	4	obl	4:obl:onto	Entity=abstract-95)|SpaceAfter=No
11	"	''	PUNCT	''	_	10	punct	10:punct	_
12	not	not	ADV	RB	Polarity=Neg	14	advmod	14:advmod	_
13	"	''	PUNCT	``	_	14	punct	14:punct	SpaceAfter=No
14	USB	USB	PROPN	NNP	Number=Sing	10	conj	4:obl:onto|10:conj	Entity=(object-109)|SpaceAfter=No
15	.	.	PUNCT	.	_	14	punct	14:punct	SpaceAfter=No
16	"	''	PUNCT	''	_	14	punct	14:punct	_

# sent_id = AMALGUM_whow_rumble-52
# s_type = imp
# text = If you want to be able to use the "on/off" switch, connect the white wire to the back of the switch.
# newpar = item (2 s)
1	If	if	SCONJ	IN	_	3	mark	3:mark	Discourse=condition:108->109
2	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj|6:nsubj:xsubj|8:nsubj:xsubj	Entity=(person-3)
3	want	want	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	15	advcl	15:advcl:if	_
4	to	to	PART	TO	_	6	mark	6:mark	_
5	be	be	AUX	VB	VerbForm=Inf	6	cop	6:cop	_
6	able	able	ADJ	JJ	Degree=Pos	3	xcomp	3:xcomp	_
7	to	to	PART	TO	_	8	mark	8:mark	_
8	use	use	VERB	VB	VerbForm=Inf	6	xcomp	6:xcomp	_
9	the	the	DET	DT	Definite=Def|PronType=Art	13	det	13:det	Entity=(object-73
10	"	''	PUNCT	``	_	11	punct	11:punct	SpaceAfter=No
11	on/off	on/off	ADJ	JJ	Degree=Pos	13	amod	13:amod	SpaceAfter=No
12	"	''	PUNCT	''	_	11	punct	11:punct	_
13	switch	switch	NOUN	NN	Number=Sing	8	obj	8:obj	Entity=object-73)|SpaceAfter=No
14	,	,	PUNCT	,	_	3	punct	3:punct	_
15	connect	connect	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:109->54
16	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(object-37
17	white	white	ADJ	JJ	Degree=Pos	18	amod	18:amod	_
18	wire	wire	NOUN	NN	Number=Sing	15	obj	15:obj	Entity=object-37)
19	to	to	ADP	IN	_	21	case	21:case	_
20	the	the	DET	DT	Definite=Def|PronType=Art	21	det	21:det	Entity=(object-110
21	back	back	NOUN	NN	Number=Sing	15	obl	15:obl:to	_
22	of	of	ADP	IN	_	24	case	24:case	_
23	the	the	DET	DT	Definite=Def|PronType=Art	24	det	24:det	Entity=(object-73
24	switch	switch	NOUN	NN	Number=Sing	21	nmod	21:nmod:of	Entity=object-110)object-73)|SpaceAfter=No
25	.	.	PUNCT	.	_	15	punct	15:punct	_

# sent_id = AMALGUM_whow_rumble-53
# s_type = decl
# text = The power should go to the switch, run back into the white wire, and feed the Arduino power when you turn it on.
# trailing_xml = <figure rend:::"Dino_fab_19_622.jpg"></figure>
1	The	the	DET	DT	Definite=Def|PronType=Art	2	det	2:det	Discourse=sequence:110->54|Entity=(abstract-95
2	power	power	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	Entity=abstract-95)
3	should	should	AUX	MD	VerbForm=Fin	4	aux	4:aux|9:aux|17:aux	_
4	go	go	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	to	to	ADP	IN	_	7	case	7:case	_
6	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(object-73
7	switch	switch	NOUN	NN	Number=Sing	4	obl	4:obl:to	Entity=object-73)|SpaceAfter=No
8	,	,	PUNCT	,	_	9	punct	9:punct	_
9	run	run	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	4	conj	4:conj:and	Discourse=joint:111->110
10	back	back	ADV	RB	Degree=Pos	9	advmod	9:advmod	_
11	into	into	ADP	IN	_	14	case	14:case	_
12	the	the	DET	DT	Definite=Def|PronType=Art	14	det	14:det	Entity=(object-37
13	white	white	ADJ	JJ	Degree=Pos	14	amod	14:amod	_
14	wire	wire	NOUN	NN	Number=Sing	9	obl	9:obl:into	Entity=object-37)|SpaceAfter=No
15	,	,	PUNCT	,	_	17	punct	17:punct	_
16	and	and	CCONJ	CC	_	17	cc	17:cc	Discourse=joint:112->110
17	feed	feed	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	4	conj	4:conj:and	_
18	the	the	DET	DT	Definite=Def|PronType=Art	20	det	20:det	Entity=(abstract-95
19	Arduino	Arduino	PROPN	NNP	Number=Sing	20	compound	20:compound	Entity=(abstract-111)
20	power	power	NOUN	NN	Number=Sing	17	obj	17:obj	Entity=abstract-95)
21	when	when	SCONJ	WRB	PronType=Int	23	mark	23:mark	Discourse=circumstance:113->112
22	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	23	nsubj	23:nsubj	Entity=(person-3)
23	turn	turn	VERB	VBP	Mood=Ind|Number=Sing|Person=2|Tense=Pres|VerbForm=Fin	17	advcl	17:advcl:when	_
24	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	23	obj	23:obj	Entity=(object-37)
25	on	on	ADP	RP	_	23	compound:prt	23:compound:prt	SpaceAfter=No
26	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_rumble-54
# s_type = decl
# text = The PING sensor can go anywhere on the front of the robot.
# newpar = item (5 s)
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=sequence:114->54|Entity=(object-69
2	PING	ping	NOUN	NN	Number=Sing	3	compound	3:compound	Entity=(abstract-90)
3	sensor	sensor	NOUN	NN	Number=Sing	5	nsubj	5:nsubj	Entity=object-69)
4	can	can	AUX	MD	VerbForm=Fin	5	aux	5:aux	_
5	go	go	VERB	VB	VerbForm=Inf	0	root	0:root	_
6	anywhere	anywhere	ADV	RB	_	5	advmod	5:advmod	_
7	on	on	ADP	IN	_	9	case	9:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(place-112
9	front	front	NOUN	NN	Number=Sing	5	obl	5:obl:on	_
10	of	of	ADP	IN	_	12	case	12:case	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-85
12	robot	robot	NOUN	NN	Number=Sing	9	nmod	9:nmod:of	Entity=place-112)object-85)|SpaceAfter=No
13	.	.	PUNCT	.	_	5	punct	5:punct	_

# sent_id = AMALGUM_whow_rumble-55
# s_type = decl
# text = In this example, the sensor has been glued into the faceplate of the robot.
1	In	in	ADP	IN	_	3	case	3:case	Discourse=sequence:115->54
2	this	this	DET	DT	Number=Sing|PronType=Dem	3	det	3:det	Entity=(abstract-113
3	example	example	NOUN	NN	Number=Sing	9	obl	9:obl:in	Entity=abstract-113)|SpaceAfter=No
4	,	,	PUNCT	,	_	3	punct	3:punct	_
5	the	the	DET	DT	Definite=Def|PronType=Art	6	det	6:det	Entity=(object-69
6	sensor	sensor	NOUN	NN	Number=Sing	9	nsubj:pass	9:nsubj:pass	Entity=object-69)
7	has	have	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	9	aux	9:aux	_
8	been	be	AUX	VBN	Tense=Past|VerbForm=Part	9	aux:pass	9:aux:pass	_
9	glued	glue	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	0	root	0:root	_
10	into	into	ADP	IN	_	12	case	12:case	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(object-114
12	faceplate	faceplate	NOUN	NN	Number=Sing	9	obl	9:obl:into	_
13	of	of	ADP	IN	_	15	case	15:case	_
14	the	the	DET	DT	Definite=Def|PronType=Art	15	det	15:det	Entity=(object-85
15	robot	robot	NOUN	NN	Number=Sing	12	nmod	12:nmod:of	Entity=object-114)object-85)|SpaceAfter=No
16	.	.	PUNCT	.	_	9	punct	9:punct	_

# sent_id = AMALGUM_whow_rumble-56
# s_type = imp
# text = Cut out the "eye-holes" on the faceplate and then just add glue around the "eyes" of the sensor to keep the plate sturdy.
1	Cut	cut	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:116->54
2	out	out	ADP	RP	_	1	compound:prt	1:compound:prt	_
3	the	the	DET	DT	Definite=Def|PronType=Art	5	det	5:det	Entity=(object-115
4	"	''	PUNCT	``	_	5	punct	5:punct	SpaceAfter=No
5	eye-holes	eye-hole	NOUN	NNS	Number=Plur	1	obj	1:obj	SpaceAfter=No
6	"	''	PUNCT	''	_	5	punct	5:punct	Entity=object-115)
7	on	on	ADP	IN	_	9	case	9:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-114
9	faceplate	faceplate	NOUN	NN	Number=Sing	1	obl	1:obl:on	Entity=object-114)
10	and	and	CCONJ	CC	_	13	cc	13:cc	Discourse=sequence:117->54
11	then	then	ADV	RB	PronType=Dem	13	advmod	13:advmod	_
12	just	just	ADV	RB	_	13	advmod	13:advmod	_
13	add	add	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
14	glue	glue	NOUN	NN	Number=Sing	13	obj	13:obj	Entity=(substance-116)
15	around	around	ADP	IN	_	18	case	18:case	_
16	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(object-117
17	"	''	PUNCT	``	_	18	punct	18:punct	SpaceAfter=No
18	eyes	eye	NOUN	NNS	Number=Plur	13	obl	13:obl:around	SpaceAfter=No
19	"	''	PUNCT	''	_	18	punct	18:punct	_
20	of	of	ADP	IN	_	22	case	22:case	_
21	the	the	DET	DT	Definite=Def|PronType=Art	22	det	22:det	Entity=(object-69
22	sensor	sensor	NOUN	NN	Number=Sing	18	nmod	18:nmod:of	Entity=object-117)object-69)
23	to	to	PART	TO	_	24	mark	24:mark	Discourse=purpose:118->117
24	keep	keep	VERB	VB	VerbForm=Inf	13	advcl	13:advcl:to	_
25	the	the	DET	DT	Definite=Def|PronType=Art	26	det	26:det	Entity=(object-118
26	plate	plate	NOUN	NN	Number=Sing	24	obj	24:obj|27:nsubj:xsubj	Entity=object-118)
27	sturdy	sturdy	ADJ	JJ	Degree=Pos	24	xcomp	24:xcomp	SpaceAfter=No
28	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-57
# s_type = decl
# text = The ribbon cable that connected to the head of the robot has been stripped down to three leads (instead of the original four) and soldered to the three leads on the PING sensor.
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=sequence:119->54|Entity=(object-37
2	ribbon	ribbon	NOUN	NN	Number=Sing	3	compound	3:compound	Entity=(object-119)
3	cable	cable	NOUN	NN	Number=Sing	14	nsubj:pass	5:nsubj:pass|14:nsubj:pass|27:nsubj:pass	_
4	that	that	PRON	WDT	PronType=Rel	5	nsubj:pass	3:ref	Discourse=elaboration:120->119
5	connected	connect	VERB	VBD	Mood=Ind|Number=Sing|Person=3|Tense=Past|VerbForm=Fin	3	acl:relcl	3:acl:relcl	_
6	to	to	ADP	IN	_	8	case	8:case	_
7	the	the	DET	DT	Definite=Def|PronType=Art	8	det	8:det	Entity=(object-79
8	head	head	NOUN	NN	Number=Sing	5	obl	5:obl:to	_
9	of	of	ADP	IN	_	11	case	11:case	_
10	the	the	DET	DT	Definite=Def|PronType=Art	11	det	11:det	Entity=(object-85
11	robot	robot	NOUN	NN	Number=Sing	8	nmod	8:nmod:of	Entity=object-37)object-79)object-85)
12	has	have	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	14	aux	14:aux|27:aux	_
13	been	be	AUX	VBN	Tense=Past|VerbForm=Part	14	aux:pass	14:aux:pass|27:aux:pass	_
14	stripped	strip	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	0	root	0:root	_
15	down	down	ADP	RP	_	14	compound:prt	14:compound:prt	_
16	to	to	ADP	IN	_	18	case	18:case	_
17	three	3	NUM	CD	NumForm=Digit|NumType=Card	18	nummod	18:nummod	Entity=(abstract-120
18	leads	lead	NOUN	NNS	Number=Plur	14	obl	14:obl:to	_
19	(	(	PUNCT	-LRB-	_	24	punct	24:punct	Discourse=elaboration:121->120|SpaceAfter=No
20	instead	instead	ADV	RB	Degree=Pos	24	case	24:case	_
21	of	of	ADP	IN	_	20	fixed	20:fixed	_
22	the	the	DET	DT	Definite=Def|PronType=Art	24	det	24:det	Entity=(abstract-47
23	original	original	ADJ	JJ	Degree=Pos	24	amod	24:amod	_
24	four	4	NUM	CD	NumForm=Digit|NumType=Card	18	nmod	18:nmod:instead_of	Entity=abstract-47)|SpaceAfter=No
25	)	)	PUNCT	-RRB-	_	24	punct	24:punct	Entity=abstract-120)
26	and	and	CCONJ	CC	_	27	cc	27:cc	Discourse=joint:122->120
27	soldered	solder	VERB	VBN	Tense=Past|VerbForm=Part	14	conj	14:conj:and	_
28	to	to	ADP	IN	_	31	case	31:case	_
29	the	the	DET	DT	Definite=Def|PronType=Art	31	det	31:det	Entity=(abstract-120
30	three	3	NUM	CD	NumForm=Digit|NumType=Card	31	nummod	31:nummod	_
31	leads	lead	NOUN	NNS	Number=Plur	27	obl	27:obl:to	_
32	on	on	ADP	IN	_	35	case	35:case	_
33	the	the	DET	DT	Definite=Def|PronType=Art	35	det	35:det	Entity=(object-69
34	PING	PING	PROPN	NNP	Number=Sing	35	compound	35:compound	Entity=(abstract-90)
35	sensor	sensor	NOUN	NN	Number=Sing	31	nmod	31:nmod:on	Entity=abstract-120)object-69)|SpaceAfter=No
36	.	.	PUNCT	.	_	14	punct	14:punct	_

# sent_id = AMALGUM_whow_rumble-58
# s_type = decl
# text = The other end connects to the Arduino as specified in the schematic.
# trailing_xml = <figure rend:::"Dino_fab_22_972.jpg"></figure>
1	The	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Discourse=sequence:123->54|Entity=(place-121
2	other	other	ADJ	JJ	Degree=Pos	3	amod	3:amod	_
3	end	end	NOUN	NN	Number=Sing	4	nsubj	4:nsubj	Entity=place-121)
4	connects	connect	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	0:root	_
5	to	to	ADP	IN	_	7	case	7:case	_
6	the	the	DET	DT	Definite=Def|PronType=Art	7	det	7:det	Entity=(place-5
7	Arduino	Arduino	PROPN	NNP	Number=Sing	4	obl	4:obl:to	Entity=place-5)
8	as	as	SCONJ	IN	_	9	mark	9:mark	Discourse=elaboration:124->123
9	specified	specify	VERB	VBN	Tense=Past|VerbForm=Part	4	advcl	4:advcl:as	_
10	in	in	ADP	IN	_	12	case	12:case	_
11	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(abstract-65
12	schematic	schematic	NOUN	NN	Number=Sing	9	obl	9:obl:in	Entity=abstract-65)|SpaceAfter=No
13	.	.	PUNCT	.	_	4	punct	4:punct	_

# sent_id = AMALGUM_whow_rumble-59
# s_type = imp
# text = Solder the leads and attach them to the Arduino board.
# newpar = item (2 s)
1	Solder	solder	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:125->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(abstract-120
3	leads	lead	NOUN	NNS	Number=Plur	1	obj	1:obj	Entity=abstract-120)
4	and	and	CCONJ	CC	_	5	cc	5:cc	Discourse=joint:126->125
5	attach	attach	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
6	them	they	PRON	PRP	Case=Acc|Number=Plur|Person=3|PronType=Prs	5	obj	5:obj	Entity=(abstract-120)
7	to	to	ADP	IN	_	10	case	10:case	_
8	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(object-122
9	Arduino	Arduino	PROPN	NNP	Number=Sing	10	compound	10:compound	Entity=(place-5)
10	board	board	NOUN	NN	Number=Sing	5	obl	5:obl:to	Entity=object-122)|SpaceAfter=No
11	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-60
# s_type = imp
# text = Refer to the schematic once again for help.
# trailing_xml = <figure rend:::"Dino_fab_24_655.jpg"></figure>
1	Refer	refer	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:127->54
2	to	to	ADP	IN	_	4	case	4:case	_
3	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(abstract-65
4	schematic	schematic	NOUN	NN	Number=Sing	1	obl	1:obl:to	Entity=abstract-65)
5	once	once	ADV	RB	NumType=Mult	6	advmod	6:advmod	_
6	again	again	ADV	RB	Degree=Pos	1	advmod	1:advmod	_
7	for	for	ADP	IN	_	8	case	8:case	_
8	help	help	NOUN	NN	Number=Sing	1	obl	1:obl:for	Entity=(abstract-123)|SpaceAfter=No
9	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-61
# s_type = imp
# text = Put the robot back together.
# newpar = item (1 s)
# trailing_xml = <figure rend:::"Dino_fab_26_654.jpg"></figure>
1	Put	put	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:128->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(object-85
3	robot	robot	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-85)
4	back	back	ADV	RB	Degree=Pos	1	advmod	1:advmod	_
5	together	together	ADV	RB	Degree=Pos	1	advmod	1:advmod	SpaceAfter=No
6	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-62
# s_type = imp
# text = Upload the code.
# newpar = item (9 s)
1	Upload	upload	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:129->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(abstract-124
3	code	code	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-124)|SpaceAfter=No
4	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-63
# s_type = imp
# text = Connect the USB cable to your computer and plug the other end into the Arduino's USB port.
1	Connect	connect	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:130->54
2	the	the	DET	DT	Definite=Def|PronType=Art	4	det	4:det	Entity=(object-37
3	USB	USB	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=(object-109)
4	cable	cable	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-37)
5	to	to	ADP	IN	_	7	case	7:case	_
6	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	7	nmod:poss	7:nmod:poss	Entity=(object-125(person-3)
7	computer	computer	NOUN	NN	Number=Sing	1	obl	1:obl:to	Entity=object-125)
8	and	and	CCONJ	CC	_	9	cc	9:cc	Discourse=sequence:131->54
9	plug	plug	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
10	the	the	DET	DT	Definite=Def|PronType=Art	12	det	12:det	Entity=(place-121
11	other	other	ADJ	JJ	Degree=Pos	12	amod	12:amod	_
12	end	end	NOUN	NN	Number=Sing	9	obj	9:obj	Entity=place-121)
13	into	into	ADP	IN	_	18	case	18:case	_
14	the	the	DET	DT	Definite=Def|PronType=Art	15	det	15:det	Entity=(object-126
15-16	Arduino's	_	_	_	_	_	_	_	_
15	Arduino	Arduino	PROPN	NNP	Number=Sing	18	nmod:poss	18:nmod:poss	Entity=(place-127
16	's	's	PART	POS	_	15	case	15:case	Entity=place-127)
17	USB	USB	PROPN	NNP	Number=Sing	18	compound	18:compound	Entity=(object-109)
18	port	port	NOUN	NN	Number=Sing	9	obl	9:obl:into	Entity=object-126)|SpaceAfter=No
19	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-64
# s_type = imp
# text = Set your robot on a riser so the wheels don't touch anything and power up the Arduino.
1	Set	set	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:132->54
2	your	your	PRON	PRP$	Person=2|Poss=Yes|PronType=Prs	3	nmod:poss	3:nmod:poss	Entity=(object-85(person-3)
3	robot	robot	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=object-85)
4	on	on	ADP	IN	_	6	case	6:case	_
5	a	a	DET	DT	Definite=Ind|PronType=Art	6	det	6:det	Entity=(object-128
6	riser	riser	NOUN	NN	Number=Sing	1	obl	1:obl:on	Entity=object-128)
7	so	so	SCONJ	IN	_	12	mark	12:mark	Discourse=result:133->132
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-129
9	wheels	wheel	NOUN	NNS	Number=Plur	12	nsubj	12:nsubj	Entity=object-129)
10-11	don't	_	_	_	_	_	_	_	_
10	do	do	AUX	VBP	Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin	12	aux	12:aux	_
11	n't	not	ADV	RB	Polarity=Neg	12	advmod	12:advmod	_
12	touch	touch	VERB	VB	VerbForm=Inf	1	advcl	1:advcl:so	_
13	anything	anything	NOUN	NN	Number=Sing	12	obj	12:obj	Entity=(object-88)
14	and	and	CCONJ	CC	_	15	cc	15:cc	Discourse=joint:134->133
15	power	power	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
16	up	up	ADP	RP	_	15	compound:prt	15:compound:prt	_
17	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(place-5
18	Arduino	Arduino	PROPN	NNP	Number=Sing	15	obj	15:obj	Entity=place-5)|SpaceAfter=No
19	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-65
# s_type = imp
# text = Copy the code and paste it into a new window in the Arduino software.
1	Copy	copy	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:135->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(abstract-124
3	code	code	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-124)
4	and	and	CCONJ	CC	_	5	cc	5:cc	Discourse=joint:136->135
5	paste	paste	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
6	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	5	obj	5:obj	Entity=(abstract-124)
7	into	into	ADP	IN	_	10	case	10:case	_
8	a	a	DET	DT	Definite=Ind|PronType=Art	10	det	10:det	Entity=(object-130
9	new	new	ADJ	JJ	Degree=Pos	10	amod	10:amod	_
10	window	window	NOUN	NN	Number=Sing	5	obl	5:obl:into	_
11	in	in	ADP	IN	_	14	case	14:case	_
12	the	the	DET	DT	Definite=Def|PronType=Art	14	det	14:det	Entity=(abstract-131
13	Arduino	Arduino	PROPN	NNP	Number=Sing	14	compound	14:compound	Entity=(place-5)
14	software	software	NOUN	NN	Number=Sing	10	nmod	10:nmod:in	Entity=object-130)abstract-131)|SpaceAfter=No
15	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-66
# s_type = imp
# text = Save the sketch as "rumblebot ping bump" and upload it.
1	Save	save	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:137->54
2	the	the	DET	DT	Definite=Def|PronType=Art	3	det	3:det	Entity=(abstract-132
3	sketch	sketch	NOUN	NN	Number=Sing	1	obj	1:obj	Entity=abstract-132)
4	as	as	ADP	IN	_	8	case	8:case	_
5	"	''	PUNCT	``	_	8	punct	8:punct	SpaceAfter=No
6	rumblebot	rumblebot	NOUN	NN	Number=Sing	8	compound	8:compound	Entity=(object-133(abstract-134)
7	ping	ping	NOUN	NN	Number=Sing	8	compound	8:compound	Entity=(abstract-90)
8	bump	bump	NOUN	NN	Number=Sing	1	obl	1:obl:as	Entity=object-133)|SpaceAfter=No
9	"	''	PUNCT	''	_	8	punct	8:punct	_
10	and	and	CCONJ	CC	_	11	cc	11:cc	Discourse=sequence:138->54
11	upload	upload	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	1	conj	1:conj:and	_
12	it	it	PRON	PRP	Case=Acc|Gender=Neut|Number=Sing|Person=3|PronType=Prs	11	obj	11:obj	Entity=(object-133)|SpaceAfter=No
13	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-67
# s_type = imp
# text = After it's uploaded, power down the Arduino, disconnect the USB cable, set the bot on the floor and power up the Arduino.
1	After	after	SCONJ	IN	_	4	mark	4:mark	Discourse=sequence:139->54
2-3	it's	_	_	_	_	_	_	_	_
2	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	4	nsubj:pass	4:nsubj:pass	Entity=(abstract-132)
3	's	be	AUX	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	4	aux:pass	4:aux:pass	_
4	uploaded	upload	VERB	VBN	Tense=Past|VerbForm=Part|Voice=Pass	6	advcl	6:advcl:after	SpaceAfter=No
5	,	,	PUNCT	,	_	4	punct	4:punct	_
6	power	power	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=sequence:140->54
7	down	down	ADV	RB	Degree=Pos	6	advmod	6:advmod	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(place-5
9	Arduino	Arduino	PROPN	NNP	Number=Sing	6	obj	6:obj	Entity=place-5)|SpaceAfter=No
10	,	,	PUNCT	,	_	11	punct	11:punct	_
11	disconnect	disconnect	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	6	conj	6:conj:and	Discourse=sequence:141->54
12	the	the	DET	DT	Definite=Def|PronType=Art	14	det	14:det	Entity=(object-37
13	USB	USB	PROPN	NNP	Number=Sing	14	compound	14:compound	Entity=(object-109)
14	cable	cable	NOUN	NN	Number=Sing	11	obj	11:obj	Entity=object-37)|SpaceAfter=No
15	,	,	PUNCT	,	_	16	punct	16:punct	_
16	set	set	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	6	conj	6:conj:and	Discourse=sequence:142->54
17	the	the	DET	DT	Definite=Def|PronType=Art	18	det	18:det	Entity=(object-135
18	bot	bot	NOUN	NN	Number=Sing	16	obj	16:obj	Entity=object-135)
19	on	on	ADP	IN	_	21	case	21:case	_
20	the	the	DET	DT	Definite=Def|PronType=Art	21	det	21:det	Entity=(place-136
21	floor	floor	NOUN	NN	Number=Sing	16	obl	16:obl:on	Entity=place-136)
22	and	and	CCONJ	CC	_	23	cc	23:cc	Discourse=sequence:143->142
23	power	power	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	6	conj	6:conj:and	_
24	up	up	ADP	RP	_	23	compound:prt	23:compound:prt	_
25	the	the	DET	DT	Definite=Def|PronType=Art	26	det	26:det	Entity=(place-5
26	Arduino	Arduino	PROPN	NNP	Number=Sing	23	obj	23:obj	Entity=place-5)|SpaceAfter=No
27	.	.	PUNCT	.	_	6	punct	6:punct	_

# sent_id = AMALGUM_whow_rumble-68
# s_type = sub
# text = It should start to drive forward with the LED blinking.
1	It	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	3	nsubj	3:nsubj|5:nsubj:xsubj	Discourse=elaboration:144->142|Entity=(object-37)
2	should	should	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	start	start	VERB	VB	VerbForm=Inf	0	root	0:root	_
4	to	to	PART	TO	_	5	mark	5:mark	_
5	drive	drive	VERB	VB	VerbForm=Inf	3	xcomp	3:xcomp	_
6	forward	forward	ADV	RB	Degree=Pos	5	advmod	5:advmod	_
7	with	with	SCONJ	IN	_	10	mark	10:mark	_
8	the	the	DET	DT	Definite=Def|PronType=Art	9	det	9:det	Entity=(object-92
9	LED	LED	PROPN	NNP	Number=Sing	10	nsubj	10:nsubj	Entity=object-92)
10	blinking	blink	VERB	VBG	VerbForm=Ger	5	advcl	5:advcl:with	SpaceAfter=No
11	.	.	PUNCT	.	_	3	punct	3:punct	_

# sent_id = AMALGUM_whow_rumble-69
# s_type = sub
# text = As it gets within of an object, it should turn away and keep driving forward.
1	As	as	SCONJ	IN	_	3	mark	3:mark	Discourse=circumstance:145->146
2	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	3	nsubj	3:nsubj	Entity=(abstract-132)
3	gets	get	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	11	advcl	11:advcl:as	_
4	within	within	ADP	IN	_	7	case	7:case	_
5	of	of	ADP	IN	_	7	case	7:case	_
6	an	a	DET	DT	Definite=Ind|PronType=Art	7	det	7:det	Entity=(animal-137
7	object	object	NOUN	NN	Number=Sing	3	obl	3:obl:within_of	Entity=animal-137)|SpaceAfter=No
8	,	,	PUNCT	,	_	3	punct	3:punct	_
9	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	11	nsubj	11:nsubj	Discourse=sequence:146->54|Entity=(abstract-132)
10	should	should	AUX	MD	VerbForm=Fin	11	aux	11:aux|14:aux	_
11	turn	turn	VERB	VB	VerbForm=Inf	0	root	0:root	_
12	away	away	ADV	RB	Degree=Pos	11	advmod	11:advmod	_
13	and	and	CCONJ	CC	_	14	cc	14:cc	Discourse=joint:147->146
14	keep	keep	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	11	conj	11:conj:and	_
15	driving	drive	VERB	VBG	VerbForm=Ger	14	xcomp	14:xcomp	_
16	forward	forward	ADV	RB	Degree=Pos	15	advmod	15:advmod	SpaceAfter=No
17	.	.	PUNCT	.	_	11	punct	11:punct	_

# sent_id = AMALGUM_whow_rumble-70
# s_type = sub
# text = If it hits an object and triggers the bump switch, it should stop, reverse its direction and turn, then proceed forward.
1	If	if	SCONJ	IN	_	3	mark	3:mark	Discourse=sequence:148->54
2	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	3	nsubj	3:nsubj|7:nsubj	Entity=(animal-137)
3	hits	hit	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	14	advcl	14:advcl:if	_
4	an	a	DET	DT	Definite=Ind|PronType=Art	5	det	5:det	Entity=(animal-137
5	object	object	NOUN	NN	Number=Sing	3	obj	3:obj	Entity=animal-137)
6	and	and	CCONJ	CC	_	7	cc	7:cc	Discourse=sequence:149->54
7	triggers	trigger	VERB	VBZ	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	3	conj	3:conj:and|14:advcl:if	_
8	the	the	DET	DT	Definite=Def|PronType=Art	10	det	10:det	Entity=(object-73
9	bump	bump	NOUN	NN	Number=Sing	10	compound	10:compound	Entity=(object-133)
10	switch	switch	NOUN	NN	Number=Sing	7	obj	7:obj	Entity=object-73)|SpaceAfter=No
11	,	,	PUNCT	,	_	3	punct	3:punct	_
12	it	it	PRON	PRP	Case=Nom|Gender=Neut|Number=Sing|Person=3|PronType=Prs	14	nsubj	14:nsubj	Discourse=sequence:150->54|Entity=(animal-137)
13	should	should	AUX	MD	VerbForm=Fin	14	aux	14:aux|16:aux|20:aux	_
14	stop	stop	VERB	VB	VerbForm=Inf	0	root	0:root	SpaceAfter=No
15	,	,	PUNCT	,	_	16	punct	16:punct	_
16	reverse	reverse	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	14	conj	14:conj:and	Discourse=sequence:151->54
17	its	its	PRON	PRP$	Gender=Neut|Number=Sing|Person=3|Poss=Yes|PronType=Prs	18	nmod:poss	18:nmod:poss	Entity=(abstract-138(animal-137)
18	direction	direction	NOUN	NN	Number=Sing	16	obj	16:obj	Entity=abstract-138)
19	and	and	CCONJ	CC	_	20	cc	20:cc	Discourse=sequence:152->54
20	turn	turn	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	14	conj	14:conj:and	SpaceAfter=No
21	,	,	PUNCT	,	_	23	punct	23:punct	_
22	then	then	ADV	RB	PronType=Dem	23	advmod	23:advmod	Discourse=sequence:153->54
23	proceed	proceed	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	14	parataxis	14:parataxis	_
24	forward	forward	ADV	RB	Degree=Pos	23	advmod	23:advmod	SpaceAfter=No
25	.	.	PUNCT	.	_	14	punct	14:punct	_

# sent_id = AMALGUM_whow_rumble-71
# s_type = frag
# text = Video
# newpar = head (1 s)
1	Video	video	NOUN	NN	Number=Sing	0	root	0:root	Discourse=preparation:154->155|Entity=(abstract-139)

# sent_id = AMALGUM_whow_rumble-72
# s_type = frag
# text = Things
# newpar = head (2 s)
1	Things	thing	NOUN	NNS	Number=Plur	0	root	0:root	Discourse=joint:155->3|Entity=(object-140)

# sent_id = AMALGUM_whow_rumble-73
# s_type = decl
# text = You'll Need
1-2	You'll	_	_	_	_	_	_	_	_
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	3	nsubj	3:nsubj	Discourse=elaboration:156->155|Entity=(person-3)
2	'll	will	AUX	MD	VerbForm=Fin	3	aux	3:aux	_
3	Need	need	VERB	VB	VerbForm=Inf	0	root	0:root	_

# sent_id = AMALGUM_whow_rumble-74
# s_type = imp
# text = Find a Rumble Robot on eBay, at a yard sale or a thrift store.
# newpar = list type:::"unordered" (8 s) | item (1 s)
1	Find	find	VERB	VB	Mood=Imp|Person=2|VerbForm=Fin	0	root	0:root	Discourse=preparation:157->163
2	a	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Entity=(object-1
3	Rumble	Rumble	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=(person-2)
4	Robot	Robot	PROPN	NNP	Number=Sing	1	obj	1:obj	Entity=object-1)
5	on	on	ADP	IN	_	6	case	6:case	_
6	eBay	eBay	PROPN	NNP	Number=Sing	1	obl	1:obl:on	Entity=(organization-141)|SpaceAfter=No
7	,	,	PUNCT	,	_	11	punct	11:punct	_
8	at	at	ADP	IN	_	11	case	11:case	_
9	a	a	DET	DT	Definite=Ind|PronType=Art	11	det	11:det	Entity=(event-142
10	yard	yard	NOUN	NN	Number=Sing	11	compound	11:compound	Entity=(place-143)
11	sale	sale	NOUN	NN	Number=Sing	1	obl	1:obl:at	Entity=event-142)
12	or	or	CCONJ	CC	_	15	cc	15:cc	_
13	a	a	DET	DT	Definite=Ind|PronType=Art	15	det	15:det	Entity=(place-144
14	thrift	thrift	NOUN	NN	Number=Sing	15	compound	15:compound	Entity=(abstract-145)
15	store	store	NOUN	NN	Number=Sing	11	conj	1:obl:at|11:conj:or	Entity=place-144)|SpaceAfter=No
16	.	.	PUNCT	.	_	1	punct	1:punct	_

# sent_id = AMALGUM_whow_rumble-75
# s_type = frag
# text = Arduino micro controller
# newpar = item (1 s)
1	Arduino	Arduino	PROPN	NNP	Number=Sing	3	compound	3:compound	Discourse=preparation:158->163|Entity=(object-146(place-5)
2	micro	micro	NOUN	NN	Number=Sing	3	compound	3:compound	Entity=(abstract-147)
3	controller	controller	NOUN	NN	Number=Sing	0	root	0:root	Entity=object-146)

# sent_id = AMALGUM_whow_rumble-76
# s_type = frag
# text = A Parallax PING sensor
# newpar = item (1 s)
1	A	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Discourse=preparation:159->163|Entity=(object-69
2	Parallax	Parallax	PROPN	NNP	Number=Sing	3	compound	3:compound	Entity=(abstract-90
3	PING	PING	PROPN	NNP	Number=Sing	4	compound	4:compound	Entity=abstract-90)
4	sensor	sensor	NOUN	NN	Number=Sing	0	root	0:root	Entity=object-69)

# sent_id = AMALGUM_whow_rumble-77
# s_type = frag
# text = An LED
# newpar = item (1 s)
1	An	a	DET	DT	Definite=Ind|PronType=Art	2	det	2:det	Discourse=preparation:160->163|Entity=(object-92
2	LED	LED	NOUN	NN	Number=Sing	0	root	0:root	Entity=object-92)

# sent_id = AMALGUM_whow_rumble-78
# s_type = frag
# text = A micro switch
# newpar = item (1 s)
1	A	a	DET	DT	Definite=Ind|PronType=Art	3	det	3:det	Discourse=preparation:161->163|Entity=(object-73
2	micro	micro	ADJ	JJ	Degree=Pos	3	amod	3:amod	_
3	switch	switch	NOUN	NN	Number=Sing	0	root	0:root	Entity=object-73)

# sent_id = AMALGUM_whow_rumble-79
# s_type = frag
# text = A 100 ohm resistor
# newpar = item (1 s)
1	A	a	DET	DT	Definite=Ind|PronType=Art	4	det	4:det	Discourse=preparation:162->163|Entity=(person-148
2	100	100	NUM	CD	NumForm=Digit|NumType=Card	3	nummod	3:nummod	Entity=(abstract-149
3	ohm	ohm	NOUN	NN	Number=Sing	4	compound	4:compound	Entity=abstract-149)
4	resistor	resistor	NOUN	NN	Number=Sing	0	root	0:root	Entity=person-148)

# sent_id = AMALGUM_whow_rumble-80
# s_type = frag
# text = Arduino software which you can download here
# newpar = item (1 s)
1	Arduino	Arduino	PROPN	NNP	Number=Sing	2	compound	2:compound	Discourse=elaboration:163->155|Entity=(abstract-131(place-5)
2	software	software	NOUN	NN	Number=Sing	0	root	0:root|6:obj	_
3	which	which	PRON	WDT	PronType=Rel	6	obj	2:ref	Discourse=elaboration:164->163
4	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	6	nsubj	6:nsubj	Entity=(person-3)
5	can	can	AUX	MD	VerbForm=Fin	6	aux	6:aux	_
6	download	download	VERB	VB	VerbForm=Inf	2	acl:relcl	2:acl:relcl	_
7	here	here	ADV	RB	PronType=Dem	6	advmod	6:advmod	Entity=abstract-131)|XML=<ref target:::"http://arduino.cc/en/Main/Software"></ref>

# sent_id = AMALGUM_whow_rumble-81
# s_type = decl
# text = You'll also need coding, which you can write yourself.
# newpar = item (1 s)
1-2	You'll	_	_	_	_	_	_	_	_
1	You	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	4	nsubj	4:nsubj	Discourse=joint:165->163|Entity=(person-3)
2	'll	will	AUX	MD	VerbForm=Fin	4	aux	4:aux	_
3	also	also	ADV	RB	_	4	advmod	4:advmod	_
4	need	need	VERB	VB	VerbForm=Inf	0	root	0:root	_
5	coding	coding	NOUN	NN	Number=Sing	4	obj	4:obj|10:obj	Entity=(abstract-150|SpaceAfter=No
6	,	,	PUNCT	,	_	10	punct	10:punct	_
7	which	which	PRON	WDT	PronType=Rel	10	obj	5:ref	Discourse=elaboration:166->165
8	you	you	PRON	PRP	Case=Nom|Number=Sing|Person=2|PronType=Prs	10	nsubj	10:nsubj	Entity=(person-3)
9	can	can	AUX	MD	VerbForm=Fin	10	aux	10:aux	_
10	write	write	VERB	VB	VerbForm=Inf	5	acl:relcl	5:acl:relcl	_
11	yourself	yourself	PRON	PRP	Case=Acc|Number=Sing|Person=2|PronType=Prs|Reflex=Yes	10	obj	10:obj	Entity=abstract-150)(person-3)|SpaceAfter=No
12	.	.	PUNCT	.	_	4	punct	4:punct	_

