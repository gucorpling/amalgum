<rst>
<header>
	<relations>
			<rel name="purpose" type="rst"/>
			<rel name="evidence" type="rst"/>
			<rel name="background" type="rst"/>
			<rel name="restatement" type="rst"/>
			<rel name="circumstance" type="rst"/>
			<rel name="elaboration" type="rst"/>
			<rel name="cause" type="rst"/>
			<rel name="condition" type="rst"/>
			<rel name="preparation" type="rst"/>
			<rel name="concession" type="rst"/>
			<rel name="means" type="rst"/>
			<rel name="attribution" type="rst"/>
			<rel name="contrast" type="multinuc"/>
			<rel name="joint" type="multinuc"/>
			<rel name="sequence" type="multinuc"/>
			<rel name="same_unit" type="multinuc"/>
		</relations>
</header>
<body>
<segment id="1" parent="1001" relname="preparation">3. CU and PU Partition Types Analysis in Singly Compressed HEVC Videos and AVC/HEVC Videos</segment>
<segment id="2" parent="1003" relname="concession">In the AVC and HEVC encoding process , quantization and reconstruction are basic operations ,</segment>
<segment id="3" parent="1003" relname="span">but they will introduce irreversible quantization errors and reconstruction errors ,</segment>
<segment id="4" parent="3" relname="elaboration">which make the decoded video different from the original one .</segment>
<segment id="5" parent="1001" relname="joint">The change of video content will further affect the CU and PU partition types</segment>
<segment id="6" parent="1001" relname="joint">and makes them different between AVC/HEVC videos and singly compressed HEVC videos .</segment>
<segment id="7" parent="1001" relname="joint">We will illustrate the difference elaborately in this section .</segment>
<segment id="8" parent="1001" relname="joint">3.1.</segment>
<segment id="9" parent="1009" relname="preparation">Theoretical Analysis</segment>
<segment id="10" parent="11" relname="preparation">Figure 4</segment>
<segment id="11" parent="1010" relname="span">describes the simplified block diagram of AVC/HEVC transcoding .</segment>
<segment id="12" parent="1011" relname="joint">YUV video is a kind of uncompressed video</segment>
<segment id="13" parent="1011" relname="joint">and often used as test example of video encoders .</segment>
<segment id="14" parent="15" relname="circumstance">Given a YUV video V ,</segment>
<segment id="15" parent="1014" relname="span">the first step is to encode V into the AVC bit stream with bitrate .</segment>
<segment id="16" parent="1015" relname="joint">Then will be decoded to YUV video</segment>
<segment id="17" parent="1015" relname="joint">and recompressed into the HEVC bit stream with bitrate .</segment>
<segment id="18" parent="1015" relname="joint">Please note two points here .</segment>
<segment id="19" parent="1020" relname="joint">One is that the reconstruction module in the encoding process is equivalent to the decoding process ;</segment>
<segment id="20" parent="1021" relname="span">thus we directly use the reconstruction module</segment>
<segment id="21" parent="20" relname="purpose">to represent the decoder in</segment>
<segment id="22" parent="1023" relname="span">Figure 4</segment>
<segment id="23" parent="22" relname="purpose">to save space .</segment>
<segment id="24" parent="1024" relname="span">The other one is that only HEVC encoding is implemented for a singly compressed HEVC video .</segment>
<segment id="25" parent="1025" relname="joint">That is to say , for a singly compressed HEVC video , the input video is the uncompressed YUV video V , not its decoded version .</segment>
<segment id="26" parent="1026" relname="span">From</segment>
<segment id="27" parent="1028" relname="preparation">Figure 4</segment>
<segment id="28" parent="1029" relname="attribution">, we can see</segment>
<segment id="29" parent="1029" relname="span">that CU and PU partition types of each picture are determined by the content of the picture and the number of bits</segment>
<segment id="30" parent="29" relname="elaboration">allocated to it by the rate control module .</segment>
<segment id="31" parent="32" relname="attribution">Here , please note</segment>
<segment id="32" parent="1031" relname="span">that in this paper , a picture contains only one slice .</segment>
<segment id="33" parent="34" relname="concession">Though CU and PU partition types in I pictures are different from P pictures ,</segment>
<segment id="34" parent="1033" relname="span">the partition strategy is similar .</segment>
<segment id="35" parent="1035" relname="span">Therefore , we take the CU types in P pictures as an example</segment>
<segment id="36" parent="35" relname="purpose">to analyze the difference between AVC/HEVC videos and singly compressed HEVC videos .</segment>
<segment id="37" parent="1015" relname="joint">Now let â€™s consider the AVC/HEVC transcoding process .</segment>
<segment id="38" parent="1039" relname="joint">Assume one uncompressed video sequence V consists of N P pictures</segment>
<segment id="39" parent="1040" relname="sequence">and is expressed as Equation ( 1 ) ,</segment>
<segment id="40" parent="1042" relname="condition">where denotes the n th P picture of V ,</segment>
<segment id="41" parent="1042" relname="span">then the bit stream can be obtained</segment>
<segment id="42" parent="41" relname="means">by implementing the prediction , transform , quantization , and entropy coding process .</segment>
<segment id="43" parent="1039" relname="evidence">( 1 )</segment>
<segment id="44" parent="1015" relname="joint">In the AVC encoding process , a rate control process is implemented .</segment>
<segment id="45" parent="1015" relname="joint">Assume the bit rate for V is r ,</segment>
<segment id="46" parent="1046" relname="sequence">let denote the rate control process ,</segment>
<segment id="47" parent="1047" relname="span">then , the number of bits</segment>
<segment id="48" parent="47" relname="elaboration">allocated to the n th P picture can be represented as .</segment>
<segment id="49" parent="1048" relname="joint">After that , the quantization step for the picture will be determined according to .</segment>
<segment id="50" parent="1048" relname="joint">In addition , AVC standard adopts macroblock as the basic coding unit</segment>
<segment id="51" parent="1051" relname="span">and does not introduce the concept of CU ;</segment>
<segment id="52" parent="51" relname="elaboration">hence , CU types do not exist in the AVC encoding process .</segment>
<segment id="53" parent="1048" relname="joint">The decoding process is the inverse process of encoding .</segment>
<segment id="54" parent="1048" relname="joint">Let stand for the prediction signal of ,</segment>
<segment id="55" parent="1056" relname="span">and represent discrete cosine transform</segment>
<segment id="56" parent="55" relname="restatement">( DCT )</segment>
<segment id="57" parent="1057" relname="sequence">and inverse DCT , respectively ,</segment>
<segment id="58" parent="1060" relname="span">then the decoded video sequence can be obtained by Equations ( 2 ) and ( 3 ) ,</segment>
<segment id="59" parent="58" relname="elaboration">where means the decoded version of ,</segment>
<segment id="60" parent="1059" relname="same_unit">represents the rounding operator ,</segment>
<segment id="61" parent="1057" relname="sequence">and denote the irreversible quantization error and reconstruction error of and , respectively .</segment>
<segment id="62" parent="1062" relname="span">The quantization error means the error</segment>
<segment id="63" parent="62" relname="elaboration">introduced in the quantization process .</segment>
<segment id="64" parent="1066" relname="span">The reconstruction error means the rounding error and truncation error</segment>
<segment id="65" parent="64" relname="elaboration">generated in the reconstruction process .</segment>
<segment id="66" parent="1066" relname="restatement">( 2 )</segment>
<segment id="67" parent="1065" relname="elaboration">( 3 )</segment>
<segment id="68" parent="1068" relname="span">In the process of transcoding to the HEVC bit stream , the number of bits are allocated to the n th P picture</segment>
<segment id="69" parent="68" relname="elaboration">according to Equation ( 4 ) .</segment>
<segment id="70" parent="1070" relname="span">Here we use rather than to represent the rate control process</segment>
<segment id="71" parent="1072" relname="span">because the bits allocation function</segment>
<segment id="72" parent="71" relname="elaboration">adopted in HEVC is different from the AVC standard .</segment>
<segment id="73" parent="1072" relname="restatement">( 4 )</segment>
<segment id="74" parent="1074" relname="span">Knowing the number of bits</segment>
<segment id="75" parent="1075" relname="span">allocated to the n th P picture ,</segment>
<segment id="76" parent="1076" relname="span">the type of the k th CU in the n th P picture can be written as Equation ( 5 ) ,</segment>
<segment id="77" parent="1077" relname="joint">where stands for the CU partition process ,</segment>
<segment id="78" parent="1078" relname="span">and denotes the corresponding prediction signal of .</segment>
<segment id="79" parent="78" relname="restatement">( 5 )</segment>
<segment id="80" parent="1082" relname="span">For a singly compressed HEVC video with bitrate , the number of bits</segment>
<segment id="81" parent="80" relname="elaboration">allocated to the n th P picture , and the CU partition type will be determined by Equations ( 6 ) and ( 7 ) .</segment>
<segment id="82" parent="1082" relname="restatement">( 6 )</segment>
<segment id="83" parent="1081" relname="restatement">( 7 )</segment>
<segment id="84" parent="1084" relname="span">Eventually , we can get the difference of CU partition types between the AVC/HEVC video and the singly compressed HEVC video</segment>
<segment id="85" parent="84" relname="attribution">according to Equation ( 8 ) .</segment>
<segment id="86" parent="1084" relname="restatement">( 8 )</segment>
<group id="1000" type="span" />
<group id="1001" type="multinuc" parent="1000" relname="span"/>
<group id="1002" type="span" parent="1001" relname="joint"/>
<group id="1003" type="span" parent="1002" relname="span"/>
<group id="1008" type="span" parent="1001" relname="joint"/>
<group id="1009" type="span" parent="1008" relname="span"/>
<group id="1010" type="span" parent="1011" relname="preparation"/>
<group id="1011" type="multinuc" parent="1009" relname="span"/>
<group id="1013" type="multinuc" parent="1011" relname="joint"/>
<group id="1014" type="span" parent="1013" relname="sequence"/>
<group id="1015" type="multinuc" parent="1013" relname="sequence"/>
<group id="1019" type="multinuc" parent="1015" relname="joint"/>
<group id="1020" type="multinuc" parent="1019" relname="contrast"/>
<group id="1021" type="span" parent="1020" relname="joint"/>
<group id="1022" type="span" parent="1019" relname="contrast"/>
<group id="1023" type="span" parent="1024" relname="preparation"/>
<group id="1024" type="span" parent="1022" relname="span"/>
<group id="1025" type="multinuc" parent="24" relname="elaboration"/>
<group id="1026" type="span" parent="1025" relname="joint"/>
<group id="1027" type="span" parent="26" relname="background"/>
<group id="1028" type="span" parent="1027" relname="span"/>
<group id="1029" type="span" parent="1028" relname="span"/>
<group id="1031" type="span" parent="1015" relname="joint"/>
<group id="1033" type="span" parent="1015" relname="joint"/>
<group id="1035" type="span" parent="1015" relname="joint"/>
<group id="1038" type="span" parent="1015" relname="joint"/>
<group id="1039" type="multinuc" parent="1038" relname="span"/>
<group id="1040" type="multinuc" parent="1039" relname="joint"/>
<group id="1041" type="span" parent="1040" relname="sequence"/>
<group id="1042" type="span" parent="1041" relname="span"/>
<group id="1045" type="span" parent="1015" relname="joint"/>
<group id="1046" type="multinuc" parent="1048" relname="preparation"/>
<group id="1047" type="span" parent="1046" relname="sequence"/>
<group id="1048" type="multinuc" parent="1045" relname="span"/>
<group id="1051" type="span" parent="1048" relname="joint"/>
<group id="1055" type="multinuc" parent="1048" relname="joint"/>
<group id="1056" type="span" parent="1055" relname="same_unit"/>
<group id="1057" type="multinuc" parent="1055" relname="same_unit"/>
<group id="1059" type="multinuc" parent="1057" relname="sequence"/>
<group id="1060" type="span" parent="1059" relname="same_unit"/>
<group id="1062" type="span" parent="1048" relname="joint"/>
<group id="1064" type="span" parent="1048" relname="joint"/>
<group id="1065" type="span" parent="1064" relname="span"/>
<group id="1066" type="span" parent="1065" relname="span"/>
<group id="1067" type="span" parent="1048" relname="joint"/>
<group id="1068" type="span" parent="1067" relname="span"/>
<group id="1069" type="multinuc" parent="1068" relname="elaboration"/>
<group id="1070" type="span" parent="1069" relname="joint"/>
<group id="1071" type="span" parent="70" relname="cause"/>
<group id="1072" type="span" parent="1071" relname="span"/>
<group id="1073" type="multinuc" parent="1069" relname="joint"/>
<group id="1074" type="span" parent="1073" relname="joint"/>
<group id="1075" type="span" parent="74" relname="elaboration"/>
<group id="1076" type="span" parent="75" relname="elaboration"/>
<group id="1077" type="multinuc" parent="76" relname="elaboration"/>
<group id="1078" type="span" parent="1077" relname="joint"/>
<group id="1079" type="multinuc" parent="1073" relname="joint"/>
<group id="1080" type="span" parent="1079" relname="joint"/>
<group id="1081" type="span" parent="1080" relname="span"/>
<group id="1082" type="span" parent="1081" relname="span"/>
<group id="1083" type="span" parent="1079" relname="joint"/>
<group id="1084" type="span" parent="1083" relname="span"/>
	</body>
</rst>
