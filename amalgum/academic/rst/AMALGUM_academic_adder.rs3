<rst>
<header>
	<relations>
			<rel name="purpose" type="rst"/>
			<rel name="restatement" type="rst"/>
			<rel name="elaboration" type="rst"/>
			<rel name="preparation" type="rst"/>
			<rel name="concession" type="rst"/>
			<rel name="means" type="rst"/>
			<rel name="attribution" type="rst"/>
			<rel name="joint" type="multinuc"/>
			<rel name="same_unit" type="multinuc"/>
		</relations>
</header>
<body>
<segment id="1" parent="1001" relname="preparation">3. Accurate and Approximate Adders</segment>
<segment id="2" parent="1002" relname="preparation">The architecture of an N-bit accurate adder and the generic architectures of N-bit approximate adders are shown in</segment>
<segment id="3" parent="4" relname="preparation">Figure 1</segment>
<segment id="4" parent="1003" relname="span">.</segment>
<segment id="5" parent="1004" relname="joint">For the approximate adders , we define the size of the least significant inaccurate sub-adder to be K-bits ,</segment>
<segment id="6" parent="1004" relname="joint">and hence the size of the more significant accurate sub-adder will be ( N – K)-bits .</segment>
<segment id="7" parent="1007" relname="preparation">A and B represent the adder inputs in</segment>
<segment id="8" parent="1009" relname="preparation">Figure 1</segment>
<segment id="9" parent="1009" relname="span">,</segment>
<segment id="10" parent="1010" relname="span">while SUM denotes the sum output ,</segment>
<segment id="11" parent="10" relname="elaboration">which includes a carry overflow bit .</segment>
<segment id="12" parent="1012" relname="span">The subscripts</segment>
<segment id="13" parent="12" relname="elaboration">associated with the adder inputs and outputs denote the corresponding bit positions .</segment>
<segment id="14" parent="1014" relname="same_unit">The ( N – K )</segment>
<segment id="15" parent="1015" relname="span">sum bits of the accurate sub-adder are combined with the K sum bits of the inaccurate sub-adder</segment>
<segment id="16" parent="1016" relname="span">to produce the N sum bits of approximate adders ,</segment>
<segment id="17" parent="16" relname="elaboration">which includes the carry overflow .</segment>
<segment id="18" parent="1018" relname="preparation">We shall use some legends for the approximate adders for the ease of referencing ;</segment>
<segment id="19" parent="1019" relname="span">some of the legends are defined by the authors in their respective works</segment>
<segment id="20" parent="1020" relname="span">while the remaining are defined by us in this work</segment>
<segment id="21" parent="20" relname="purpose">for referencing .</segment>
<segment id="22" parent="1023" relname="attribution">The accurate adder is shown in</segment>
<segment id="23" parent="1024" relname="preparation">Figure 1</segment>
<segment id="24" parent="1025" relname="attribution">a.</segment>
<segment id="25" parent="1026" relname="span">The approximate adder of Reference ,</segment>
<segment id="26" parent="1027" relname="span">called the lower-part OR adder</segment>
<segment id="27" parent="26" relname="elaboration">( LOA ) ,</segment>
<segment id="28" parent="1025" relname="same_unit">is shown in</segment>
<segment id="29" parent="1029" relname="preparation">Figure 1</segment>
<segment id="30" parent="1030" relname="preparation">b.</segment>
<segment id="31" parent="1031" relname="span">In the LOA , the K input bit-pairs of the inaccurate sub-adder are respectively OR-ed</segment>
<segment id="32" parent="31" relname="purpose">to produce the K sum bits .</segment>
<segment id="33" parent="1034" relname="span">The most significant bit-pair of the inaccurate sub-adder</segment>
<segment id="34" parent="1035" relname="joint">viz. AK – 1 and BK – 1 is alone AND-ed</segment>
<segment id="35" parent="1035" relname="joint">and given as the carry input for the accurate sub-adder .</segment>
<segment id="36" parent="1036" relname="span">The approximate adder of Reference shall be referred to as LOAWA</segment>
<segment id="37" parent="36" relname="elaboration">( i.e. , LOA without the 2-input AND function ) .</segment>
<segment id="38" parent="1038" relname="preparation">LOAWA is shown in</segment>
<segment id="39" parent="1040" relname="preparation">Figure 1</segment>
<segment id="40" parent="1040" relname="span">c ,</segment>
<segment id="41" parent="1041" relname="joint">which is nearly identical to LOA of Reference ;</segment>
<segment id="42" parent="1041" relname="joint">the only exception being that the carry input of the accurate sub-adder is set to a constant 0 .</segment>
<segment id="43" parent="1043" relname="span">The approximate adder of ,</segment>
<segment id="44" parent="1044" relname="span">which uses the type 5 approximate full adder</segment>
<segment id="45" parent="44" relname="purpose">for realizing the inaccurate sub-adder is shown in</segment>
<segment id="46" parent="1046" relname="preparation">Figure 1</segment>
<segment id="47" parent="1046" relname="joint">d. This approximate adder shall be referred to as APPROX5 .</segment>
<segment id="48" parent="1048" relname="span">The sum bits of the inaccurate sub-adder are the same as one set of the corresponding input bits ,</segment>
<segment id="49" parent="1049" relname="span">i.e. , SUM i = B i ,</segment>
<segment id="50" parent="49" relname="elaboration">where i denotes a bit position .</segment>
<segment id="51" parent="1051" relname="span">The carry input for the accurate sub-adder is a most significant input bit</segment>
<segment id="52" parent="53" relname="attribution">belonging to the inaccurate sub-adder</segment>
<segment id="53" parent="1052" relname="span">viz. AK – 1 .</segment>
<segment id="54" parent="1056" relname="span">The hardware-efficient approximate adder</segment>
<segment id="55" parent="54" relname="elaboration">presented in Reference</segment>
<segment id="56" parent="1055" relname="same_unit">shall be called HEAA ,</segment>
<segment id="57" parent="1055" relname="elaboration">which is shown in</segment>
<segment id="58" parent="1059" relname="preparation">Figure 1</segment>
<segment id="59" parent="1060" relname="attribution">e. We observe</segment>
<segment id="60" parent="1060" relname="span">that HEAA consumes less FPGA resources</segment>
<segment id="61" parent="1061" relname="joint">compared to the accurate FPGA adder</segment>
<segment id="62" parent="1061" relname="joint">and consumes either the same FPGA resources as that of some approximate adders or more FPGA resources in comparison with other approximate adders .</segment>
<segment id="63" parent="64" relname="concession">HEAA is almost structurally similar to LOA ;</segment>
<segment id="64" parent="1064" relname="span">however , there exists a difference .</segment>
<segment id="65" parent="1066" relname="span">A 2-to-1 multiplexer</segment>
<segment id="66" parent="65" relname="restatement">( MUX21 )</segment>
<segment id="67" parent="1065" relname="same_unit">is used in the inaccurate sub-adder in addition to the 2-input OR functions .</segment>
<segment id="68" parent="1068" relname="joint">The OR-ed output of the most significant input bit-pair in the inaccurate sub-adder is given to the 0-input of MUX21 ,</segment>
<segment id="69" parent="1068" relname="joint">and a constant 0 is given to the 1-input of MUX21 .</segment>
<segment id="70" parent="1070" relname="span">The AND of the most significant input bit-pair</segment>
<segment id="71" parent="1071" relname="joint">corresponding to the inaccurate sub-adder serves as the select input of MUX21 ,</segment>
<segment id="72" parent="1071" relname="joint">besides serving as the carry input for the accurate sub-adder .</segment>
<segment id="73" parent="1074" relname="span">An optimized version of LOA</segment>
<segment id="74" parent="73" relname="elaboration">presented in Reference ,</segment>
<segment id="75" parent="1074" relname="elaboration">called OLOCA , is shown in</segment>
<segment id="76" parent="1076" relname="preparation">Figure 1</segment>
<segment id="77" parent="1076" relname="joint">f. OLOCA is in fact a slight modification of LOA .</segment>
<segment id="78" parent="1079" relname="span">The accurate sub-adder and the sum output bits</segment>
<segment id="79" parent="78" relname="elaboration">corresponding to the two most significant bit positions in the inaccurate sub-adder of OLOCA are the same as that of LOA .</segment>
<segment id="80" parent="1079" relname="concession">However , the remaining ( K – 2 ) less significant sum output bits in the inaccurate sub-adder of OLOCA are tied to a constant 1 .</segment>
<segment id="81" parent="1081" relname="span">In the LOA , however , all the K sum output bits are produced</segment>
<segment id="82" parent="81" relname="means">by OR-ing the respective input bit-pairs .</segment>
<segment id="83" parent="1083" relname="span">A constant 1 for the ( K – 2 )</segment>
<segment id="84" parent="1085" relname="span">sum bits in OLOCA implies the elimination of look-up tables</segment>
<segment id="85" parent="84" relname="restatement">( LUTs )</segment>
<segment id="86" parent="1087" relname="span">and flip-flops</segment>
<segment id="87" parent="86" relname="restatement">( FFs )</segment>
<segment id="88" parent="1086" relname="same_unit">for realizing those bits of the inaccurate sub-adder for a FPGA-based implementation .</segment>
<segment id="89" parent="1088" relname="span">Hence , OLOCA is likely to consume less FPGA resources compared to the accurate FPGA adder , LOA , LOAWA , APPROX5 , and HEAA ,</segment>
<segment id="90" parent="1089" relname="span">which is substantiated by the simulation results</segment>
<segment id="91" parent="90" relname="elaboration">given in the next section .</segment>
<group id="1000" type="span" />
<group id="1001" type="span" parent="1000" relname="span"/>
<group id="1002" type="span" parent="1001" relname="span"/>
<group id="1003" type="span" parent="1004" relname="preparation"/>
<group id="1004" type="multinuc" parent="1002" relname="span"/>
<group id="1006" type="span" parent="1004" relname="joint"/>
<group id="1007" type="multinuc" parent="1006" relname="span"/>
<group id="1008" type="span" parent="1007" relname="joint"/>
<group id="1009" type="span" parent="1008" relname="span"/>
<group id="1010" type="span" parent="9" relname="concession"/>
<group id="1012" type="span" parent="1007" relname="joint"/>
<group id="1014" type="multinuc" parent="1007" relname="joint"/>
<group id="1015" type="span" parent="1014" relname="same_unit"/>
<group id="1016" type="span" parent="15" relname="purpose"/>
<group id="1017" type="span" parent="1007" relname="joint"/>
<group id="1018" type="span" parent="1017" relname="span"/>
<group id="1019" type="span" parent="1018" relname="span"/>
<group id="1020" type="span" parent="19" relname="elaboration"/>
<group id="1021" type="multinuc" parent="1019" relname="elaboration"/>
<group id="1022" type="span" parent="1021" relname="joint"/>
<group id="1023" type="span" parent="1022" relname="span"/>
<group id="1024" type="span" parent="1023" relname="span"/>
<group id="1025" type="multinuc" parent="1024" relname="span"/>
<group id="1026" type="span" parent="1025" relname="same_unit"/>
<group id="1027" type="span" parent="25" relname="elaboration"/>
<group id="1028" type="span" parent="1021" relname="joint"/>
<group id="1029" type="span" parent="1028" relname="span"/>
<group id="1030" type="multinuc" parent="1029" relname="span"/>
<group id="1031" type="span" parent="1030" relname="joint"/>
<group id="1032" type="multinuc" parent="1030" relname="joint"/>
<group id="1033" type="multinuc" parent="1032" relname="joint"/>
<group id="1034" type="span" parent="1033" relname="joint"/>
<group id="1035" type="multinuc" parent="33" relname="elaboration"/>
<group id="1036" type="span" parent="1033" relname="joint"/>
<group id="1037" type="span" parent="1032" relname="joint"/>
<group id="1038" type="multinuc" parent="1037" relname="span"/>
<group id="1039" type="span" parent="1038" relname="joint"/>
<group id="1040" type="span" parent="1039" relname="span"/>
<group id="1041" type="multinuc" parent="40" relname="elaboration"/>
<group id="1042" type="span" parent="1038" relname="joint"/>
<group id="1043" type="span" parent="1045" relname="preparation"/>
<group id="1044" type="span" parent="43" relname="elaboration"/>
<group id="1045" type="span" parent="1042" relname="span"/>
<group id="1046" type="multinuc" parent="1045" relname="span"/>
<group id="1047" type="multinuc" parent="1046" relname="joint"/>
<group id="1048" type="span" parent="1047" relname="joint"/>
<group id="1049" type="span" parent="48" relname="elaboration"/>
<group id="1050" type="multinuc" parent="1047" relname="joint"/>
<group id="1051" type="span" parent="1050" relname="joint"/>
<group id="1052" type="span" parent="51" relname="elaboration"/>
<group id="1053" type="multinuc" parent="1050" relname="joint"/>
<group id="1054" type="span" parent="1053" relname="joint"/>
<group id="1055" type="multinuc" parent="1054" relname="span"/>
<group id="1056" type="span" parent="1055" relname="same_unit"/>
<group id="1057" type="multinuc" parent="1053" relname="joint"/>
<group id="1058" type="span" parent="1057" relname="joint"/>
<group id="1059" type="span" parent="1058" relname="span"/>
<group id="1060" type="span" parent="1059" relname="span"/>
<group id="1061" type="multinuc" parent="60" relname="elaboration"/>
<group id="1062" type="multinuc" parent="1057" relname="joint"/>
<group id="1063" type="multinuc" parent="1062" relname="joint"/>
<group id="1064" type="span" parent="1063" relname="joint"/>
<group id="1065" type="multinuc" parent="1063" relname="joint"/>
<group id="1066" type="span" parent="1065" relname="same_unit"/>
<group id="1067" type="multinuc" parent="1062" relname="joint"/>
<group id="1068" type="multinuc" parent="1067" relname="joint"/>
<group id="1069" type="multinuc" parent="1067" relname="joint"/>
<group id="1070" type="span" parent="1069" relname="joint"/>
<group id="1071" type="multinuc" parent="70" relname="elaboration"/>
<group id="1072" type="span" parent="1069" relname="joint"/>
<group id="1073" type="span" parent="1075" relname="preparation"/>
<group id="1074" type="span" parent="1073" relname="span"/>
<group id="1075" type="span" parent="1072" relname="span"/>
<group id="1076" type="multinuc" parent="1075" relname="span"/>
<group id="1077" type="multinuc" parent="1076" relname="joint"/>
<group id="1078" type="span" parent="1077" relname="joint"/>
<group id="1079" type="span" parent="1078" relname="span"/>
<group id="1080" type="multinuc" parent="1077" relname="joint"/>
<group id="1081" type="span" parent="1080" relname="joint"/>
<group id="1082" type="multinuc" parent="1080" relname="joint"/>
<group id="1083" type="span" parent="1082" relname="joint"/>
<group id="1084" type="multinuc" parent="83" relname="elaboration"/>
<group id="1085" type="span" parent="1084" relname="same_unit"/>
<group id="1086" type="multinuc" parent="1084" relname="same_unit"/>
<group id="1087" type="span" parent="1086" relname="same_unit"/>
<group id="1088" type="span" parent="1082" relname="joint"/>
<group id="1089" type="span" parent="89" relname="elaboration"/>
	</body>
</rst>
