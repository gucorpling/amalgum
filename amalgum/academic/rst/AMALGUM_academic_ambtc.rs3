<rst>
<header>
	<relations>
			<rel name="purpose" type="rst"/>
			<rel name="elaboration" type="rst"/>
			<rel name="circumstance" type="rst"/>
			<rel name="cause" type="rst"/>
			<rel name="condition" type="rst"/>
			<rel name="preparation" type="rst"/>
			<rel name="restatement" type="rst"/>
			<rel name="means" type="rst"/>
			<rel name="attribution" type="rst"/>
			<rel name="joint" type="multinuc"/>
			<rel name="sequence" type="multinuc"/>
			<rel name="same_unit" type="multinuc"/>
		</relations>
</header>
<body>
<segment id="1" parent="1001" relname="preparation">2.</segment>
<segment id="2" parent="1002" relname="preparation">Related Work</segment>
<segment id="3" parent="1003" relname="preparation">Two important techniques are used in our proposed method :</segment>
<segment id="4" parent="1005" relname="span">absolute moment block truncation coding</segment>
<segment id="5" parent="4" relname="restatement">( AMBTC )</segment>
<segment id="6" parent="1004" relname="same_unit">compression and matrix coding .</segment>
<segment id="7" parent="1003" relname="joint">These techniques are briefly introduced in Section 2.1 and Section 2.2 , respectively .</segment>
<segment id="8" parent="1003" relname="joint">2.1.</segment>
<segment id="9" parent="1009" relname="span">Absolute Moment Block Truncation Coding</segment>
<segment id="10" parent="9" relname="restatement">( AMBTC )</segment>
<segment id="11" parent="1012" relname="span">In 1979 , an efficient block-based lossy image compression technique</segment>
<segment id="12" parent="1013" relname="span">named block truncation coding</segment>
<segment id="13" parent="12" relname="restatement">( BTC )</segment>
<segment id="14" parent="1011" relname="same_unit">was proposed by Delp and Mitchell .</segment>
<segment id="15" parent="1016" relname="purpose">In order to achieve compression ,</segment>
<segment id="16" parent="1016" relname="joint">an image is divided into several non-overlapping blocks</segment>
<segment id="17" parent="1016" relname="joint">and stores only one bitmap and two corresponding quantization values of each block .</segment>
<segment id="18" parent="1019" relname="span">Because the algorithm</segment>
<segment id="19" parent="18" relname="elaboration">utilized in the BTC technique has significant computational complexity ,</segment>
<segment id="20" parent="1020" relname="span">Lema and Mitchell proposed an improved version</segment>
<segment id="21" parent="1021" relname="span">named absolute moment block truncation coding</segment>
<segment id="22" parent="21" relname="restatement">( AMBTC ) .</segment>
<segment id="23" parent="1024" relname="span">In AMBTC , the image is also divided into several non-overlapping blocks with a size of k × k pixels ,</segment>
<segment id="24" parent="23" relname="purpose">for each block , the mean value AVG can be calculated by Equation ( 1 ) .</segment>
<segment id="25" parent="1025" relname="span">( 1 )</segment>
<segment id="26" parent="25" relname="elaboration">where denotes the j -th pixel value in the block .</segment>
<segment id="27" parent="1027" relname="span">The bitmap can then be constructed</segment>
<segment id="28" parent="27" relname="means">by comparing each pixel value with AVG :</segment>
<segment id="29" parent="1030" relname="span">Set the bit value of bitmap to ‘ 0 ’</segment>
<segment id="30" parent="1031" relname="joint">if the pixel value is less than AVG</segment>
<segment id="31" parent="1031" relname="joint">and set to ‘ 1 ’ for others .</segment>
<segment id="32" parent="1034" relname="span">Next , Equations ( 2 ) and ( 3 ) can be applied</segment>
<segment id="33" parent="32" relname="purpose">to derive two quantization values , i.e. , the low mean value L and the high mean value H , respectively .</segment>
<segment id="34" parent="1034" relname="elaboration">( 2 ) ( 3 )</segment>
<segment id="35" parent="1035" relname="span">where q represents the number of ‘ 1 ’</segment>
<segment id="36" parent="35" relname="elaboration">that exist in the bitmap BM .</segment>
<segment id="37" parent="1037" relname="span">Meanwhile , and denote two original pixel sets</segment>
<segment id="38" parent="37" relname="elaboration">which the corresponding bits are ‘ 0 ’ and ‘ 1 ’ , respectively in bitmap BM .</segment>
<segment id="39" parent="1039" relname="same_unit">Therefore , the final compression code of the block can be obtained</segment>
<segment id="40" parent="41" relname="attribution">by concatenating L , H , and BM ,</segment>
<segment id="41" parent="1040" relname="span">i.e. , ( L , H , BM ) .</segment>
<segment id="42" parent="1042" relname="span">The corresponding restored block can be constructed</segment>
<segment id="43" parent="42" relname="means">by replacing each ‘ 0 ’ and ‘ 1 ’ of the bitmap with low mean value L and high mean value H , respectively .</segment>
<segment id="44" parent="1043" relname="joint">2.2.</segment>
<segment id="45" parent="1044" relname="joint">Matrix Coding</segment>
<segment id="46" parent="1047" relname="span">Matrix coding method is a modified version of the</segment>
<segment id="47" parent="46" relname="restatement">( 7 , 4 )</segment>
<segment id="48" parent="1048" relname="joint">Hamming code ,</segment>
<segment id="49" parent="1048" relname="joint">and is widely used in LSB-based data hiding methods .</segment>
<segment id="50" parent="1051" relname="span">By utilizing the matrix operation , for a seven-bit sequence</segment>
<segment id="51" parent="50" relname="elaboration">( also called a code-word ) ,</segment>
<segment id="52" parent="1052" relname="span">at most one bit is changed</segment>
<segment id="53" parent="52" relname="circumstance">when embedding three secret bits .</segment>
<segment id="54" parent="1054" relname="joint">In the matrix coding method , H is the check matrix</segment>
<segment id="55" parent="1054" relname="joint">and is defined as .</segment>
<segment id="56" parent="1058" relname="span">Equation ( 4 ) is used</segment>
<segment id="57" parent="56" relname="purpose">to obtain which bit needs to be changed .</segment>
<segment id="58" parent="1058" relname="restatement">( 4 )</segment>
<segment id="59" parent="1059" relname="joint">where CW denotes the seven-bit sequence ,</segment>
<segment id="60" parent="1060" relname="span">and S represents the three-bit vector</segment>
<segment id="61" parent="60" relname="elaboration">to be hidden .</segment>
<segment id="62" parent="63" relname="attribution">Notice</segment>
<segment id="63" parent="1062" relname="span">that Equation ( 4 ) is calculated under the modulo-2 operation .</segment>
<segment id="64" parent="1064" relname="span">The location of z is listed in Table 1 .</segment>
<segment id="65" parent="1067" relname="span">In the data extraction phase , Equation ( 5 ) can be used</segment>
<segment id="66" parent="65" relname="purpose">to extract three bits of secret data from each seven-bit sequence .</segment>
<segment id="67" parent="1067" relname="restatement">( 5 )</segment>
<segment id="68" parent="1068" relname="span">where RCW denotes the seven-bit sequence</segment>
<segment id="69" parent="68" relname="elaboration">that has been embedded .</segment>
<segment id="70" parent="1063" relname="joint">Equation ( 5 ) is also calculated under the modulo-2 operation .</segment>
<group id="1000" type="span" />
<group id="1001" type="span" parent="1000" relname="span"/>
<group id="1002" type="span" parent="1001" relname="span"/>
<group id="1003" type="multinuc" parent="1002" relname="span"/>
<group id="1004" type="multinuc" parent="1003" relname="joint"/>
<group id="1005" type="span" parent="1004" relname="same_unit"/>
<group id="1008" type="span" parent="1003" relname="joint"/>
<group id="1009" type="span" parent="1010" relname="preparation"/>
<group id="1010" type="multinuc" parent="1008" relname="span"/>
<group id="1011" type="multinuc" parent="1010" relname="joint"/>
<group id="1012" type="span" parent="1011" relname="same_unit"/>
<group id="1013" type="span" parent="11" relname="elaboration"/>
<group id="1014" type="span" parent="1010" relname="joint"/>
<group id="1015" type="span" parent="1014" relname="span"/>
<group id="1016" type="multinuc" parent="1015" relname="span"/>
<group id="1017" type="multinuc" parent="1015" relname="cause"/>
<group id="1018" type="multinuc" parent="1017" relname="joint"/>
<group id="1019" type="span" parent="1018" relname="same_unit"/>
<group id="1020" type="span" parent="1018" relname="same_unit"/>
<group id="1021" type="span" parent="20" relname="elaboration"/>
<group id="1022" type="multinuc" parent="1017" relname="joint"/>
<group id="1023" type="span" parent="1022" relname="sequence"/>
<group id="1024" type="span" parent="1023" relname="span"/>
<group id="1025" type="span" parent="1024" relname="elaboration"/>
<group id="1026" type="span" parent="1022" relname="sequence"/>
<group id="1027" type="span" parent="1028" relname="preparation"/>
<group id="1028" type="multinuc" parent="1026" relname="span"/>
<group id="1029" type="span" parent="1028" relname="joint"/>
<group id="1030" type="span" parent="1029" relname="span"/>
<group id="1031" type="multinuc" parent="29" relname="condition"/>
<group id="1032" type="span" parent="1030" relname="elaboration"/>
<group id="1033" type="span" parent="1032" relname="span"/>
<group id="1034" type="span" parent="1033" relname="span"/>
<group id="1035" type="span" parent="1033" relname="elaboration"/>
<group id="1036" type="multinuc" parent="1028" relname="joint"/>
<group id="1037" type="span" parent="1036" relname="joint"/>
<group id="1038" type="span" parent="1036" relname="joint"/>
<group id="1039" type="multinuc" parent="1041" relname="preparation"/>
<group id="1040" type="span" parent="1039" relname="same_unit"/>
<group id="1041" type="multinuc" parent="1038" relname="span"/>
<group id="1042" type="span" parent="1041" relname="joint"/>
<group id="1043" type="multinuc" parent="1041" relname="joint"/>
<group id="1044" type="multinuc" parent="1043" relname="joint"/>
<group id="1045" type="span" parent="1044" relname="joint"/>
<group id="1046" type="multinuc" parent="1045" relname="span"/>
<group id="1047" type="span" parent="1046" relname="same_unit"/>
<group id="1048" type="multinuc" parent="1046" relname="same_unit"/>
<group id="1049" type="multinuc" parent="1046" relname="means"/>
<group id="1050" type="multinuc" parent="1049" relname="sequence"/>
<group id="1051" type="span" parent="1050" relname="same_unit"/>
<group id="1052" type="span" parent="1050" relname="same_unit"/>
<group id="1053" type="multinuc" parent="1049" relname="sequence"/>
<group id="1054" type="multinuc" parent="1053" relname="joint"/>
<group id="1055" type="multinuc" parent="1053" relname="joint"/>
<group id="1056" type="span" parent="1055" relname="joint"/>
<group id="1057" type="span" parent="1056" relname="span"/>
<group id="1058" type="span" parent="1057" relname="span"/>
<group id="1059" type="multinuc" parent="1057" relname="elaboration"/>
<group id="1060" type="span" parent="1059" relname="joint"/>
<group id="1061" type="multinuc" parent="1055" relname="joint"/>
<group id="1062" type="span" parent="1061" relname="joint"/>
<group id="1063" type="multinuc" parent="1061" relname="joint"/>
<group id="1064" type="span" parent="1063" relname="joint"/>
<group id="1065" type="span" parent="64" relname="elaboration"/>
<group id="1066" type="span" parent="1065" relname="span"/>
<group id="1067" type="span" parent="1066" relname="span"/>
<group id="1068" type="span" parent="1066" relname="elaboration"/>
	</body>
</rst>
