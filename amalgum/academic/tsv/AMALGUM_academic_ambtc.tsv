#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Referent|entity|infstat
#T_RL=webanno.custom.Coref|type|BT_webanno.custom.Referent


#Text=2.
1-1	0-2	2.	_	_	_	_

#Text=Related Work
2-1	3-10	Related	abstract[1]	new[1]	_	_
2-2	11-15	Work	abstract[1]	new[1]	_	_

#Text=Two important techniques are used in our proposed method :
3-1	16-19	Two	abstract[2]	new[2]	coref	5-1[13_2]
3-2	20-29	important	abstract[2]	new[2]	_	_
3-3	30-40	techniques	abstract[2]	new[2]	_	_
3-4	41-44	are	_	_	_	_
3-5	45-49	used	_	_	_	_
3-6	50-52	in	_	_	_	_
3-7	53-56	our	person|abstract[4]	acc|new[4]	coref	21-1[122_4]
3-8	57-65	proposed	abstract[4]	new[4]	_	_
3-9	66-72	method	abstract[4]	new[4]	_	_
3-10	73-74	:	_	_	_	_

#Text=absolute moment block truncation coding ( AMBTC ) compression and matrix coding .
4-1	75-83	absolute	event[5]|abstract[8]|abstract[10]	new[5]|new[8]|new[10]	appos|coref|coref	4-7[0_8]|7-1[17_5]|8-8[24_10]
4-2	84-90	moment	event[5]|abstract[8]|abstract[10]	new[5]|new[8]|new[10]	_	_
4-3	91-96	block	object|abstract[8]|abstract[10]	new|new[8]|new[10]	coref	8-12
4-4	97-107	truncation	abstract|abstract[8]|abstract[10]	new|new[8]|new[10]	coref	7-4
4-5	108-114	coding	abstract[8]|abstract[10]	new[8]|new[10]	_	_
4-6	115-116	(	abstract[10]	new[10]	_	_
4-7	117-122	AMBTC	abstract|abstract[10]	giv|new[10]	coref	4-11[12_0]
4-8	123-124	)	abstract[10]	new[10]	_	_
4-9	125-136	compression	abstract[10]	new[10]	_	_
4-10	137-140	and	_	_	_	_
4-11	141-147	matrix	abstract|abstract[12]	new|giv[12]	coref|coref	7-1[20_12]|20-1
4-12	148-154	coding	abstract[12]	giv[12]	_	_
4-13	155-156	.	_	_	_	_

#Text=These techniques are briefly introduced in Section 2.1 and Section 2.2 , respectively .
5-1	157-162	These	abstract[13]	giv[13]	_	_
5-2	163-173	techniques	abstract[13]	giv[13]	_	_
5-3	174-177	are	_	_	_	_
5-4	178-185	briefly	_	_	_	_
5-5	186-196	introduced	_	_	_	_
5-6	197-199	in	_	_	_	_
5-7	200-207	Section	abstract[14]	new[14]	_	_
5-8	208-211	2.1	abstract[14]	new[14]	_	_
5-9	212-215	and	_	_	_	_
5-10	216-223	Section	abstract[15]	new[15]	_	_
5-11	224-227	2.2	abstract[15]	new[15]	_	_
5-12	228-229	,	_	_	_	_
5-13	230-242	respectively	_	_	_	_
5-14	243-244	.	_	_	_	_

#Text=2.1.
6-1	245-249	2.1.	abstract	new	_	_

#Text=Absolute Moment Block Truncation Coding ( AMBTC )
7-1	250-258	Absolute	event[17]|abstract[20]	giv[17]|giv[20]	coref|coref	7-7[0_20]|10-22[46_17]
7-2	259-265	Moment	event[17]|abstract[20]	giv[17]|giv[20]	_	_
7-3	266-271	Block	person|abstract[20]	new|giv[20]	_	_
7-4	272-282	Truncation	abstract|abstract[20]	giv|giv[20]	coref	8-12[27_0]
7-5	283-289	Coding	abstract[20]	giv[20]	_	_
7-6	290-291	(	_	_	_	_
7-7	292-297	AMBTC	abstract	giv	coref	8-12[28_0]
7-8	298-299	)	_	_	_	_

#Text=In 1979 , an efficient block-based lossy image compression technique named block truncation coding ( BTC ) was proposed by Delp and Mitchell .
8-1	300-302	In	_	_	_	_
8-2	303-307	1979	time	new	_	_
8-3	308-309	,	_	_	_	_
8-4	310-312	an	abstract[25]	new[25]	coref	10-6[41_25]
8-5	313-322	efficient	abstract[25]	new[25]	_	_
8-6	323-334	block-based	abstract[25]	new[25]	_	_
8-7	335-340	lossy	abstract[25]	new[25]	_	_
8-8	341-346	image	abstract|abstract[24]|abstract[25]	new|giv[24]|new[25]	coref|coref	9-5[0_24]|9-7[33_0]
8-9	347-358	compression	abstract[24]|abstract[25]	giv[24]|new[25]	_	_
8-10	359-368	technique	abstract[25]	new[25]	_	_
8-11	369-374	named	abstract[25]	new[25]	_	_
8-12	375-380	block	abstract[25]|object|abstract[27]|abstract[28]	new[25]|giv|giv[27]|giv[28]	appos|coref|coref	8-16[0_28]|9-26[38_0]|10-24[48_27]
8-13	381-391	truncation	abstract[25]|abstract[27]|abstract[28]	new[25]|giv[27]|giv[28]	_	_
8-14	392-398	coding	abstract[25]|abstract[28]	new[25]|giv[28]	_	_
8-15	399-400	(	_	_	_	_
8-16	401-404	BTC	abstract	giv	coref	10-7
8-17	405-406	)	_	_	_	_
8-18	407-410	was	_	_	_	_
8-19	411-419	proposed	_	_	_	_
8-20	420-422	by	_	_	_	_
8-21	423-427	Delp	person	new	_	_
8-22	428-431	and	_	_	_	_
8-23	432-440	Mitchell	person	new	coref	10-16
8-24	441-442	.	_	_	_	_

#Text=In order to achieve compression , an image is divided into several non-overlapping blocks and stores only one bitmap and two corresponding quantization values of each block .
9-1	443-445	In	_	_	_	_
9-2	446-451	order	_	_	_	_
9-3	452-454	to	_	_	_	_
9-4	455-462	achieve	_	_	_	_
9-5	463-474	compression	abstract	giv	coref	17-5
9-6	475-476	,	_	_	_	_
9-7	477-479	an	abstract[33]	giv[33]	coref	11-4[52_33]
9-8	480-485	image	abstract[33]	giv[33]	_	_
9-9	486-488	is	_	_	_	_
9-10	489-496	divided	_	_	_	_
9-11	497-501	into	_	_	_	_
9-12	502-509	several	abstract[34]	new[34]	coref	11-10[53_34]
9-13	510-525	non-overlapping	abstract[34]	new[34]	_	_
9-14	526-532	blocks	abstract[34]	new[34]	_	_
9-15	533-536	and	_	_	_	_
9-16	537-543	stores	_	_	_	_
9-17	544-548	only	abstract[35]	new[35]	coref	13-1[64_35]
9-18	549-552	one	abstract[35]	new[35]	_	_
9-19	553-559	bitmap	abstract[35]	new[35]	_	_
9-20	560-563	and	_	_	_	_
9-21	564-567	two	abstract[37]	new[37]	coref	15-16[81_37]
9-22	568-581	corresponding	abstract[37]	new[37]	_	_
9-23	582-594	quantization	abstract|abstract[37]	new|new[37]	coref	15-17
9-24	595-601	values	abstract[37]	new[37]	_	_
9-25	602-604	of	abstract[37]	new[37]	_	_
9-26	605-609	each	abstract[37]|object[38]	new[37]|giv[38]	coref	10-24[0_38]
9-27	610-615	block	abstract[37]|object[38]	new[37]|giv[38]	_	_
9-28	616-617	.	_	_	_	_

#Text=Because the algorithm utilized in the BTC technique has significant computational complexity , Lema and Mitchell proposed an improved version named absolute moment block truncation coding ( AMBTC ) .
10-1	618-625	Because	_	_	_	_
10-2	626-629	the	abstract[39]	new[39]	_	_
10-3	630-639	algorithm	abstract[39]	new[39]	_	_
10-4	640-648	utilized	abstract[39]	new[39]	_	_
10-5	649-651	in	abstract[39]	new[39]	_	_
10-6	652-655	the	abstract[39]|abstract[41]	new[39]|giv[41]	_	_
10-7	656-659	BTC	abstract[39]|abstract|abstract[41]	new[39]|giv|giv[41]	coref	10-22[49_0]
10-8	660-669	technique	abstract[39]|abstract[41]	new[39]|giv[41]	_	_
10-9	670-673	has	_	_	_	_
10-10	674-685	significant	abstract[42]	new[42]	_	_
10-11	686-699	computational	abstract[42]	new[42]	_	_
10-12	700-710	complexity	abstract[42]	new[42]	_	_
10-13	711-712	,	_	_	_	_
10-14	713-717	Lema	person	new	_	_
10-15	718-721	and	_	_	_	_
10-16	722-730	Mitchell	person	giv	_	_
10-17	731-739	proposed	_	_	_	_
10-18	740-742	an	abstract[45]	new[45]	_	_
10-19	743-751	improved	abstract[45]	new[45]	_	_
10-20	752-759	version	abstract[45]	new[45]	_	_
10-21	760-765	named	abstract[45]	new[45]	_	_
10-22	766-774	absolute	abstract[45]|event[46]|abstract[49]	new[45]|giv[46]|giv[49]	coref	10-28[0_49]
10-23	775-781	moment	abstract[45]|event[46]|abstract[49]	new[45]|giv[46]|giv[49]	_	_
10-24	782-787	block	abstract[45]|object|abstract[48]|abstract[49]	new[45]|giv|giv[48]|giv[49]	coref	11-23[57_0]
10-25	788-798	truncation	abstract[45]|abstract[48]|abstract[49]	new[45]|giv[48]|giv[49]	_	_
10-26	799-805	coding	abstract[45]|abstract[49]	new[45]|giv[49]	_	_
10-27	806-807	(	_	_	_	_
10-28	808-813	AMBTC	abstract	giv	coref	11-2
10-29	814-815	)	_	_	_	_
10-30	816-817	.	_	_	_	_

#Text=In AMBTC , the image is also divided into several non-overlapping blocks with a size of k × k pixels , for each block , the mean value AVG can be calculated by Equation ( 1 ) .
11-1	818-820	In	_	_	_	_
11-2	821-826	AMBTC	abstract	giv	coref	20-1[119_0]
11-3	827-828	,	_	_	_	_
11-4	829-832	the	abstract[52]	giv[52]	_	_
11-5	833-838	image	abstract[52]	giv[52]	_	_
11-6	839-841	is	_	_	_	_
11-7	842-846	also	_	_	_	_
11-8	847-854	divided	_	_	_	_
11-9	855-859	into	_	_	_	_
11-10	860-867	several	abstract[53]	giv[53]	_	_
11-11	868-883	non-overlapping	abstract[53]	giv[53]	_	_
11-12	884-890	blocks	abstract[53]	giv[53]	_	_
11-13	891-895	with	abstract[53]	giv[53]	_	_
11-14	896-897	a	abstract[53]|abstract[54]	giv[53]|new[54]	_	_
11-15	898-902	size	abstract[53]|abstract[54]	giv[53]|new[54]	_	_
11-16	903-905	of	abstract[53]|abstract[54]	giv[53]|new[54]	_	_
11-17	906-907	k	abstract[53]|abstract[54]|abstract[56]	giv[53]|new[54]|new[56]	_	_
11-18	908-909	×	abstract[53]|abstract[54]|abstract[56]	giv[53]|new[54]|new[56]	_	_
11-19	910-911	k	abstract[53]|abstract[54]|abstract|abstract[56]	giv[53]|new[54]|new|new[56]	_	_
11-20	912-918	pixels	abstract[53]|abstract[54]|abstract[56]	giv[53]|new[54]|new[56]	_	_
11-21	919-920	,	_	_	_	_
11-22	921-924	for	_	_	_	_
11-23	925-929	each	object[57]	giv[57]	coref	12-12[63_57]
11-24	930-935	block	object[57]	giv[57]	_	_
11-25	936-937	,	_	_	_	_
11-26	938-941	the	abstract[58]	new[58]	coref	12-6[62_58]
11-27	942-946	mean	abstract[58]	new[58]	_	_
11-28	947-952	value	abstract[58]	new[58]	_	_
11-29	953-956	AVG	abstract	new	coref	13-13
11-30	957-960	can	_	_	_	_
11-31	961-963	be	_	_	_	_
11-32	964-974	calculated	_	_	_	_
11-33	975-977	by	_	_	_	_
11-34	978-986	Equation	abstract[60]	new[60]	coref	24-1[141_60]
11-35	987-988	(	abstract[60]	new[60]	_	_
11-36	989-990	1	abstract[60]	new[60]	_	_
11-37	991-992	)	abstract[60]	new[60]	_	_
11-38	993-994	.	_	_	_	_

#Text=( 1 ) where denotes the j -th pixel value in the block .
12-1	995-996	(	_	_	_	_
12-2	997-998	1	_	_	_	_
12-3	999-1000	)	_	_	_	_
12-4	1001-1006	where	_	_	_	_
12-5	1007-1014	denotes	_	_	_	_
12-6	1015-1018	the	abstract[62]	giv[62]	coref	13-9[66_62]
12-7	1019-1020	j	abstract[62]	giv[62]	_	_
12-8	1021-1024	-th	abstract[62]	giv[62]	_	_
12-9	1025-1030	pixel	object|abstract[62]	new|giv[62]	coref	13-10
12-10	1031-1036	value	abstract[62]	giv[62]	_	_
12-11	1037-1039	in	abstract[62]	giv[62]	_	_
12-12	1040-1043	the	abstract[62]|object[63]	giv[62]|giv[63]	coref	17-8[103_63]
12-13	1044-1049	block	abstract[62]|object[63]	giv[62]|giv[63]	_	_
12-14	1050-1051	.	_	_	_	_

#Text=The bitmap can then be constructed by comparing each pixel value with AVG :
13-1	1052-1055	The	abstract[64]	giv[64]	coref	14-6[0_64]
13-2	1056-1062	bitmap	abstract[64]	giv[64]	_	_
13-3	1063-1066	can	_	_	_	_
13-4	1067-1071	then	_	_	_	_
13-5	1072-1074	be	_	_	_	_
13-6	1075-1086	constructed	_	_	_	_
13-7	1087-1089	by	_	_	_	_
13-8	1090-1099	comparing	_	_	_	_
13-9	1100-1104	each	abstract[66]	giv[66]	coref	14-2[69_66]
13-10	1105-1110	pixel	object|abstract[66]	giv|giv[66]	coref	14-13
13-11	1111-1116	value	abstract[66]	giv[66]	_	_
13-12	1117-1121	with	_	_	_	_
13-13	1122-1125	AVG	abstract	giv	coref	14-18
13-14	1126-1127	:	_	_	_	_

#Text=Set the bit value of bitmap to ‘ 0 ’ if the pixel value is less than AVG and set to ‘ 1 ’ for others .
14-1	1128-1131	Set	_	_	_	_
14-2	1132-1135	the	abstract[69]	giv[69]	coref	14-12[73_69]
14-3	1136-1139	bit	abstract|abstract[69]	new|giv[69]	coref	22-18[134_0]
14-4	1140-1145	value	abstract[69]	giv[69]	_	_
14-5	1146-1148	of	abstract[69]	giv[69]	_	_
14-6	1149-1155	bitmap	abstract[69]|abstract	giv[69]|giv	coref	15-55
14-7	1156-1158	to	_	_	_	_
14-8	1159-1160	‘	_	_	_	_
14-9	1161-1162	0	abstract	new	coref	16-10[97_0]
14-10	1163-1164	’	_	_	_	_
14-11	1165-1167	if	_	_	_	_
14-12	1168-1171	the	abstract[73]	giv[73]	coref	15-20[83_73]
14-13	1172-1177	pixel	object|abstract[73]	giv|giv[73]	coref	16-7
14-14	1178-1183	value	abstract[73]	giv[73]	_	_
14-15	1184-1186	is	_	_	_	_
14-16	1187-1191	less	_	_	_	_
14-17	1192-1196	than	_	_	_	_
14-18	1197-1200	AVG	abstract	giv	_	_
14-19	1201-1204	and	_	_	_	_
14-20	1205-1208	set	_	_	_	_
14-21	1209-1211	to	_	_	_	_
14-22	1212-1213	‘	_	_	_	_
14-23	1214-1215	1	time	new	coref	15-48[91_0]
14-24	1216-1217	’	_	_	_	_
14-25	1218-1221	for	_	_	_	_
14-26	1222-1228	others	person	new	_	_
14-27	1229-1230	.	_	_	_	_

#Text=Next , Equations ( 2 ) and ( 3 ) can be applied to derive two quantization values , i.e. , the low mean value L and the high mean value H , respectively . ( 2 ) ( 3 ) where q represents the number of ‘ 1 ’ that exist in the bitmap BM .
15-1	1231-1235	Next	_	_	_	_
15-2	1236-1237	,	_	_	_	_
15-3	1238-1247	Equations	abstract[77]	new[77]	_	_
15-4	1248-1249	(	abstract[77]	new[77]	_	_
15-5	1250-1251	2	abstract[77]|abstract	new[77]|new	_	_
15-6	1252-1253	)	abstract[77]	new[77]	_	_
15-7	1254-1257	and	_	_	_	_
15-8	1258-1259	(	_	_	_	_
15-9	1260-1261	3	abstract	new	_	_
15-10	1262-1263	)	_	_	_	_
15-11	1264-1267	can	_	_	_	_
15-12	1268-1270	be	_	_	_	_
15-13	1271-1278	applied	_	_	_	_
15-14	1279-1281	to	_	_	_	_
15-15	1282-1288	derive	_	_	_	_
15-16	1289-1292	two	abstract[81]	giv[81]	appos	15-20[85_81]
15-17	1293-1305	quantization	abstract|abstract[81]	giv|giv[81]	_	_
15-18	1306-1312	values	abstract[81]	giv[81]	_	_
15-19	1313-1314	,	_	_	_	_
15-20	1315-1319	i.e.	abstract[83]|abstract[84]|abstract[85]	giv[83]|new[84]|giv[85]	coref|coref	15-28[87_83]|18-22[113_84]
15-21	1320-1321	,	abstract[83]|abstract[84]|abstract[85]	giv[83]|new[84]|giv[85]	_	_
15-22	1322-1325	the	abstract[83]|abstract[84]|abstract[85]	giv[83]|new[84]|giv[85]	_	_
15-23	1326-1329	low	abstract[83]|abstract[84]|abstract[85]	giv[83]|new[84]|giv[85]	_	_
15-24	1330-1334	mean	abstract|abstract[83]|abstract[84]|abstract[85]	new|giv[83]|new[84]|giv[85]	coref	15-29[86_0]
15-25	1335-1340	value	abstract[83]|abstract[84]|abstract[85]	giv[83]|new[84]|giv[85]	_	_
15-26	1341-1342	L	abstract[84]|abstract[85]	new[84]|giv[85]	_	_
15-27	1343-1346	and	abstract[84]|abstract[85]	new[84]|giv[85]	_	_
15-28	1347-1350	the	abstract[84]|abstract[85]|abstract[87]|abstract[88]	new[84]|giv[85]|giv[87]|new[88]	coref|coref	17-17[0_88]|18-22[112_87]
15-29	1351-1355	high	abstract[84]|abstract[85]|abstract[86]|abstract[87]|abstract[88]	new[84]|giv[85]|giv[86]|giv[87]|new[88]	coref	18-23[0_86]
15-30	1356-1360	mean	abstract[84]|abstract[85]|abstract[86]|abstract[87]|abstract[88]	new[84]|giv[85]|giv[86]|giv[87]|new[88]	_	_
15-31	1361-1366	value	abstract[84]|abstract[85]|abstract[87]|abstract[88]	new[84]|giv[85]|giv[87]|new[88]	_	_
15-32	1367-1368	H	abstract[84]|abstract[85]|abstract[88]	new[84]|giv[85]|new[88]	_	_
15-33	1369-1370	,	_	_	_	_
15-34	1371-1383	respectively	_	_	_	_
15-35	1384-1385	.	_	_	_	_
15-36	1386-1387	(	_	_	_	_
15-37	1388-1389	2	_	_	_	_
15-38	1390-1391	)	_	_	_	_
15-39	1392-1393	(	_	_	_	_
15-40	1394-1395	3	_	_	_	_
15-41	1396-1397	)	_	_	_	_
15-42	1398-1403	where	_	_	_	_
15-43	1404-1405	q	abstract	new	_	_
15-44	1406-1416	represents	_	_	_	_
15-45	1417-1420	the	abstract[90]	new[90]	_	_
15-46	1421-1427	number	abstract[90]	new[90]	_	_
15-47	1428-1430	of	abstract[90]	new[90]	_	_
15-48	1431-1432	‘	abstract[90]|time[91]	new[90]|giv[91]	coref	16-18[98_91]
15-49	1433-1434	1	abstract[90]|time[91]	new[90]|giv[91]	_	_
15-50	1435-1436	’	abstract[90]|time[91]	new[90]|giv[91]	_	_
15-51	1437-1441	that	abstract[90]|time[91]	new[90]|giv[91]	_	_
15-52	1442-1447	exist	abstract[90]|time[91]	new[90]|giv[91]	_	_
15-53	1448-1450	in	abstract[90]|time[91]	new[90]|giv[91]	_	_
15-54	1451-1454	the	abstract[90]|time[91]|abstract[93]	new[90]|giv[91]|new[93]	coref	16-24[100_93]
15-55	1455-1461	bitmap	abstract[90]|time[91]|abstract|abstract[93]	new[90]|giv[91]|giv|new[93]	coref	16-24
15-56	1462-1464	BM	abstract[90]|time[91]|abstract[93]	new[90]|giv[91]|new[93]	_	_
15-57	1465-1466	.	_	_	_	_

#Text=Meanwhile , and denote two original pixel sets which the corresponding bits are ‘ 0 ’ and ‘ 1 ’ , respectively in bitmap BM .
16-1	1467-1476	Meanwhile	_	_	_	_
16-2	1477-1478	,	_	_	_	_
16-3	1479-1482	and	_	_	_	_
16-4	1483-1489	denote	_	_	_	_
16-5	1490-1493	two	abstract[95]	new[95]	_	_
16-6	1494-1502	original	abstract[95]	new[95]	_	_
16-7	1503-1508	pixel	object|abstract[95]	giv|new[95]	_	_
16-8	1509-1513	sets	abstract[95]	new[95]	_	_
16-9	1514-1519	which	abstract[95]	new[95]	_	_
16-10	1520-1523	the	abstract[95]|abstract[96]|abstract[97]	new[95]|new[96]|giv[97]	coref|coref	18-10[108_97]|22-26[135_96]
16-11	1524-1537	corresponding	abstract[95]|abstract[96]|abstract[97]	new[95]|new[96]|giv[97]	_	_
16-12	1538-1542	bits	abstract[95]|abstract[96]|abstract[97]	new[95]|new[96]|giv[97]	_	_
16-13	1543-1546	are	abstract[95]|abstract[97]	new[95]|giv[97]	_	_
16-14	1547-1548	‘	abstract[95]|abstract[97]	new[95]|giv[97]	_	_
16-15	1549-1550	0	abstract[95]|abstract[97]	new[95]|giv[97]	_	_
16-16	1551-1552	’	abstract[95]|abstract[97]	new[95]|giv[97]	_	_
16-17	1553-1556	and	abstract[95]	new[95]	_	_
16-18	1557-1558	‘	abstract[95]|time[98]	new[95]|giv[98]	coref	18-15[109_98]
16-19	1559-1560	1	abstract[95]|time[98]	new[95]|giv[98]	_	_
16-20	1561-1562	’	abstract[95]|time[98]	new[95]|giv[98]	_	_
16-21	1563-1564	,	abstract[95]|time[98]	new[95]|giv[98]	_	_
16-22	1565-1577	respectively	abstract[95]|time[98]	new[95]|giv[98]	_	_
16-23	1578-1580	in	abstract[95]|time[98]	new[95]|giv[98]	_	_
16-24	1581-1587	bitmap	abstract[95]|time[98]|abstract|abstract[100]	new[95]|giv[98]|giv|giv[100]	coref|coref	17-20[0_100]|18-19[110_0]
16-25	1588-1590	BM	abstract[95]|time[98]|abstract[100]	new[95]|giv[98]|giv[100]	_	_
16-26	1591-1592	.	_	_	_	_

#Text=Therefore , the final compression code of the block can be obtained by concatenating L , H , and BM , i.e. , ( L , H , BM ) .
17-1	1593-1602	Therefore	_	_	_	_
17-2	1603-1604	,	_	_	_	_
17-3	1605-1608	the	abstract[102]	new[102]	coref	21-9[125_102]
17-4	1609-1614	final	abstract[102]	new[102]	_	_
17-5	1615-1626	compression	abstract|abstract[102]	giv|new[102]	_	_
17-6	1627-1631	code	abstract[102]	new[102]	_	_
17-7	1632-1634	of	abstract[102]	new[102]	_	_
17-8	1635-1638	the	abstract[102]|object[103]	new[102]|giv[103]	coref	18-1[107_103]
17-9	1639-1644	block	abstract[102]|object[103]	new[102]|giv[103]	_	_
17-10	1645-1648	can	_	_	_	_
17-11	1649-1651	be	_	_	_	_
17-12	1652-1660	obtained	_	_	_	_
17-13	1661-1663	by	_	_	_	_
17-14	1664-1677	concatenating	_	_	_	_
17-15	1678-1679	L	person	new	_	_
17-16	1680-1681	,	_	_	_	_
17-17	1682-1683	H	abstract	giv	coref	18-30
17-18	1684-1685	,	_	_	_	_
17-19	1686-1689	and	_	_	_	_
17-20	1690-1692	BM	abstract	giv	_	_
17-21	1693-1694	,	_	_	_	_
17-22	1695-1699	i.e.	_	_	_	_
17-23	1700-1701	,	_	_	_	_
17-24	1702-1703	(	_	_	_	_
17-25	1704-1705	L	_	_	_	_
17-26	1706-1707	,	_	_	_	_
17-27	1708-1709	H	_	_	_	_
17-28	1710-1711	,	_	_	_	_
17-29	1712-1714	BM	_	_	_	_
17-30	1715-1716	)	_	_	_	_
17-31	1717-1718	.	_	_	_	_

#Text=The corresponding restored block can be constructed by replacing each ‘ 0 ’ and ‘ 1 ’ of the bitmap with low mean value L and high mean value H , respectively .
18-1	1719-1722	The	object[107]	giv[107]	_	_
18-2	1723-1736	corresponding	object[107]	giv[107]	_	_
18-3	1737-1745	restored	object[107]	giv[107]	_	_
18-4	1746-1751	block	object[107]	giv[107]	_	_
18-5	1752-1755	can	_	_	_	_
18-6	1756-1758	be	_	_	_	_
18-7	1759-1770	constructed	_	_	_	_
18-8	1771-1773	by	_	_	_	_
18-9	1774-1783	replacing	_	_	_	_
18-10	1784-1788	each	abstract[108]	giv[108]	_	_
18-11	1789-1790	‘	abstract[108]	giv[108]	_	_
18-12	1791-1792	0	abstract[108]	giv[108]	_	_
18-13	1793-1794	’	abstract[108]	giv[108]	_	_
18-14	1795-1798	and	_	_	_	_
18-15	1799-1800	‘	time[109]	giv[109]	_	_
18-16	1801-1802	1	time[109]	giv[109]	_	_
18-17	1803-1804	’	time[109]	giv[109]	_	_
18-18	1805-1807	of	time[109]	giv[109]	_	_
18-19	1808-1811	the	time[109]|abstract[110]	giv[109]|giv[110]	_	_
18-20	1812-1818	bitmap	time[109]|abstract[110]	giv[109]|giv[110]	_	_
18-21	1819-1823	with	_	_	_	_
18-22	1824-1827	low	abstract[112]|abstract[113]	giv[112]|giv[113]	coref	18-27[115_112]
18-23	1828-1832	mean	abstract|abstract[112]|abstract[113]	giv|giv[112]|giv[113]	coref	18-27[114_0]
18-24	1833-1838	value	abstract[112]|abstract[113]	giv[112]|giv[113]	_	_
18-25	1839-1840	L	abstract[112]|abstract[113]	giv[112]|giv[113]	_	_
18-26	1841-1844	and	abstract[113]	giv[113]	_	_
18-27	1845-1849	high	abstract[113]|abstract[114]|abstract[115]	giv[113]|giv[114]|giv[115]	_	_
18-28	1850-1854	mean	abstract[113]|abstract[114]|abstract[115]	giv[113]|giv[114]|giv[115]	_	_
18-29	1855-1860	value	abstract[113]|abstract[115]	giv[113]|giv[115]	_	_
18-30	1861-1862	H	abstract	giv	coref	23-7
18-31	1863-1864	,	_	_	_	_
18-32	1865-1877	respectively	_	_	_	_
18-33	1878-1879	.	_	_	_	_

#Text=2.2.
19-1	1880-1884	2.2.	abstract	new	_	_

#Text=Matrix Coding
20-1	1885-1891	Matrix	abstract|abstract[119]	giv|giv[119]	coref|coref	21-1|21-1[121_119]
20-2	1892-1898	Coding	abstract[119]	giv[119]	_	_

#Text=Matrix coding method is a modified version of the ( 7 , 4 ) Hamming code , and is widely used in LSB-based data hiding methods .
21-1	1899-1905	Matrix	abstract|abstract[121]|abstract[122]	giv|giv[121]|giv[122]	coref|coref	21-5[123_122]|22-4
21-2	1906-1912	coding	abstract[121]|abstract[122]	giv[121]|giv[122]	_	_
21-3	1913-1919	method	abstract[122]	giv[122]	_	_
21-4	1920-1922	is	_	_	_	_
21-5	1923-1924	a	abstract[123]	giv[123]	coref	23-2[137_123]
21-6	1925-1933	modified	abstract[123]	giv[123]	_	_
21-7	1934-1941	version	abstract[123]	giv[123]	_	_
21-8	1942-1944	of	abstract[123]	giv[123]	_	_
21-9	1945-1948	the	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-10	1949-1950	(	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-11	1951-1952	7	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-12	1953-1954	,	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-13	1955-1956	4	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-14	1957-1958	)	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-15	1959-1966	Hamming	abstract[123]|person|abstract[125]	giv[123]|new|giv[125]	_	_
21-16	1967-1971	code	abstract[123]|abstract[125]	giv[123]|giv[125]	_	_
21-17	1972-1973	,	_	_	_	_
21-18	1974-1977	and	_	_	_	_
21-19	1978-1980	is	_	_	_	_
21-20	1981-1987	widely	_	_	_	_
21-21	1988-1992	used	_	_	_	_
21-22	1993-1995	in	_	_	_	_
21-23	1996-2005	LSB-based	abstract|abstract[129]	new|new[129]	_	_
21-24	2006-2010	data	abstract|abstract[128]|abstract[129]	new|new[128]|new[129]	coref	27-3
21-25	2011-2017	hiding	abstract[128]|abstract[129]	new[128]|new[129]	_	_
21-26	2018-2025	methods	abstract[129]	new[129]	_	_
21-27	2026-2027	.	_	_	_	_

#Text=By utilizing the matrix operation , for a seven-bit sequence ( also called a code-word ) , at most one bit is changed when embedding three secret bits .
22-1	2028-2030	By	_	_	_	_
22-2	2031-2040	utilizing	_	_	_	_
22-3	2041-2044	the	abstract[131]	new[131]	coref	25-10[150_131]
22-4	2045-2051	matrix	abstract|abstract[131]	giv|new[131]	coref	23-3
22-5	2052-2061	operation	abstract[131]	new[131]	_	_
22-6	2062-2063	,	_	_	_	_
22-7	2064-2067	for	_	_	_	_
22-8	2068-2069	a	abstract[132]	new[132]	coref	24-22[145_132]
22-9	2070-2079	seven-bit	abstract[132]	new[132]	_	_
22-10	2080-2088	sequence	abstract[132]	new[132]	_	_
22-11	2089-2090	(	abstract[132]	new[132]	_	_
22-12	2091-2095	also	abstract[132]	new[132]	_	_
22-13	2096-2102	called	abstract[132]	new[132]	_	_
22-14	2103-2104	a	abstract[132]|abstract[133]	new[132]|new[133]	_	_
22-15	2105-2114	code-word	abstract[132]|abstract[133]	new[132]|new[133]	_	_
22-16	2115-2116	)	abstract[132]	new[132]	_	_
22-17	2117-2118	,	_	_	_	_
22-18	2119-2121	at	abstract[134]	giv[134]	coref	24-9[143_134]
22-19	2122-2126	most	abstract[134]	giv[134]	_	_
22-20	2127-2130	one	abstract[134]	giv[134]	_	_
22-21	2131-2134	bit	abstract[134]	giv[134]	_	_
22-22	2135-2137	is	_	_	_	_
22-23	2138-2145	changed	_	_	_	_
22-24	2146-2150	when	_	_	_	_
22-25	2151-2160	embedding	_	_	_	_
22-26	2161-2166	three	abstract[135]	giv[135]	coref	27-16[159_135]
22-27	2167-2173	secret	abstract[135]	giv[135]	_	_
22-28	2174-2178	bits	abstract[135]	giv[135]	_	_
22-29	2179-2180	.	_	_	_	_

#Text=In the matrix coding method , H is the check matrix and is defined as .
23-1	2181-2183	In	_	_	_	_
23-2	2184-2187	the	abstract[137]	giv[137]	_	_
23-3	2188-2194	matrix	abstract|abstract[137]	giv|giv[137]	coref	26-1[151_0]
23-4	2195-2201	coding	abstract[137]	giv[137]	_	_
23-5	2202-2208	method	abstract[137]	giv[137]	_	_
23-6	2209-2210	,	_	_	_	_
23-7	2211-2212	H	abstract	giv	coref	23-9[140_0]
23-8	2213-2215	is	_	_	_	_
23-9	2216-2219	the	abstract[140]	giv[140]	_	_
23-10	2220-2225	check	event|abstract[140]	new|giv[140]	_	_
23-11	2226-2232	matrix	abstract[140]	giv[140]	_	_
23-12	2233-2236	and	_	_	_	_
23-13	2237-2239	is	_	_	_	_
23-14	2240-2247	defined	_	_	_	_
23-15	2248-2250	as	_	_	_	_
23-16	2251-2252	.	_	_	_	_

#Text=Equation ( 4 ) is used to obtain which bit needs to be changed . ( 4 ) where CW denotes the seven-bit sequence , and S represents the three-bit vector to be hidden .
24-1	2253-2261	Equation	abstract[141]	giv[141]	coref	25-3[0_141]
24-2	2262-2263	(	abstract[141]	giv[141]	_	_
24-3	2264-2265	4	abstract[141]|abstract	giv[141]|new	_	_
24-4	2266-2267	)	abstract[141]	giv[141]	_	_
24-5	2268-2270	is	_	_	_	_
24-6	2271-2275	used	_	_	_	_
24-7	2276-2278	to	_	_	_	_
24-8	2279-2285	obtain	_	_	_	_
24-9	2286-2291	which	abstract[143]	giv[143]	_	_
24-10	2292-2295	bit	abstract[143]	giv[143]	_	_
24-11	2296-2301	needs	_	_	_	_
24-12	2302-2304	to	_	_	_	_
24-13	2305-2307	be	_	_	_	_
24-14	2308-2315	changed	_	_	_	_
24-15	2316-2317	.	_	_	_	_
24-16	2318-2319	(	_	_	_	_
24-17	2320-2321	4	_	_	_	_
24-18	2322-2323	)	_	_	_	_
24-19	2324-2329	where	_	_	_	_
24-20	2330-2332	CW	abstract	new	_	_
24-21	2333-2340	denotes	_	_	_	_
24-22	2341-2344	the	abstract[145]	giv[145]	coref	27-22[161_145]
24-23	2345-2354	seven-bit	abstract[145]	giv[145]	_	_
24-24	2355-2363	sequence	abstract[145]	giv[145]	_	_
24-25	2364-2365	,	_	_	_	_
24-26	2366-2369	and	_	_	_	_
24-27	2370-2371	S	abstract	new	_	_
24-28	2372-2382	represents	_	_	_	_
24-29	2383-2386	the	abstract[147]	new[147]	_	_
24-30	2387-2396	three-bit	abstract[147]	new[147]	_	_
24-31	2397-2403	vector	abstract[147]	new[147]	_	_
24-32	2404-2406	to	abstract[147]	new[147]	_	_
24-33	2407-2409	be	abstract[147]	new[147]	_	_
24-34	2410-2416	hidden	abstract[147]	new[147]	_	_
24-35	2417-2418	.	_	_	_	_

#Text=Notice that Equation ( 4 ) is calculated under the modulo-2 operation .
25-1	2419-2425	Notice	_	_	_	_
25-2	2426-2430	that	_	_	_	_
25-3	2431-2439	Equation	abstract	giv	appos	25-5
25-4	2440-2441	(	_	_	_	_
25-5	2442-2443	4	abstract	giv	coref	27-7[157_0]
25-6	2444-2445	)	_	_	_	_
25-7	2446-2448	is	_	_	_	_
25-8	2449-2459	calculated	_	_	_	_
25-9	2460-2465	under	_	_	_	_
25-10	2466-2469	the	abstract[150]	giv[150]	coref	28-9[167_150]
25-11	2470-2478	modulo-2	abstract[150]	giv[150]	_	_
25-12	2479-2488	operation	abstract[150]	giv[150]	_	_
25-13	2489-2490	.	_	_	_	_

#Text=The location of z is listed in Table 1 .
26-1	2491-2494	The	abstract[151]	giv[151]	_	_
26-2	2495-2503	location	abstract[151]	giv[151]	_	_
26-3	2504-2506	of	abstract[151]	giv[151]	_	_
26-4	2507-2508	z	abstract[151]|abstract	giv[151]|new	_	_
26-5	2509-2511	is	_	_	_	_
26-6	2512-2518	listed	_	_	_	_
26-7	2519-2521	in	_	_	_	_
26-8	2522-2527	Table	abstract[153]	new[153]	_	_
26-9	2528-2529	1	abstract[153]	new[153]	_	_
26-10	2530-2531	.	_	_	_	_

#Text=In the data extraction phase , Equation ( 5 ) can be used to extract three bits of secret data from each seven-bit sequence . ( 5 ) where RCW denotes the seven-bit sequence that has been embedded .
27-1	2532-2534	In	_	_	_	_
27-2	2535-2538	the	abstract[156]	new[156]	_	_
27-3	2539-2543	data	abstract|abstract[156]	giv|new[156]	coref	27-19[160_0]
27-4	2544-2554	extraction	place|abstract[156]	new|new[156]	_	_
27-5	2555-2560	phase	abstract[156]	new[156]	_	_
27-6	2561-2562	,	_	_	_	_
27-7	2563-2571	Equation	abstract[157]	giv[157]	coref	28-1[0_157]
27-8	2572-2573	(	abstract[157]	giv[157]	_	_
27-9	2574-2575	5	abstract[157]|abstract	giv[157]|new	_	_
27-10	2576-2577	)	abstract[157]	giv[157]	_	_
27-11	2578-2581	can	_	_	_	_
27-12	2582-2584	be	_	_	_	_
27-13	2585-2589	used	_	_	_	_
27-14	2590-2592	to	_	_	_	_
27-15	2593-2600	extract	_	_	_	_
27-16	2601-2606	three	abstract[159]	giv[159]	_	_
27-17	2607-2611	bits	abstract[159]	giv[159]	_	_
27-18	2612-2614	of	abstract[159]	giv[159]	_	_
27-19	2615-2621	secret	abstract[159]|abstract[160]	giv[159]|giv[160]	_	_
27-20	2622-2626	data	abstract[159]|abstract[160]	giv[159]|giv[160]	_	_
27-21	2627-2631	from	_	_	_	_
27-22	2632-2636	each	abstract[161]	giv[161]	coref	27-32[163_161]
27-23	2637-2646	seven-bit	abstract[161]	giv[161]	_	_
27-24	2647-2655	sequence	abstract[161]	giv[161]	_	_
27-25	2656-2657	.	_	_	_	_
27-26	2658-2659	(	_	_	_	_
27-27	2660-2661	5	_	_	_	_
27-28	2662-2663	)	_	_	_	_
27-29	2664-2669	where	_	_	_	_
27-30	2670-2673	RCW	abstract	new	_	_
27-31	2674-2681	denotes	_	_	_	_
27-32	2682-2685	the	abstract[163]	giv[163]	_	_
27-33	2686-2695	seven-bit	abstract[163]	giv[163]	_	_
27-34	2696-2704	sequence	abstract[163]	giv[163]	_	_
27-35	2705-2709	that	abstract[163]	giv[163]	_	_
27-36	2710-2713	has	abstract[163]	giv[163]	_	_
27-37	2714-2718	been	abstract[163]	giv[163]	_	_
27-38	2719-2727	embedded	abstract[163]	giv[163]	_	_
27-39	2728-2729	.	_	_	_	_

#Text=Equation ( 5 ) is also calculated under the modulo-2 operation .
28-1	2730-2738	Equation	abstract	giv	appos	28-3
28-2	2739-2740	(	_	_	_	_
28-3	2741-2742	5	abstract	giv	_	_
28-4	2743-2744	)	_	_	_	_
28-5	2745-2747	is	_	_	_	_
28-6	2748-2752	also	_	_	_	_
28-7	2753-2763	calculated	_	_	_	_
28-8	2764-2769	under	_	_	_	_
28-9	2770-2773	the	abstract[167]	giv[167]	_	_
28-10	2774-2782	modulo-2	place|abstract[167]	new|giv[167]	_	_
28-11	2783-2792	operation	abstract[167]	giv[167]	_	_
28-12	2793-2794	.	_	_	_	_
